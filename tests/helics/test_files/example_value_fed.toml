#this is a toml configuration file for HELICS value federate
#example toml configuration file for a value federate all arguments are optional

name="valueFed" # the name of the federate

#possible flags

# observer is an indicator that the federate does not send anything
observer=false

rollback= false # indicator that the federate can use rollback -NOTE= not used at present
only_update_on_change=false #indicator that the federate should only indicate updated values on change
only_transmit_on_change=false #indicator that the federate should only publish if the value changed
source_only=false  #indicator that the federate is only a source and is not expected to receive anything
uninterruptible=false #indicator that the federate should only return requested times
coretype="test" #the type of the core "test","zmq","udp","ipc","tcp","mpi"
corename="the name of the core"  #this matters most for ipc and test cores, can be empty
coreinit="--autobroker" # the initialization string for the core in the form of a command line arguments
max_iterations=10  #the maximum number of iterations for a time step
period=  1.0 #the period with which federate may return time
offset= 0.0 # the offset shift in the period
time_delta=0.0 # the minimum time between subsequent return times
output_delay=0 #the propagation delay for federates to send data
input_delay=0 #the input delay for external data to propagate to federates
log_level="summary"  # the log level to specify either a number or a string

#subscriptions used in the federate (also example of inline table
#set required to true to make helics issue a warning if the publication is not found
#example of inline tables (be careful it falls under the most recent [section] or [[table]]
subscriptions=[
{key="pub1",  required=true},
  # shortcut is a naming shortcut for the publication for later retrieval
{key="fedName/pub2", shortcut="pubshortcut", info="this is an information string for use by the application"}
]

inputs=[
{key="ipt2",  type="double",required=true, target="pub1"}
]  #specify an input with a target

#global values that can be read from anywhere in the federation
 globals=[
 ["global1","this is a global1 value"],
 ["global2","this is another global value"]
 ]

#Publications used in the federate
[[publications]]
key="pub1" # the name of the publication
 type="double" # the type associated with a publication (optional)
 unit="m"  # the units associated with a publication (optional)
 global=true #set to true to make the key global (default is false in which case the publication is prepended with the federate name)
 info="this is an information string for use by the application"

[[publications]]
key="pub2" # the name of the publication
 type="double" # the type associated with a publication (optional)
 #no global=true implies this will have the federate name prepended like valueFed/pub2
