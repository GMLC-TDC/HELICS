/*
Copyright (c) 2017-2020,
Battelle Memorial Institute; Lawrence Livermore National Security, LLC; Alliance for Sustainable
Energy, LLC.  See the top-level NOTICE for additional details. All rights reserved.
SPDX-License-Identifier: BSD-3-Clause
*/
#pragma once
/** @file
@brief base helics enumerations for C++ API's, a namespace wrapper for the definitions defined in
\ref helics_enums.h
*/
#include "helics/helics_enums.h"

namespace helics {
/** @namespace defs enum definitions for use in the C++ api
The defs namespace contains several enumerations for use in functions that take property types or
values or small sets of options*/
namespace defs {
    /** flags that can be used to set different options for a federate*/
    enum flags : int32_t {
        /** flag indicating that a federate is observe only*/
        observer = HELICS_FLAG_observer,
        /** flag indicating that a federate can only return requested times*/
        uninterruptible = HELICS_FLAG_uninterruptible,
        /** flag indicating that a federate can be interrupted*/
        interruptible = HELICS_FLAG_interruptible,
        /** flag specifying that a federate may be slow to respond to pings
        If the federate goes offline there is no good way to detect it so use with caution
        */
        slow_responding = HELICS_FLAG_slow_responding,
        /** flag specifying that a federate encountering an internal error should cause and abort
         * for the entire co-simulation
         */
        terminate_on_error = HELICS_FLAG_terminate_on_error,
        /** flag indicating that a federate/interface is a signal generator only*/
        source_only = HELICS_FLAG_source_only,
        /** flag indicating a federate/interface should only transmit values if they have
           changed(binary equivalence)*/
        only_transmit_on_change = HELICS_FLAG_only_transmit_on_change,
        /** flag indicating a federate/interface should only trigger an update if a value has
         * changed (binary equivalence)*/
        only_update_on_change = HELICS_FLAG_only_update_on_change,
        /** flag indicating a federate should only grant time if all other federates have already
         * passed the requested time*/
        wait_for_current_time_update = HELICS_FLAG_wait_for_current_time_update,
        /** flag indicating a federate should only operate on a restrictive time policy which means
    no second order projections and potentially very slow time advancement on gap conditions. Should
    only be used in selective circumstances*/
        restrictive_time_policy = HELICS_FLAG_restrictive_time_policy,
        /** flag indicating that a federate has rollback capability*/
        rollback = HELICS_FLAG_rollback,
        /** flag indicating that a federate performs forward computation and does internal
           rollback*/
        forward_compute = HELICS_FLAG_forward_compute,
        /** flag indicating that a federate needs to run in real time*/
        realtime = HELICS_FLAG_realtime,
        /** flag indicating that the federate will only interact on a single thread*/
        single_thread_federate = HELICS_FLAG_single_thread_federate,
        /** used to delay a core from entering initialization mode even if it would otherwise be
           ready*/
        delay_init_entry = HELICS_FLAG_delay_init_entry,
        /** used to clear the HELICS_DELAY_INIT_ENTRY flag in cores*/
        enable_init_entry = HELICS_FLAG_enable_init_entry,
        /** used to not display warnings on mismatched requested times*/
        ignore_time_mismatch_warnings = HELICS_FLAG_ignore_time_mismatch_warnings,
        /** force logging flush*/
        force_logging_flush = HELICS_FLAG_force_logging_flush,
        /** user debugging mode*/
        debugging = HELICS_FLAG_debugging,
        /** dump the logs to a file at the end*/
        dumplog = HELICS_FLAG_dumplog,
        /** make all connections required*/
        connections_required = HELICS_HANDLE_OPTION_connection_required,
        /** make all connections optional*/
        connections_optional = HELICS_HANDLE_OPTION_connection_optional,
        /** make all inputs have strict type checking*/
        strict_input_type_checking = HELICS_HANDLE_OPTION_strict_type_checking,
        /** be strict about config files*/
        strict_config_checking = HELICS_FLAG_strict_config_checking,
        /** ignore mismatching units*/
        ignore_input_unit_mismatch = HELICS_HANDLE_OPTION_ignore_unit_mismatch

    };
    /** potential errors that might be generated by a helics federate/core/broker */
    enum errors : int32_t {

        ok = helics_ok, /*!< the function executed successfully */
        registration_failure = HELICS_ERROR_registration_failure, /*!< registration has failed*/
        connection_failure =
            HELICS_ERROR_connection_failure, /*!< the operation to connect has failed*/
        invalid_object = HELICS_ERROR_invalid_object, /*!< indicator that the object used was not a
                                                         valid object */
        invalid_argument = HELICS_ERROR_invalid_argument, /*!< the parameter passed was invalid and
                                                             unable to be used*/
        discard = HELICS_ERROR_discard, /*!< the input was discarded and not used for some reason */
        system_failure = HELICS_ERROR_system_failure, /*!< the federate has terminated unexpectedly
                                                         and the call cannot be completed*/
        warning = helics_warning, /*!< the function issued a warning of some kind */
        invalid_state_transition =
            HELICS_ERROR_invalid_state_transition, /*!< error issued when an invalid state
                                                      transition occurred */
        invalid_function_call =
            HELICS_ERROR_invalid_function_call, /*!< the call made was invalid in the present state
                                                                   of the calling object*/
        execution_failure = HELICS_ERROR_execution_failure, /*!< the function execution has failed*/
        other = HELICS_ERROR_other, /*!< the function produced a helics error of some other type */
    };

    /** integer and time properties that can be set for federates*/
    enum properties : int32_t {
        time_delta = HELICS_PROPERTY_TIME_delta,
        period = HELICS_PROPERTY_TIME_PERIOD,
        offset = HELICS_PROPERTY_TIME_offset,
        rt_lag = HELICS_PROPERTY_TIME_rt_lag,
        rt_lead = HELICS_PROPERTY_TIME_rt_lead,
        rt_tolerance = HELICS_PROPERTY_TIME_rt_tolerance,
        input_delay = HELICS_PROPERTY_TIME_input_delay,
        output_delay = HELICS_PROPERTY_TIME_output_delay,
        max_iterations = HELICS_PROPERTY_INT_max_iterations,
        log_level = HELICS_PROPERTY_INT_log_level,
        file_log_level = HELICS_PROPERTY_INT_file_log_level,
        console_log_level = HELICS_PROPERTY_INT_console_log_level
    };

    /** options for handles */
    enum options : int32_t {
        connection_required = HELICS_HANDLE_OPTION_connection_required,
        connection_optional = HELICS_HANDLE_OPTION_connection_optional,
        single_connection_only = HELICS_HANDLE_OPTION_single_connection_only,
        multiple_connections_allowed = HELICS_HANDLE_OPTION_multiple_connections_allowed,
        handle_only_transmit_on_change = HELICS_HANDLE_OPTION_only_transmit_on_change,
        handle_only_update_on_change = HELICS_HANDLE_OPTION_only_update_on_change,
        buffer_data = HELICS_HANDLE_OPTION_buffer_data,
        ignore_interrupts = HELICS_HANDLE_OPTION_ignore_interrupts,
        strict_type_checking = HELICS_HANDLE_OPTION_strict_type_checking,
        ignore_unit_mismatch = HELICS_HANDLE_OPTION_ignore_unit_mismatch,
        multi_input_handling_method = HELICS_HANDLE_OPTION_multi_input_handling_method,
        input_priority_location = HELICS_HANDLE_OPTION_input_priority_location,
        clear_priority_list = HELICS_HANDLE_OPTION_clear_priority_list,
        connections = HELICS_HANDLE_OPTION_connections
    };

}  // namespace defs
}  // namespace helics
