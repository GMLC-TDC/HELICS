/*
Copyright (C) 2017, Battelle Memorial Institute
All rights reserved.

This software was co-developed by Pacific Northwest National Laboratory, operated by the Battelle Memorial
Institute; the National Renewable Energy Laboratory, operated by the Alliance for Sustainable Energy, LLC; and the
Lawrence Livermore National Laboratory, operated by Lawrence Livermore National Security, LLC.

*/
#ifndef _HELICS_FILTER_H_
#define _HELICS_FILTER_H_
#pragma once

#include "../core/core.h"
#include "MessageFederate.h"
#include "helics/helics-config.h"
#include "libguarded/guarded.hpp"
#include "libguarded/shared_guarded.hpp"
#include <mutex>
#include <set>

namespace helics
{
class MessageTimeOperator;
class MessageConditionalOperator;
class MessageDestOperator;

/** class for managing filter operations*/
class FilterOperations
{
  public:
    FilterOperations () = default;
    virtual ~FilterOperations () = default;
    // still figuring out if these functions have a use or not
    FilterOperations (const FilterOperations &fo) = delete;
    FilterOperations (FilterOperations &&fo) = delete;
    FilterOperations &operator= (const FilterOperations &fo) = delete;
    FilterOperations &operator= (FilterOperations &&fo) = delete;

    /** set a property on a filter
    @param property the name of the property of the filter to change
    @param val the numerical value of the property
    */
    virtual void set (const std::string &property, double val);
    /** set a string property on a filter
    @param property the name of the property of the filter to change
    @param val the numerical value of the property
    */
    virtual void setString (const std::string &property, const std::string &val);
    virtual std::shared_ptr<FilterOperator> getOperator () = 0;
};

/**filter for delaying a message in time*/
class delayFilterOperation : public FilterOperations
{
  private:
    std::atomic<Time> delay{timeZero};
    std::shared_ptr<MessageTimeOperator> td;

  public:
    explicit delayFilterOperation (Time delayTime = timeZero);
    virtual void set (const std::string &property, double val) override;
    virtual std::shared_ptr<FilterOperator> getOperator () override;
};

class randomDelayGenerator;

/** filter for generating a random delay time for a message*/
class randomDelayFilterOperation : public FilterOperations
{
  private:
    std::shared_ptr<MessageTimeOperator> td;
    std::unique_ptr<randomDelayGenerator> rdelayGen;

  public:
    randomDelayFilterOperation ();
    ~randomDelayFilterOperation ();
    virtual void set (const std::string &property, double val) override;
    virtual void setString (const std::string &property, const std::string &val) override;
    virtual std::shared_ptr<FilterOperator> getOperator () override;
};

/** filter for randomly dropping a packet*/
class randomDropFilterOperation : public FilterOperations
{
  private:
    std::atomic<double> dropProb{0.0};
    std::shared_ptr<MessageConditionalOperator> tcond;

  public:
    randomDropFilterOperation ();
    ~randomDropFilterOperation ();
    virtual void set (const std::string &property, double val) override;
    virtual void setString (const std::string &property, const std::string &val) override;
    virtual std::shared_ptr<FilterOperator> getOperator () override;
};

/** filter for rerouting a packet to a particular endpoint*/
class rerouteFilterOperation : public FilterOperations
{
  private:
    std::shared_ptr<MessageDestOperator> op;  //!< the actual operator
#ifdef HAVE_SHARED_TIMED_MUTEX
    libguarded::shared_guarded<std::string> newTarget;  //!< the target destination
    libguarded::shared_guarded<std::set<std::string>>
      conditions;  //!< the original destination must match one of these conditions
#else
    libguarded::shared_guarded<std::string, std::mutex> newTarget;  //!< the target destination
    libguarded::shared_guarded<std::set<std::string>, std::mutex>
      conditions;  //!< the original destination must match one of these conditions
#endif
  public:
    rerouteFilterOperation ();
    ~rerouteFilterOperation ();
    virtual void set (const std::string &property, double val) override;
    virtual void setString (const std::string &property, const std::string &val) override;
    virtual std::shared_ptr<FilterOperator> getOperator () override;

  private:
    /** function to execute the rerouting operation*/
    std::string rerouteOperation (const std::string &dest) const;
};

/** class for managing a particular filter*/
class Filter
{
  protected:
    Core *corePtr = nullptr;  //!< the Core to use
    Core::Handle id = invalid_Handle;  //!< the id as generated by the Federate
    filter_id_t fid = invalid_id_value;  //!< id for interacting with a federate
    std::shared_ptr<FilterOperations> filtOp;  //!< a class running any specific operation of the Filter
  public:
    Filter () = default;
    explicit Filter (Federate *fed);
    explicit Filter (Core *cr);
    virtual ~Filter () = default;

    /** set a message operator to process the message*/
    void setOperator (std::shared_ptr<FilterOperator> mo);

    void setFilterOperations (std::shared_ptr<FilterOperations> filterOps);
    filter_id_t getID () const { return fid; }
    Core::Handle getCoreHandle () const { return id; }

    /** get the target of the filter*/
    const std::string &getTarget () const;
    /** get the name for the filter*/
    const std::string &getName () const;
    /** get the specified input type of the filter*/
    const std::string &getInputType () const;
    /** get the specified output type of the filter*/
    const std::string &getOutputType () const;
};

/** class wrapping a source filter*/
class SourceFilter : public Filter
{
  public:
    /**constructor to build an source filter object
    @param[in] fed  the Federate to use
    @param[in] target the endpoint the filter is targeting
    @param[in] name the name of the filter
    @param[in] input_type the type of data the filter is expecting
    @param[in] output_type the type of data the filter is generating
    */
    SourceFilter (Federate *fed,
                  const std::string &target,
                  const std::string &name = "",
                  const std::string &input_type = "",
                  const std::string &output_type = "");
    /**constructor to build an source filter object
    @param[in] fed  the Federate to use
    @param[in] target the endpoint the filter is targeting
    @param[in] name the name of the filter
    @param[in] input_type the type of data the filter is expecting
    @param[in] output_type the type of data the filter is generating
    */
    SourceFilter (Core *cr,
                  const std::string &target,
                  const std::string &name = "",
                  const std::string &input_type = "",
                  const std::string &output_type = "");
    virtual ~SourceFilter () = default;
};

/** class wrapping a destination filter*/
class DestinationFilter : public Filter
{
  public:
    /**constructor to build an destination filter object
    @param[in] fed  the MessageFederate to use
    @param[in] target the endpoint the filter is targeting
    @param[in] name the name of the filter
    @param[in] input_type the type of data the filter is expecting
    @param[in] output_type the type of data the filter is generating
    */
    DestinationFilter (Federate *fed,
                       const std::string &target,
                       const std::string &name = "",
                       const std::string &input_type = "",
                       const std::string &output_type = "");
    /**constructor to build an destination filter object
    @param[in] cr  the Core to register the filter with
    @param[in] target the endpoint the filter is targeting
    @param[in] name the name of the filter
    @param[in] input_type the type of data the filter is expecting
    @param[in] output_type the type of data the filter is generating
    */
    DestinationFilter (Core *cr,
                       const std::string &target,
                       const std::string &name = "",
                       const std::string &input_type = "",
                       const std::string &output_type = "");
    virtual ~DestinationFilter () = default;
};

/** class used to clone message for delivery to other endpoints*/
class cloningFilter : public Filter
{
  public:
    explicit cloningFilter (Core *cr);
    explicit cloningFilter (Federate *fed);

    void addSourceEndpoint (const std::string &sourceName);
    void addDestinationEndpoint (const std::string &destinationName);
    void addDeliveryEndpoint (const std::string &endpoint);
};

/** a set of common defined filters*/
enum defined_filter_types
{
    custom = 0,
    delay = 1,
    randomDelay = 2,
    randomDrop = 3,
    reroute = 4,

};

std::unique_ptr<DestinationFilter> make_destination_filter (defined_filter_types type,
                                                            Federate *mFed,
                                                            const std::string &target,
                                                            const std::string &name = "");

std::unique_ptr<SourceFilter> make_Source_filter (defined_filter_types type,
                                                  Federate *mFed,
                                                  const std::string &target,
                                                  const std::string &name = "");

std::unique_ptr<DestinationFilter> make_destination_filter (defined_filter_types type,
                                                            Core *cr,
                                                            const std::string &target,
                                                            const std::string &name = "");

std::unique_ptr<SourceFilter>
make_Source_filter (defined_filter_types type, Core *cr, const std::string &target, const std::string &name = "");

}  // namespace helics
#endif
