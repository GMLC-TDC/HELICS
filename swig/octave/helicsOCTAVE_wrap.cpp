/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGOCTAVE
#define SWIGOCTAVE
#endif

#define SWIG_name_d      "helics"
#define SWIG_name        helics

#define SWIG_global_name      "cvar"
#define SWIG_op_prefix        "op_"


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <cstdlib>
#include <iostream>

#include <octave/oct.h>
#include <octave/version.h>

// Macro for enabling features which require Octave version >= major.minor.patch
// - Use (OCTAVE_PATCH_VERSION + 0) to handle both '<digit>' (released) and '<digit>+' (in development) patch numbers
#define SWIG_OCTAVE_PREREQ(major, minor, patch) \
  ( (OCTAVE_MAJOR_VERSION<<16) + (OCTAVE_MINOR_VERSION<<8) + (OCTAVE_PATCH_VERSION + 0) >= ((major)<<16) + ((minor)<<8) + (patch) )

// Reconstruct Octave major, minor, and patch versions for releases prior to 3.8.1
#if !defined(OCTAVE_MAJOR_VERSION)

# if !defined(OCTAVE_API_VERSION_NUMBER)

// Hack to distinguish between Octave 3.8.0, which removed OCTAVE_API_VERSION_NUMBER but did not yet
// introduce OCTAVE_MAJOR_VERSION, and Octave <= 3.2, which did not define OCTAVE_API_VERSION_NUMBER
#  include <octave/ov.h>
#  if defined(octave_ov_h)
#   define OCTAVE_MAJOR_VERSION 3
#   define OCTAVE_MINOR_VERSION 8
#   define OCTAVE_PATCH_VERSION 0
#  else

// Hack to distinguish between Octave 3.2 and earlier versions, before OCTAVE_API_VERSION_NUMBER existed
#   define ComplexLU __ignore
#   include <octave/CmplxLU.h>
#   undef ComplexLU
#   if defined(octave_Complex_LU_h)

// We know only that this version is prior to Octave 3.2, i.e. OCTAVE_API_VERSION_NUMBER < 37
#    define OCTAVE_MAJOR_VERSION 3
#    define OCTAVE_MINOR_VERSION 1
#    define OCTAVE_PATCH_VERSION 99

#   else

// OCTAVE_API_VERSION_NUMBER == 37
#    define OCTAVE_MAJOR_VERSION 3
#    define OCTAVE_MINOR_VERSION 2
#    define OCTAVE_PATCH_VERSION 0

#   endif // defined(octave_Complex_LU_h)

#  endif // defined(octave_ov_h)

// Correlation between Octave API and version numbers extracted from Octave's
// ChangeLogs; version is the *earliest* released Octave with that API number
# elif OCTAVE_API_VERSION_NUMBER >= 48
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 6
#  define OCTAVE_PATCH_VERSION 0

# elif OCTAVE_API_VERSION_NUMBER >= 45
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 4
#  define OCTAVE_PATCH_VERSION 1

# elif OCTAVE_API_VERSION_NUMBER >= 42
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 54

# elif OCTAVE_API_VERSION_NUMBER >= 41
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 53

# elif OCTAVE_API_VERSION_NUMBER >= 40
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 52

# elif OCTAVE_API_VERSION_NUMBER >= 39
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 51

# else // OCTAVE_API_VERSION_NUMBER == 38
#  define OCTAVE_MAJOR_VERSION 3
#  define OCTAVE_MINOR_VERSION 3
#  define OCTAVE_PATCH_VERSION 50

# endif // !defined(OCTAVE_API_VERSION_NUMBER)

#endif // !defined(OCTAVE_MAJOR_VERSION)

#include <octave/Cell.h>
#include <octave/dynamic-ld.h>
#include <octave/oct-env.h>
#include <octave/oct-map.h>
#include <octave/ov-scalar.h>
#include <octave/ov-fcn-handle.h>
#include <octave/parse.h>
#if SWIG_OCTAVE_PREREQ(4,2,0)
#include <octave/interpreter.h>
#else
#include <octave/toplev.h>
#endif
#include <octave/unwind-prot.h>
#if SWIG_OCTAVE_PREREQ(4,2,0)
#include <octave/call-stack.h>
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#if !SWIG_OCTAVE_PREREQ(3,2,0)
#define SWIG_DEFUN(cname, wname, doc) DEFUNX_DLD(#cname, wname, FS ## cname, args, nargout, doc)
#else
#define SWIG_DEFUN(cname, wname, doc) DEFUNX_DLD(#cname, wname, G ## cname, args, nargout, doc)
#endif

SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    error("function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    error("function %s requires at least %i arguments", func_name, min_args);
  else
    return true;
  return false;
}

SWIGRUNTIME octave_value_list *SWIG_Octave_AppendOutput(octave_value_list *ovl, const octave_value &ov) {
  ovl->append(ov);
  return ovl;
}

SWIGRUNTIME octave_value SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG_MemoryError";
  case SWIG_IOError:
    return "SWIG_IOError";
  case SWIG_RuntimeError:
    return "SWIG_RuntimeError";
  case SWIG_IndexError:
    return "SWIG_IndexError";
  case SWIG_TypeError:
    return "SWIG_TypeError";
  case SWIG_DivisionByZero:
    return "SWIG_DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG_OverflowError";
  case SWIG_SyntaxError:
    return "SWIG_SyntaxError";
  case SWIG_ValueError:
    return "SWIG_ValueError";
  case SWIG_SystemError:
    return "SWIG_SystemError";
  case SWIG_AttributeError:
    return "SWIG_AttributeError";
  }
  return "SWIG unknown error";
}

SWIGRUNTIME octave_value SWIG_Error(int code, const char *msg) {
  octave_value type(SWIG_ErrorType(code));
  std::string r = msg;
  r += " (" + type.string_value() + ")";
  error(r.c_str());
  return octave_value(r);
}

#define SWIG_fail                                       goto fail

#define SWIG_Octave_ConvertPtr(obj, pptr, type, flags)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Octave_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Octave_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Octave_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Octave_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Octave_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Octave_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Octave_SetModule(clientdata,pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Octave_Error_Occurred() 0
#define SWIG_Octave_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer);

// For backward compatibility only
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

// Runtime API implementation

#include <map>
#include <vector>
#include <string>

typedef octave_value_list(*octave_func) (const octave_value_list &, int);
class octave_swig_type;

namespace Swig {

#ifdef SWIG_DIRECTORS

  class Director;

  typedef std::map < void *, Director * > rtdir_map;
  SWIGINTERN rtdir_map* get_rtdir_map();
  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *d);
  SWIGINTERNINLINE void erase_rtdir(void *vptr);
  SWIGINTERNINLINE Director *get_rtdir(void *vptr);

  SWIGRUNTIME void swig_director_destroyed(octave_swig_type *self, Director *d);
  SWIGRUNTIME octave_swig_type *swig_director_get_self(Director *d);
  SWIGRUNTIME void swig_director_set_self(Director *d, octave_swig_type *self);

#endif

  SWIGRUNTIME octave_base_value *swig_value_ref(octave_swig_type *ost);
  SWIGRUNTIME octave_swig_type *swig_value_deref(octave_value ov);
  SWIGRUNTIME octave_swig_type *swig_value_deref(const octave_base_value &ov);
}

#ifdef SWIG_DIRECTORS
SWIGRUNTIME void swig_acquire_ownership(void *vptr);
SWIGRUNTIME void swig_acquire_ownership_array(void *vptr);
SWIGRUNTIME void swig_acquire_ownership_obj(void *vptr, int own);
#endif

  struct swig_octave_member {
    const char *name;
    octave_func method;
    octave_func get_method;
    octave_func set_method;
    int flags;			// 1 static, 2 global
    const char *doc;
    bool is_static() const {
      return flags &1;
    } bool is_global() const {
      return flags &2;
    }
  };

  struct swig_octave_class {
    const char *name;
    swig_type_info **type;
    int director;
    octave_func constructor;
    const char *constructor_doc;
    octave_func destructor;
    const swig_octave_member *members;
    const char **base_names;
    const swig_type_info **base;
  };

  // octave_swig_type plays the role of both the shadow class and the class 
  // representation within Octave, since there is no support for classes.
  //
  // These should really be decoupled, with the class support added to Octave
  // and the shadow class given by an m-file script. That would dramatically 
  // reduce the runtime complexity, and be more in line w/ other modules.

  class octave_swig_type:public octave_base_value {
    struct cpp_ptr {
      void *ptr;
      bool destroyed;
      cpp_ptr(void *_ptr):ptr(_ptr), destroyed(false) {
      }};
    typedef std::pair < const swig_type_info *, cpp_ptr > type_ptr_pair;

    mutable swig_module_info *module;

    const swig_type_info *construct_type;	// type of special type object
    std::vector < type_ptr_pair > types;	// our c++ base classes
    int own;			// whether we call c++ destructors when we die

    typedef std::pair < const swig_octave_member *, octave_value > member_value_pair;
    typedef std::map < std::string, member_value_pair > member_map;
    member_map members;
    bool always_static;

    const swig_octave_member *find_member(const swig_type_info *type, const std::string &name) {
      if (!type->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) type->clientdata;
      const swig_octave_member *m;
      for (m = c->members; m->name; ++m)
	if (m->name == name)
	  return m;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	if ((m = find_member(c->base[j], name)))
	  return m;
      }
      return 0;
    }

    member_value_pair *find_member(const std::string &name, bool insert_if_not_found) {
      member_map::iterator it = members.find(name);
      if (it != members.end())
	return &it->second;
      const swig_octave_member *m;
      for (unsigned int j = 0; j < types.size(); ++j)
	if ((m = find_member(types[j].first, name)))
	  return &members.insert(std::make_pair(name, std::make_pair(m, octave_value()))).first->second;
      if (!insert_if_not_found)
	return 0;
      return &members[name];
    }

    const swig_type_info *find_base(const std::string &name, const swig_type_info *base) {
      if (!base) {
	for (unsigned int j = 0; j < types.size(); ++j) {
	  assert(types[j].first->clientdata);
	  swig_octave_class *cj = (swig_octave_class *) types[j].first->clientdata;
	  if (cj->name == name)
	    return types[j].first;
	}
	return 0;
      }
      assert(base->clientdata);
      swig_octave_class *c = (swig_octave_class *) base->clientdata;
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  return 0;
	assert(c->base[j]->clientdata);
	swig_octave_class *cj = (swig_octave_class *) c->base[j]->clientdata;
	if (cj->name == name)
	  return c->base[j];
      }
      return 0;
    }

    void load_members(const swig_octave_class* c,member_map& out) const {
      for (const swig_octave_member *m = c->members; m->name; ++m) {
	if (out.find(m->name) == out.end())
	  out.insert(std::make_pair(m->name, std::make_pair(m, octave_value())));
      }
      for (int j = 0; c->base_names[j]; ++j) {
	if (!c->base[j]) {
	  if (!module)
	    module = SWIG_GetModule(0);
	  assert(module);
	  c->base[j] = SWIG_MangledTypeQueryModule(module, module, c->base_names[j]);
	}
	if (!c->base[j])
	  continue;
	assert(c->base[j]->clientdata);
	const swig_octave_class *cj =
	  (const swig_octave_class *) c->base[j]->clientdata;
	load_members(cj,out);
      }
    }

    void load_members(member_map& out) const {
      out=members;
      for (unsigned int j = 0; j < types.size(); ++j)
	if (types[j].first->clientdata)
	  load_members((const swig_octave_class *) types[j].first->clientdata, out);
    }

    octave_value_list member_invoke(member_value_pair *m, const octave_value_list &args, int nargout) {
      if (m->second.is_defined())
	return m->second.subsref("(", std::list < octave_value_list > (1, args), nargout);
      else if (m->first && m->first->method)
	return m->first->method(args, nargout);
      error("member not defined or not invocable");
      return octave_value_list();
    }

    bool dispatch_unary_op(const std::string &symbol, octave_value &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_binary_op(const std::string &symbol, const octave_base_value &rhs, octave_value &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      args.append(make_value_hack(rhs));
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() < 1)
	return false;
      ret = argout(0);
      return true;
    }

    bool dispatch_index_op(const std::string &symbol, const octave_value_list &rhs, octave_value_list &ret) const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      member_value_pair *m = nc_this->find_member(symbol, false);
      if (!m || m->first->is_static() || m->first->is_global())
	return false;
      octave_value_list args;
      args.append(nc_this->as_value());
      args.append(rhs);
      octave_value_list argout(nc_this->member_invoke(m, args, 1));
      if (argout.length() >= 1)
	ret = argout(0);
      return true;
    }

    octave_value_list member_deref(member_value_pair *m, const octave_value_list &args) {
      if (m->second.is_defined())
	return m->second;
      else if (m->first) {
	if (m->first->get_method)
	  return m->first->get_method(args, 1);
	else if (m->first->method)
	  return octave_value(new octave_builtin(m->first->method));
      }
      error("undefined member");
      return octave_value_list();
    }

    static octave_value make_value_hack(const octave_base_value &x) {
      ((octave_swig_type &) x).count++;
      return octave_value((octave_base_value *) &x);
    }

    octave_swig_type(const octave_swig_type &x);
    octave_swig_type &operator=(const octave_swig_type &rhs);
  public:

    octave_swig_type(void *_ptr = 0, const swig_type_info *_type = 0, int _own = 0,
		     bool _always_static = false)
      :	module(0), construct_type(_ptr ? 0 : _type), own(_own), 
      always_static(_always_static) {
      if (_type || _ptr)
	types.push_back(std::make_pair(_type, _ptr));
#ifdef SWIG_DIRECTORS
      if (_ptr) {
	Swig::Director *d = Swig::get_rtdir(_ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
      }
#endif
    }

    ~octave_swig_type() {
      if (own) {
	++count;
	for (unsigned int j = 0; j < types.size(); ++j) {
	  if (!types[j].first || !types[j].first->clientdata)
	    continue;
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  if (c->destructor && !types[j].second.destroyed && types[j].second.ptr) {
	    c->destructor(as_value(), 0);
	  }
	}
      }
#ifdef SWIG_DIRECTORS
      for (unsigned int j = 0; j < types.size(); ++j)
	Swig::erase_rtdir(types[j].second.ptr);
#endif
    }

    dim_vector dims(void) const {
      octave_value out;
      if (!dispatch_unary_op("__dims__", out))
        return dim_vector(1,1);

      // Return value should be cell or matrix of integers
      if (out.is_cell()) {
        const Cell & c=out.cell_value();
        int ndim = c.rows();
        if (ndim==1 && c.columns()!=1) ndim = c.columns();

        dim_vector d;
        d.resize(ndim < 2 ? 2 : ndim);
        d(0) = d(1) = 1;

        // Fill in dim_vector 
        for (int k=0;k<ndim;k++) {
          const octave_value& obj = c(k);
          d.elem(k) = obj.int_value();
          
          // __dims__ should return a cell filled with integers
          if (error_state) return dim_vector(1,1);
        }
        return d;
      } else if (out.is_matrix_type() || out.is_numeric_type() ) {
        if (out.rows()==1 || out.columns()==1) {
           Array<int> a = out.int_vector_value();
           if (error_state) return dim_vector(1,1);
           dim_vector d;
           d.resize(a.numel() < 2 ? 2 : a.numel());
           d(0) = d(1) = 1;
           for (int k=0;k<a.numel();k++) {
              d.elem(k) = a(k);
           }
           return d;
        } else {
          return dim_vector(1,1);
        }
      } else {
        return dim_vector(1,1);
      }
    }

    octave_value as_value() {
      ++count;
      return Swig::swig_value_ref(this);
    }

    void incref() {
      ++count;
    }

    void decref() {
      if (!--count)
	delete this;
    }

    long long swig_this() {
      if (!types.size())
	return (long long) this;
      return (long long) types[0].second.ptr;
    }
    const char* help_text() const {
      if (!types.size())
	return 0;
      if (!types[0].first->clientdata)
	return 0;
      swig_octave_class *c = (swig_octave_class *) types[0].first->clientdata;
      return c->constructor_doc;
    }

    std::string swig_type_name() const {
      // * need some way to manually name subclasses.
      // * eg optional first arg to subclass(), or named_subclass()
      std::string ret;
      for (unsigned int j = 0; j < types.size(); ++j) {
	if (j)
	  ret += "_";
	if (types[j].first->clientdata) {
	  swig_octave_class *c = (swig_octave_class *) types[j].first->clientdata;
	  ret += c->name;
	} else
	  ret += types[j].first->name;
      }
      return ret;
    }

    void merge(octave_swig_type &rhs) {
      rhs.own = 0;
      for (unsigned int j = 0; j < rhs.types.size(); ++j) {
	assert(!rhs.types[j].second.destroyed);
#ifdef SWIG_DIRECTORS
	Swig::Director *d = Swig::get_rtdir(rhs.types[j].second.ptr);
	if (d)
	  Swig::swig_director_set_self(d, this);
#endif
      }
      types.insert(types.end(), rhs.types.begin(), rhs.types.end());
      members.insert(rhs.members.begin(), rhs.members.end());
      rhs.types.clear();
      rhs.members.clear();
    }

    typedef member_map::const_iterator swig_member_const_iterator;
    swig_member_const_iterator swig_members_begin() { return members.begin(); }
    swig_member_const_iterator swig_members_end() { return members.end(); }

    int cast(void **vptr, swig_type_info *type, int *_own, int flags) {
      int res = SWIG_ERROR;
      if (_own)
	*_own = own;
      if (flags &SWIG_POINTER_DISOWN)
	own = 0;
      if (!type && types.size()) {
	if(vptr)
          *vptr = types[0].second.ptr;
        return SWIG_OK;
      }
      for (unsigned int j = 0; j < types.size(); ++j)
	if (type == types[j].first) {
	  if(vptr)
            *vptr = types[j].second.ptr;
          return SWIG_OK;
        }
      for (unsigned int j = 0; j < types.size(); ++j) {
	swig_cast_info *tc = SWIG_TypeCheck(types[j].first->name, type);
	if (!tc)
	  continue;
        if(vptr) {
	  int newmemory = 0;
	  *vptr = SWIG_TypeCast(tc, types[j].second.ptr, &newmemory);
	    if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(_own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (_own)
                *_own = *_own | SWIG_CAST_NEW_MEMORY;
            }
        }
        res = SWIG_OK;
        break;
      }
      return res;
    }

    bool is_owned() const {
      return own;
    }

#ifdef SWIG_DIRECTORS
    void director_destroyed(Swig::Director *d) {
      bool found = false;
      for (unsigned int j = 0; j < types.size(); ++j) {
	Swig::Director *dj = Swig::get_rtdir(types[j].second.ptr);
	if (dj == d) {
	  types[j].second.destroyed = true;
	  found = true;
	}
      }
      assert(found);
    }
#endif

    void assign(const std::string &name, const octave_value &ov) {
      members[name] = std::make_pair((const swig_octave_member *) 0, ov);
    }

    void assign(const std::string &name, const swig_octave_member *m) {
      members[name] = std::make_pair(m, octave_value());
    }

    octave_base_value *clone() const {
      // pass-by-value is probably not desired, and is harder;
      // requires calling copy constructors of contained types etc.
      assert(0);
      *(int *) 0 = 0;
      return 0;
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_type();
    }

    bool is_defined() const {
      return true;
    }

    virtual bool is_map() const {
      return true;
    }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) {
      octave_value_list ovl = subsref(ops, idx, 1);
      return ovl.length()? ovl(0) : octave_value();
    }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;
      octave_value_list sub_ovl;

      // constructor invocation
      if (ops[skip] == '(' && construct_type) {
	assert(construct_type->clientdata);
	swig_octave_class *c = (swig_octave_class *) construct_type->clientdata;
	if (!c->constructor) {
	  error("cannot create instance");
	  return octave_value_list();
	}
	octave_value_list args;
	if (c->director)
	  args.append(Swig::swig_value_ref(new octave_swig_type(this, 0, 0)));
	args.append(*idx_it++);
	++skip;
	sub_ovl = c->constructor(args, nargout);
      }
      // member dereference or invocation
      else if (ops[skip] == '.') {
	std::string subname;
	const swig_type_info *base = 0;	// eg, a.base.base_cpp_mem
	for (;;) {
	  octave_value_list subname_ovl(*idx_it++);
	  ++skip;
	  assert(subname_ovl.length() == 1 && subname_ovl(0).is_string());
	  subname = subname_ovl(0).string_value();

	  const swig_type_info *next_base = find_base(subname, base);
	  if (!next_base || skip >= (int) ops.size() || ops[skip] != '.')
	    break;
	  base = next_base;
	}

	member_value_pair tmp, *m = &tmp;
	if (!base || !(m->first = find_member(base, subname)))
	  m = find_member(subname, false);
	if (!m) {
	  error("member not found");
	  return octave_value_list();
	}

	octave_value_list args;
	if (!always_static &&
	    (!m->first || (!m->first->is_static() && !m->first->is_global())))
	  args.append(as_value());
	if (skip < (int) ops.size() && ops[skip] == '(' && 
	    ((m->first && m->first->method) || m->second.is_function() || 
	     m->second.is_function_handle())) {
	  args.append(*idx_it++);
	  ++skip;
	  sub_ovl = member_invoke(m, args, nargout);
	} else {
	  sub_ovl = member_deref(m, args);
	}
      }
      // index operator
      else {
	if (ops[skip] == '(' || ops[skip] == '{') {
	  const char *op_name = ops[skip] == '(' ? "__paren__" : "__brace__";
	  octave_value_list args;
	  args.append(*idx_it++);
	  ++skip;
	  if (!dispatch_index_op(op_name, args, sub_ovl)) {
	    error("error evaluating index operator");
	    return octave_value_list();
	  }
	} else {
	  error("unsupported subsref");
	  return octave_value_list();
	}
      }

      if (skip >= (int) ops.size())
	return sub_ovl;
      if (sub_ovl.length() < 1) {
	error("bad subs ref");
	return octave_value_list();
      }
      return sub_ovl(0).next_subsref(nargout, ops, idx, skip);
    }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs) {
      assert(ops.size() > 0);
      assert(ops.size() == idx.size());

      std::list < octave_value_list >::const_iterator idx_it = idx.begin();
      int skip = 0;

      if (ops.size() > 1) {
	std::list < octave_value_list >::const_iterator last = idx.end();
	--last;
	std::list < octave_value_list > next_idx(idx.begin(), last);
	octave_value next_ov = subsref(ops.substr(0, ops.size() - 1), next_idx);
	next_ov.subsasgn(ops.substr(ops.size() - 1), std::list < octave_value_list > (1, *last), rhs);
      }

      else if (ops[skip] == '(' || ops[skip] == '{') {
	const char *op_name = ops[skip] == '(' ? "__paren_asgn__" : "__brace_asgn__";
	member_value_pair *m = find_member(op_name, false);
	if (m) {
	  octave_value_list args;
	  args.append(as_value());
	  args.append(*idx_it);
	  args.append(rhs);
	  member_invoke(m, args, 1);
	} else
	  error("%s member not found", op_name);
      }

      else if (ops[skip] == '.') {
	octave_value_list subname_ovl(*idx_it++);
	++skip;
	assert(subname_ovl.length() == 1 &&subname_ovl(0).is_string());
	std::string subname = subname_ovl(0).string_value();

	member_value_pair *m = find_member(subname, true);
	if (!m->first || !m->first->set_method) {
	  m->first = 0;
	  m->second = rhs;
	} else if (m->first->set_method) {
	  octave_value_list args;
	  if (!m->first->is_static() && !m->first->is_global())
	    args.append(as_value());
	  args.append(rhs);
	  m->first->set_method(args, 1);
	} else
	  error("member not assignable");
      } else
	error("unsupported subsasgn");

      return as_value();
    }

    virtual bool is_object() const {
      return true;
    }

    virtual bool is_string() const {
      octave_swig_type *nc_this = const_cast < octave_swig_type *>(this);
      return !!nc_this->find_member("__str__", false);
    }

    virtual std::string string_value(bool force = false) const {
      octave_value ret;
      if (!dispatch_unary_op("__str__", ret)) {
        error("__str__ method not defined");
        return std::string();
      }
      if (!ret.is_string()) {
	error("__str__ method did not return a string");
	return std::string();
      }
      return ret.string_value();
    }

    virtual double scalar_value(bool frc_str_conv = false) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.scalar_value();
    }

#if SWIG_OCTAVE_PREREQ(4,2,0)
    virtual octave_value as_double(void) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.as_double();
    }

    virtual octave_value as_single(void) const {
      octave_value ret;
      if (!dispatch_unary_op("__float__", ret)) {
        error("__float__ method not defined");
      }
      return ret.as_single();
    }
#endif

#if SWIG_OCTAVE_PREREQ(3,8,0)
    virtual octave_value map(octave_base_value::unary_mapper_t umap) const {
      const std::string opname = std::string("__") + octave_base_value::get_umap_name(umap) + std::string("__");
      octave_value ret;
      if (!dispatch_unary_op(opname, ret)) {
        error((opname + std::string(" method not found")).c_str());
        return octave_value();
      }
      return ret;
    }
#endif

#if SWIG_OCTAVE_PREREQ(3,3,52)
    virtual octave_map map_value() const {
      return octave_map();
    }
#else
    virtual Octave_map map_value() const {
      return Octave_map();
    }
#endif

    virtual string_vector map_keys() const {
      member_map tmp;
      load_members(tmp);

      string_vector keys(tmp.size());
      int k = 0;
      for (member_map::iterator it = tmp.begin(); it != tmp.end(); ++it)
	keys(k++) = it->first;

      return keys;
    }

    virtual bool save_ascii (std::ostream& os) {
      return true;
    }

    virtual bool load_ascii (std::istream& is) {
      return true;
    }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats) {
      return true;
    }

    virtual bool load_binary (std::istream& is, bool swap, 
			      oct_mach_info::float_format fmt) {
      return true;
    }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# endif
#endif

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const {
      return string_value();
    }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const {
      return string_value();
    }

    static bool dispatch_global_op(const std::string &symbol, const octave_value_list &args, octave_value &ret) {
      // we assume that SWIG_op_prefix-prefixed functions are installed in global namespace
      // (rather than any module namespace).

      octave_function *fcn = is_valid_function(symbol, std::string(), false);
      if (!fcn)
	return false;
      ret = fcn->do_multi_index_op(1, args)(0);
      return true;
    }

    static octave_value dispatch_unary_op(const octave_base_value &x, const char *op_name) {
      octave_swig_type *ost = Swig::swig_value_deref(x);
      assert(ost);

      octave_value ret;
      if (ost->dispatch_unary_op(std::string("__") + op_name + std::string("__"), ret))
	return ret;
      std::string symbol = SWIG_op_prefix + ost->swig_type_name() + "_" + op_name;
      octave_value_list args;
      args.append(make_value_hack(x));
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch unary operator");
      return octave_value();
    }

    static octave_value dispatch_binary_op(const octave_base_value &lhs, const octave_base_value &rhs, const char *op_name) {
      octave_swig_type *lhs_ost = Swig::swig_value_deref(lhs);
      octave_swig_type *rhs_ost = Swig::swig_value_deref(rhs);

      octave_value ret;
      if (lhs_ost && lhs_ost->dispatch_binary_op(std::string("__") + op_name + std::string("__"), rhs, ret))
	return ret;
      if (rhs_ost) {
        if (strlen(op_name) == 2  && (op_name[1] == 't' || op_name[1] == 'e')) {
          if (op_name[0] == 'l' && rhs_ost->dispatch_binary_op(std::string("__g") + op_name[1] + std::string("__"), lhs, ret))
            return ret;
          if (op_name[0] == 'g' && rhs_ost->dispatch_binary_op(std::string("__l") + op_name[1] + std::string("__"), lhs, ret))
            return ret;
        }
        if (rhs_ost->dispatch_binary_op(std::string("__r") + op_name + std::string("__"), lhs, ret))
          return ret;
      }

      std::string symbol;
      octave_value_list args;
      args.append(make_value_hack(lhs));
      args.append(make_value_hack(rhs));

      symbol = SWIG_op_prefix;
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = SWIG_op_prefix;
      symbol += lhs_ost ? lhs_ost->swig_type_name() : lhs.type_name();
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += "any";
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      symbol = SWIG_op_prefix;
      symbol += "any";
      symbol += "_";
      symbol += op_name;
      symbol += "_";
      symbol += rhs_ost ? rhs_ost->swig_type_name() : rhs.type_name();
      if (dispatch_global_op(symbol, args, ret))
	return ret;

      error("could not dispatch binary operator");
      return octave_value();
    }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
    {
      if (is_string()) {
	os << string_value();
	return;
      }

      member_map tmp;
      load_members(tmp);

      indent(os);
      os << "{"; newline(os);
      increment_indent_level();
      for (unsigned int j = 0; j < types.size(); ++j) {
        indent(os);
	if (types[j].first->clientdata) {
	  const swig_octave_class *c = (const swig_octave_class *) types[j].first->clientdata;
	  os << c->name << ", ptr = " << types[j].second.ptr; newline(os);
	} else {
	  os << types[j].first->name << ", ptr = " << types[j].second.ptr; newline(os);
	}
      }
      for (member_map::const_iterator it = tmp.begin(); it != tmp.end(); ++it) {
        indent(os);
	if (it->second.first) {
	  const char *objtype = it->second.first->method ? "method" : "variable";
	  const char *modifier = (it->second.first->flags &1) ? "static " : (it->second.first->flags &2) ? "global " : "";
	  os << it->second.first->name << " (" << modifier << objtype << ")"; newline(os);
	  assert(it->second.first->name == it->first);
	} else {
	  os << it->first; newline(os);
	}
      }
      decrement_indent_level();
      indent(os);
      os << "}"; newline(os);
    }
  };

  // Octave tries hard to preserve pass-by-value semantics. Eg, assignments
  // will call clone() via make_unique() if there is more than one outstanding 
  // reference to the lhs, and forces the clone's reference count to 1 
  // (so you can't just increment your own count and return this).
  //
  // One way to fix this (without modifying Octave) is to add a level of
  // indirection such that clone copies ref-counted pointer and we keep 
  // pass-by-ref semantics (which are more natural/expected for C++ bindings).
  //
  // Supporting both pass-by-{ref,value} and toggling via %feature/option 
  // might be nice.

  class octave_swig_ref:public octave_base_value {
    octave_swig_type *ptr;
  public:
    octave_swig_ref(octave_swig_type *_ptr = 0)
      :ptr(_ptr) { }

    ~octave_swig_ref()
      { if (ptr) ptr->decref(); }

    octave_swig_type *get_ptr() const
      { return ptr; }

    octave_base_value *clone() const
      { if (ptr) ptr->incref(); return new octave_swig_ref(ptr); }

    octave_base_value *empty_clone() const
      { return new octave_swig_ref(0); }

    dim_vector dims(void) const 
      { return ptr->dims(); }

    bool is_defined() const
      { return ptr->is_defined(); }

    virtual bool is_map() const 
      { return ptr->is_map(); }

    virtual octave_value subsref(const std::string &ops, const std::list < octave_value_list > &idx) 
      { return ptr->subsref(ops, idx); }

    virtual octave_value_list subsref(const std::string &ops, const std::list < octave_value_list > &idx, int nargout)
      { return ptr->subsref(ops, idx, nargout); }

    octave_value subsasgn(const std::string &ops, const std::list < octave_value_list > &idx, const octave_value &rhs)
      { return ptr->subsasgn(ops, idx, rhs); }

    virtual bool is_object() const 
      { return ptr->is_object(); }

    virtual bool is_string() const 
      { return ptr->is_string(); }

    virtual std::string string_value(bool force = false) const 
      { return ptr->string_value(force); }

    virtual double scalar_value(bool frc_str_conv = false) const
      { return ptr->scalar_value(frc_str_conv); }

#if SWIG_OCTAVE_PREREQ(4,2,0)
    virtual octave_value as_double(void) const
      { return ptr->as_double(); }

    virtual octave_value as_single(void) const
      { return ptr->as_single(); }
#endif

#if SWIG_OCTAVE_PREREQ(3,8,0)
    virtual octave_value map(octave_base_value::unary_mapper_t umap) const
      { return ptr->map(umap); }
#endif

#if SWIG_OCTAVE_PREREQ(3,3,52)
    virtual octave_map map_value() const
      { return ptr->map_value(); }
#else
    virtual Octave_map map_value() const
      { return ptr->map_value(); }
#endif

    virtual string_vector map_keys() const
      { return ptr->map_keys(); }

    virtual bool save_ascii (std::ostream& os)
      { return ptr->save_ascii(os); }

    virtual bool load_ascii (std::istream& is)
      { return ptr->load_ascii(is); }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats)
      { return ptr->save_binary(os, save_as_floats); }

    virtual bool load_binary (std::istream& is, bool swap, 
			      oct_mach_info::float_format fmt)
      { return ptr->load_binary(is, swap, fmt); }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats)
      { return ptr->save_hdf5(loc_id, name, save_as_floats); }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug)
      { return ptr->load_hdf5(loc_id, name, have_h5giterate_bug); }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats)
      { return ptr->save_hdf5(loc_id, name, save_as_floats); }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug)
      { return ptr->load_hdf5(loc_id, name, have_h5giterate_bug); }
# endif
#endif

    virtual octave_value convert_to_str(bool pad = false, bool force = false, char type = '"') const
      { return ptr->convert_to_str(pad, force, type); }

    virtual octave_value convert_to_str_internal(bool pad, bool force, char type) const
      { return ptr->convert_to_str_internal(pad, force, type); }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
      { return ptr->print(os, pr_as_read_syntax); }

    virtual type_conv_info numeric_conversion_function(void) const {
      return octave_base_value::type_conv_info (default_numeric_conversion_function,
                                                octave_scalar::static_type_id ());
    }

  private:
    static octave_base_value *default_numeric_conversion_function (const octave_base_value& a) {
      const octave_swig_ref& v = dynamic_cast<const octave_swig_ref&>(a);
      return new octave_scalar(v.scalar_value());
    }

#if !SWIG_OCTAVE_PREREQ(4,0,0)
    DECLARE_OCTAVE_ALLOCATOR;
#endif
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
#if !SWIG_OCTAVE_PREREQ(4,0,0)
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_ref);
#endif
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_ref, "swig_ref", "swig_ref");

  class octave_swig_packed:public octave_base_value {
    swig_type_info *type;
    std::vector < char > buf;
  public:

    octave_swig_packed(swig_type_info *_type = 0, const void *_buf = 0, size_t _buf_len = 0)
      :	type(_type), buf((const char*)_buf, (const char*)_buf + _buf_len) {
    }

    bool copy(swig_type_info *outtype, void *ptr, size_t sz) const {
      if (outtype && outtype != type)
	return false;
      assert(sz <= buf.size());
      std::copy(buf.begin(), buf.begin()+sz, (char*)ptr);
      return true;
    }

    octave_base_value *clone() const {
      return new octave_swig_packed(*this);
    }

    octave_base_value *empty_clone() const {
      return new octave_swig_packed();
    }

    bool is_defined() const {
      return true;
    }

#if SWIG_OCTAVE_PREREQ(4,0,0)
    void print(std::ostream &os, bool pr_as_read_syntax = false)
#else
    void print(std::ostream &os, bool pr_as_read_syntax = false) const
#endif
    {
      indent(os);
      os << "swig packed type: name = " << (type ? type->name : std::string()) << ", len = " << buf.size(); newline(os);
    }


    virtual bool save_ascii (std::ostream& os) {
      return true;
    }

    virtual bool load_ascii (std::istream& is) {
      return true;
    }

    virtual bool save_binary (std::ostream& os, bool& save_as_floats) {
      return true;
    }

    virtual bool load_binary (std::istream& is, bool swap, 
			      oct_mach_info::float_format fmt) {
      return true;
    }

#if defined (HAVE_HDF5)
# if SWIG_OCTAVE_PREREQ(4,0,0)
    virtual bool
      save_hdf5 (octave_hdf5_id loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (octave_hdf5_id loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# else
    virtual bool
      save_hdf5 (hid_t loc_id, const char *name, bool save_as_floats) {
      return true;
    }

    virtual bool
      load_hdf5 (hid_t loc_id, const char *name, bool have_h5giterate_bug) {
      return true;
    }
# endif
#endif

  private:
#if !SWIG_OCTAVE_PREREQ(4,0,0)
    DECLARE_OCTAVE_ALLOCATOR;
#endif
    DECLARE_OV_TYPEID_FUNCTIONS_AND_DATA;
  };
#if !SWIG_OCTAVE_PREREQ(4,0,0)
  DEFINE_OCTAVE_ALLOCATOR(octave_swig_packed);
#endif
  DEFINE_OV_TYPEID_FUNCTIONS_AND_DATA(octave_swig_packed, "swig_packed", "swig_packed");

  SWIGRUNTIME octave_value_list octave_set_immutable(const octave_value_list &args, int nargout) {
    error("attempt to set immutable member variable");
    return octave_value_list();
  }

  struct octave_value_ref {
    const octave_value_list &ovl;
    int j;

    octave_value_ref(const octave_value_list &_ovl, int _j)
      :ovl(_ovl), j(_j) { }

    operator  octave_value() const {
      return ovl(j);
    }

    octave_value operator*() const {
      return ovl(j);
    }
  };


namespace Swig {

  SWIGRUNTIME octave_base_value *swig_value_ref(octave_swig_type *ost) {
    return new octave_swig_ref(ost);
  }

  SWIGRUNTIME octave_swig_type *swig_value_deref(octave_value ov) {
    if (ov.is_cell() && ov.rows() == 1 && ov.columns() == 1)
      ov = ov.cell_value()(0);
    return swig_value_deref(*ov.internal_rep());
  }

  SWIGRUNTIME octave_swig_type *swig_value_deref(const octave_base_value &ov) {
    if (ov.type_id() != octave_swig_ref::static_type_id())
      return 0;
    const octave_swig_ref *osr = static_cast < const octave_swig_ref *>(&ov);
    return osr->get_ptr();
  }

}


#define swig_unary_op(name) \
SWIGRUNTIME octave_value swig_unary_op_##name(const octave_base_value &x) { \
  return octave_swig_type::dispatch_unary_op(x,#name); \
}
#define swig_binary_op(name) \
SWIGRUNTIME octave_value swig_binary_op_##name(const octave_base_value&lhs,const octave_base_value &rhs) { \
  return octave_swig_type::dispatch_binary_op(lhs,rhs,#name); \
}
#define swigreg_unary_op(name) \
if (!octave_value_typeinfo::lookup_unary_op(octave_value::op_##name,tid)) \
octave_value_typeinfo::register_unary_op(octave_value::op_##name,tid,swig_unary_op_##name);
#define swigreg_binary_op(name) \
if (!octave_value_typeinfo::lookup_binary_op(octave_value::op_##name,tid1,tid2)) \
octave_value_typeinfo::register_binary_op(octave_value::op_##name,tid1,tid2,swig_binary_op_##name);

  swig_unary_op(not);
  swig_unary_op(uplus);
  swig_unary_op(uminus);
  swig_unary_op(transpose);
  swig_unary_op(hermitian);
  swig_unary_op(incr);
  swig_unary_op(decr);

  swig_binary_op(add);
  swig_binary_op(sub);
  swig_binary_op(mul);
  swig_binary_op(div);
  swig_binary_op(pow);
  swig_binary_op(ldiv);
#if !SWIG_OCTAVE_PREREQ(4,2,0)
  swig_binary_op(lshift);
  swig_binary_op(rshift);
#endif
  swig_binary_op(lt);
  swig_binary_op(le);
  swig_binary_op(eq);
  swig_binary_op(ge);
  swig_binary_op(gt);
  swig_binary_op(ne);
  swig_binary_op(el_mul);
  swig_binary_op(el_div);
  swig_binary_op(el_pow);
  swig_binary_op(el_ldiv);
  swig_binary_op(el_and);
  swig_binary_op(el_or);

  SWIGRUNTIME void SWIG_InstallUnaryOps(int tid) {
    swigreg_unary_op(not);
    swigreg_unary_op(uplus);
    swigreg_unary_op(uminus);
    swigreg_unary_op(transpose);
    swigreg_unary_op(hermitian);
    swigreg_unary_op(incr);
    swigreg_unary_op(decr);
  }
  SWIGRUNTIME void SWIG_InstallBinaryOps(int tid1, int tid2) {
    swigreg_binary_op(add);
    swigreg_binary_op(sub);
    swigreg_binary_op(mul);
    swigreg_binary_op(div);
    swigreg_binary_op(pow);
    swigreg_binary_op(ldiv);
#if !SWIG_OCTAVE_PREREQ(4,2,0)
    swigreg_binary_op(lshift);
    swigreg_binary_op(rshift);
#endif
    swigreg_binary_op(lt);
    swigreg_binary_op(le);
    swigreg_binary_op(eq);
    swigreg_binary_op(ge);
    swigreg_binary_op(gt);
    swigreg_binary_op(ne);
    swigreg_binary_op(el_mul);
    swigreg_binary_op(el_div);
    swigreg_binary_op(el_pow);
    swigreg_binary_op(el_ldiv);
    swigreg_binary_op(el_and);
    swigreg_binary_op(el_or);
  }
  SWIGRUNTIME void SWIG_InstallOps(int tid) {
    // here we assume that tid are conseq integers increasing from zero, and 
    // that our tid is the last one. might be better to have explicit string 
    // list of types we should bind to, and use lookup_type to resolve their tid.

    SWIG_InstallUnaryOps(tid);
    SWIG_InstallBinaryOps(tid, tid);
    for (int j = 0; j < tid; ++j) {
      SWIG_InstallBinaryOps(j, tid);
      SWIG_InstallBinaryOps(tid, j);
    }
  }

SWIGRUNTIME octave_value SWIG_Octave_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  int own = (flags &SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

#ifdef SWIG_DIRECTORS
  Swig::Director *d = Swig::get_rtdir(ptr);
  if (d && Swig::swig_director_get_self(d))
    return Swig::swig_director_get_self(d)->as_value();
#endif
  return Swig::swig_value_ref(new octave_swig_type(ptr, type, own));
}

SWIGRUNTIME int SWIG_Octave_ConvertPtrAndOwn(octave_value ov, void **ptr, swig_type_info *type, int flags, int *own) {
  if (ov.is_cell() && ov.rows() == 1 && ov.columns() == 1)
    ov = ov.cell_value()(0);
  if (!ov.is_defined() ||
      (ov.is_matrix_type() && ov.rows() == 0 && ov.columns() == 0) ) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }
  if (ov.type_id() != octave_swig_ref::static_type_id())
    return SWIG_ERROR;
  octave_swig_ref *osr = static_cast < octave_swig_ref *>(ov.internal_rep());
  octave_swig_type *ost = osr->get_ptr();
  return ost->cast(ptr, type, own, flags);
}

SWIGRUNTIME octave_value SWIG_Octave_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return new octave_swig_packed(type, (char *) ptr, sz);
}

SWIGRUNTIME int SWIG_Octave_ConvertPacked(const octave_value &ov, void *ptr, size_t sz, swig_type_info *type) {
  if (!ov.is_defined())
    return SWIG_ERROR;
  if (ov.type_id() != octave_swig_packed::static_type_id())
    return SWIG_ERROR;
  octave_swig_packed *ost = static_cast < octave_swig_packed *>(ov.internal_rep());
  return ost->copy(type, (char *) ptr, sz) ? SWIG_OK : SWIG_ERROR;
}

SWIGRUNTIMEINLINE void SWIG_Octave_SetConstant(octave_swig_type *module_ns, const std::string &name, const octave_value &ov) {
  module_ns->assign(name, ov);
}

SWIGRUNTIMEINLINE octave_value SWIG_Octave_GetGlobalValue(std::string name) {
  return get_global_value(name, true);
}

SWIGRUNTIME void SWIG_Octave_SetGlobalValue(std::string name, const octave_value& value) {
  set_global_value(name, value);
}

SWIGRUNTIME void SWIG_Octave_LinkGlobalValue(std::string name) {
#if !SWIG_OCTAVE_PREREQ(3,2,0)
  link_to_global_variable(curr_sym_tab->lookup(name, true));
#else
#if !SWIG_OCTAVE_PREREQ(3,8,0)
  symbol_table::varref(name);
#endif
  symbol_table::mark_global(name);
#endif
}

SWIGRUNTIME swig_module_info *SWIG_Octave_GetModule(void *clientdata) {
  octave_value ov = SWIG_Octave_GetGlobalValue("__SWIG_MODULE__" SWIG_TYPE_TABLE_NAME SWIG_RUNTIME_VERSION);
  if (!ov.is_defined() ||
      ov.type_id() != octave_swig_packed::static_type_id())
    return 0;
  const octave_swig_packed* osp = 
    static_cast < const octave_swig_packed *> (ov.internal_rep());
  swig_module_info *pointer = 0;
  osp->copy(0, &pointer, sizeof(swig_module_info *));
  return pointer;
}

SWIGRUNTIME void SWIG_Octave_SetModule(void *clientdata, swig_module_info *pointer) {
  octave_value ov = new octave_swig_packed(0, &pointer, sizeof(swig_module_info *));
  SWIG_Octave_SetGlobalValue("__SWIG_MODULE__" SWIG_TYPE_TABLE_NAME SWIG_RUNTIME_VERSION, ov);
}



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_data_t swig_types[1]
#define SWIGTYPE_p_double swig_types[2]
#define SWIGTYPE_p_federate_state swig_types[3]
#define SWIGTYPE_p_helics_filter_type_t swig_types[4]
#define SWIGTYPE_p_helics_iteration_request swig_types[5]
#define SWIGTYPE_p_helics_iteration_status swig_types[6]
#define SWIGTYPE_p_helics_status swig_types[7]
#define SWIGTYPE_p_int swig_types[8]
#define SWIGTYPE_p_int64_t swig_types[9]
#define SWIGTYPE_p_message_t swig_types[10]
#define SWIGTYPE_p_p_char swig_types[11]
#define SWIGTYPE_p_void swig_types[12]
static swig_type_info *swig_types[14];
static swig_module_info swig_module = {swig_types, 13, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "api-data.h"
#include "helics.h"
#include "ValueFederate.h"
#include "MessageFederate.h"
#include "MessageFilters.h"


  SWIGINTERNINLINE octave_value SWIG_From_long    (long value)
    {    
      return octave_value(value);
    }


SWIGINTERNINLINE octave_value
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


  SWIGINTERNINLINE octave_value SWIG_From_double    (double value)
    {    
      return octave_value(value);
    }


SWIGINTERN int
SWIG_AsCharPtrAndSize(octave_value ov, char** cptr, size_t* psize, int *alloc)
{
  if (ov.is_cell() && ov.rows() == 1 && ov.columns() == 1)
    ov = ov.cell_value()(0);
  if (!ov.is_string())
    return SWIG_TypeError;
  
  std::string str=ov.string_value();
  size_t len=str.size();
  char* cstr=(char*)str.c_str();
  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = cstr;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}





SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE octave_value
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return std::string(carray,carray+size);
}


SWIGINTERNINLINE octave_value 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  SWIGINTERN int SWIG_AsVal_double (const octave_value& ov, double* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (val)
	*val = ov.double_value();
      return SWIG_OK;
    }


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  SWIGINTERN int SWIG_AsVal_long (const octave_value& ov, long* val)
    {
      if (!ov.is_scalar_type())
	return SWIG_TypeError;
      if (ov.is_complex_scalar())
	return SWIG_TypeError;
      if (ov.is_double_type()||ov.is_single_type()) {
	double v=ov.double_value();
	if (v!=floor(v))
	  return SWIG_TypeError;
      }
      if (val)
	*val = ov.long_value();
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_int (octave_value obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
  SWIGINTERNINLINE octave_value SWIG_From_long_SS_long    (long long value)
    {    
      return octave_int64(value);
    }
#endif

static const char* _wrap_helicsCreateBroker_texinfo = "-*- texinfo -*-\n\
create a broker object\n\
\n\
Parameters\n\
----------\n\
* `type` :\n\
    the type of the broker to create\n\
* `name` :\n\
    the name of the broker , may be a nullptr or empty string to have a name\n\
    automatically assigned\n\
* `initString` :\n\
    an initialization string to send to the core-the format is similar to\n\
    command line arguments typical options include a broker address\n\
    --broker=\"XSSAF\" if this is a subbroker or the number of federates or the\n\
    address\n\
\n\
Returns\n\
-------\n\
a helics_core object\n\
";
static const char* _wrap_helicsFederateGetState_texinfo = "-*- texinfo -*-\n\
get the current state of a federate\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the fed to query\n\
* `state` :\n\
    the resulting state if helics_status return helics_ok\n\
";
static const char* _wrap_helicsSubscriptionSetDefaultString_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetString_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsPublicationPublishString_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateInfoSetCoreInitString_texinfo = "-*- texinfo -*-\n\
set the initialization string for the core usually in the form of command line\n\
arguments\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    the federate info object to alter\n\
* `coreInit` :\n\
    a string with the core initialization strings\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration helics_ok on success helicsInvalidReference if fi is\n\
not a valid reference\n\
";
static const char* _wrap_helicsCloseLibrary_texinfo = "-*- texinfo -*-\n\
call when done using the helics library, this function will ensure the threads\n\
are closed properly if possible this should be the last call before exiting,\n\
";
static const char* _wrap_new_message_t_texinfo = "-*- texinfo -*-\n\
Message_t mapped to a c compatible structure\n\
\n\
C++ includes: api-data.h\n\
";
static const char* _wrap_helicsCreateValueFederate_texinfo = "-*- texinfo -*-\n\
create a value federate from a federate info object\n\
\n\
helics_federate objects can be used in all functions that take a helics_federate\n\
or helics_federate object as an argument\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    the federate info object that contains details on the federate\n\
\n\
Returns\n\
-------\n\
an opaque value federate object\n\
";
static const char* _wrap_helicsCreateMessageFederate_texinfo = "-*- texinfo -*-\n\
create a message federate from a federate info object\n\
\n\
helics_message_federate objects can be used in all functions that take a\n\
helics_message_federate or helics_federate object as an argument\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    the federate info object that contains details on the federate\n\
\n\
Returns\n\
-------\n\
an opaque message federate object\n\
";
static const char* _wrap_helicsCreateCombinationFederate_texinfo = "-*- texinfo -*-\n\
create a combination federate from a federate info object\n\
\n\
combination federates are both value federates and message federates, objects\n\
can be used in all functions that take a helics_federate,\n\
helics_message_federate or helics_federate object as an argument\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    the federate info object that contains details on the federate\n\
\n\
Returns\n\
-------\n\
an opaque value federate object nullptr if the object creation failed\n\
";
static const char* _wrap_helicsFederateEnterInitializationMode_texinfo = "-*- texinfo -*-\n\
enter the initialization state of a federate\n\
\n\
the initialization state allows initial values to be set and received if the\n\
iteration is requested on entry to the execution state This is a blocking call\n\
and will block until the core allows it to proceed\n\
";
static const char* _wrap_helicsFederateEnterExecutionMode_texinfo = "-*- texinfo -*-\n\
request that the federate enter the Execution mode\n\
\n\
this call is blocking until granted entry by the core object for an asynchronous\n\
alternative call /ref helicsFederateEnterExecutionModeAsync\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    a federate to change modes\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration helics_error if something went wrong\n\
helicsInvalidReference if fed is invalid\n\
";
static const char* _wrap_helicsFederateRegisterGlobalEndpoint_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterEndpoint_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterAddDeliveryEndpoint_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterRemoveDeliveryEndpoint_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsBrokerGetAddress_texinfo = "-*- texinfo -*-\n\
get the network address associated with a broker\n\
\n\
Parameters\n\
----------\n\
* `broker` :\n\
    the broker to query\n\
* `identifier` :\n\
    storage space to place the identifier string\n\
* `maxlen` :\n\
    the maximum space available in identifier\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration indicating any error condition\n\
";
static const char* _wrap_helicsFederateRegisterGlobalTypePublication_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterGlobalPublication_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterTypePublication_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterPublication_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsCoreRegisterDestinationFilter_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterDestinationFilter_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsEndpointSubscribe_texinfo = "-*- texinfo -*-\n\
subscribe an endpoint to a publication\n\
\n\
Parameters\n\
----------\n\
* `endpoint` :\n\
    the endpoint to use\n\
* `key` :\n\
    the name of the publication\n\
* `type` :\n\
    the type of the publication that is expected (nullptr or \"\" for DON\'T\n\
    CARE)\n\
";
static const char* _wrap_helicsFederateFree_texinfo = "-*- texinfo -*-\n\
release the memory associated withe a federate\n\
";
static const char* _wrap_helicsPublicationGetUnits_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetUnits_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsPublicationPublish_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateEnterExecutionModeIterativeComplete_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateInfoSetFederateName_texinfo = "-*- texinfo -*-\n\
set the federate name in the Federate Info structure\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    the federate info object to alter\n\
* `name` :\n\
    the new identifier for the federate\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration helics_ok on success\n\
";
static const char* _wrap_new_data_t_texinfo = "-*- texinfo -*-\n\
Data to be communicated.\n\
\n\
Core operates on opaque byte buffers.\n\
\n\
C++ includes: api-data.h\n\
";
static const char* _wrap_helicsFederateInfoCreate_texinfo = "-*- texinfo -*-\n\
create a federate info object for specifying federate information when\n\
constructing a federate\n\
\n\
Returns\n\
-------\n\
a helics_federate_info_t object which is a reference to the created object\n\
";
static const char* _wrap_helicsIsCoreTypeAvailable_texinfo = "-*- texinfo -*-\n\
Returns true if core/broker type specified is available in current compilation.\n\
";
static const char* _wrap_helicsCoreDisconnect_texinfo = "-*- texinfo -*-\n\
get an identifier for the core\n\
\n\
Parameters\n\
----------\n\
* `core` :\n\
    the core to query\n\
* `identifier` :\n\
    storage space to place the identifier string\n\
* `maxlen` :\n\
    the maximum space available in identifier\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration indicating any error condition\n\
";
static const char* _wrap_helicsBrokerDisconnect_texinfo = "-*- texinfo -*-\n\
get the network address associated with a broker\n\
\n\
Parameters\n\
----------\n\
* `broker` :\n\
    the broker to query\n\
* `identifier` :\n\
    storage space to place the identifier string\n\
* `maxlen` :\n\
    the maximum space available in identifier\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration indicating any error condition\n\
";
static const char* _wrap_helicsFederateInfoSetCoreTypeFromString_texinfo = "-*- texinfo -*-\n\
set the core type from a string\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    the federate info object to alter\n\
* `coretype` :\n\
    a string naming a core type\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration helics_ok on success helicsInvalidReference if fi is\n\
not a valid reference helics_discard if the string is not recognized\n\
";
static const char* _wrap_helicsFederateSetFlag_texinfo = "-*- texinfo -*-\n\
set a flag for the federate\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate to alter a flag for\n\
* `flag` :\n\
    the flag to change\n\
* `flagValue` :\n\
    the new value of the flag 0 for false !=0 for true\n\
";
static const char* _wrap_helicsFederateInfoSetFlag_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionSetDefault_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateSetPeriod_texinfo = "-*- texinfo -*-\n\
set the period and offset of the federate\n\
\n\
the federate will on grant time on N*period+offset interval\n\
\n\
Parameters\n\
----------\n\
* `period` :\n\
    the length of time between each subsequent grants\n\
* `offset` :\n\
    the shift of the period from 0 offset must be < period\n\
";
static const char* _wrap_helicsFederateInfoSetPeriod_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsEndpointGetType_texinfo = "-*- texinfo -*-\n\
get the type specified for an endpoint\n\
\n\
Parameters\n\
----------\n\
* `endpoint` :\n\
    the endpoint object in question\n\
* `str` :\n\
    the location where the string is stored\n\
* `maxlen` :\n\
    the maximum string length that can be stored in str\n\
\n\
Returns\n\
-------\n\
a status variable\n\
";
static const char* _wrap_helicsPublicationGetType_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetType_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsCoreIsConnected_texinfo = "-*- texinfo -*-\n\
check if a core is connected a connected core implies is attached to federate or\n\
federates could be attached to it return 0 if not connected , something else if\n\
it is connected\n\
";
static const char* _wrap_helicsBrokerIsConnected_texinfo = "-*- texinfo -*-\n\
check if a broker is connected a connected broker implies is attached to cores\n\
or cores could reach out to communicate return 0 if not connected , something\n\
else if it is connected\n\
";
static const char* _wrap_helicsCoreRegisterCloningFilter_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsCoreRegisterSourceFilter_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterCloningFilter_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterSourceFilter_texinfo = "-*- texinfo -*-\n\
create a source Filter on the specified federate\n\
\n\
filters can be created through a federate or a core , linking through a federate\n\
allows a few extra features of name matching to function on the federate\n\
interface but otherwise equivalent behavior\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the fed to register through\n\
* `name` :\n\
    the name of the filter (can be nullptr)\n\
* `inputType` :\n\
    the input type of the filter, used for ordering (can be nullptr)\n\
* `outputType` :\n\
    the output type of the filter, used for ordering (can be nullptr)\n\
\n\
Returns\n\
-------\n\
a helics_source_filter object\n\
";
static const char* _wrap_helicsFederateInfoSetMaxIterations_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsCoreFree_texinfo = "-*- texinfo -*-\n\
release the memory associated with a core\n\
";
static const char* _wrap_helicsSubscriptionSetDefaultInteger_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetInteger_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsPublicationPublishInteger_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsPublicationGetKey_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetKey_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateInfoSetCoreName_texinfo = "-*- texinfo -*-\n\
set the name of the core to link to for a federate\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    the federate info object to alter\n\
* `corename` :\n\
    the identifier for a core to link to\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration helics_ok on success helicsInvalidReference if fi is\n\
not a valid reference\n\
";
static const char* _wrap_helicsFederateSetInputDelay_texinfo = "-*- texinfo -*-\n\
set the impact Window time\n\
\n\
the impact window is the time window around the time request in which other\n\
federates cannot affect the federate\n\
\n\
Parameters\n\
----------\n\
* `lookAhead` :\n\
    the look ahead time\n\
";
static const char* _wrap_helicsFederateSetOutputDelay_texinfo = "-*- texinfo -*-\n\
set the look ahead time\n\
\n\
the look ahead is the propagation time for messages/event to propagate from the\n\
Federate the federate\n\
\n\
Parameters\n\
----------\n\
* `lookAhead` :\n\
    the look ahead time\n\
";
static const char* _wrap_helicsFederateInfoSetOutputDelay_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateInfoSetInputDelay_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateInfoFree_texinfo = "-*- texinfo -*-\n\
delete the memory associated with a federate info object\n\
";
static const char* _wrap_helicsFederateRegisterOptionalTypeSubscription_texinfo = "-*- texinfo -*-\n\
create a subscription of a specific known type that is specifically stated to be\n\
optional\n\
\n\
the subscription becomes part of the federate and is destroyed when the federate\n\
is freed so there are no separate free functions for subscriptions and\n\
publications optional implies that there may or may not be matching publication\n\
elsewhere in the federation\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate object in which to create a subscription\n\
* `key` :\n\
    the identifier matching a publication to get a subscription for\n\
* `type` :\n\
    a known type identifier HELICS_STRING_TYPE, HELICS_INT_TYPE,\n\
    HELICS_DOUBLE_TYPE, HELICS_COMPLEX_TYPE, HELICS_VECTOR_TYPE, HELICS_RAW_TYPE\n\
* `units` :\n\
    a string listing the units of the subscription maybe NULL\n\
\n\
Returns\n\
-------\n\
an object containing the subscription\n\
";
static const char* _wrap_helicsCreateBrokerFromArgs_texinfo = "-*- texinfo -*-\n\
create a core object by passing command line arguments\n\
\n\
Parameters\n\
----------\n\
* `type` :\n\
    the type of the core to create\n\
* `name` :\n\
    the name of the core , may be a nullptr or empty string to have a name\n\
    automatically assigned\n\
* `argc` :\n\
    the number of arguments\n\
* `argv` :\n\
    the string values from a command line\n\
\n\
Returns\n\
-------\n\
a helics_core object\n\
";
static const char* _wrap_helicsCreateCoreFromArgs_texinfo = "-*- texinfo -*-\n\
create a core object by passing command line arguments\n\
\n\
Parameters\n\
----------\n\
* `type` :\n\
    the type of the core to create\n\
* `name` :\n\
    the name of the core , may be a nullptr or empty string to have a name\n\
    automatically assigned\n\
* `argc` :\n\
    the number of arguments\n\
* `argv` :\n\
    the string values from a command line\n\
\n\
Returns\n\
-------\n\
a helics_core object\n\
";
static const char* _wrap_helicsFederateInfoLoadFromArgs_texinfo = "-*- texinfo -*-\n\
load a federate info from command line arguments\n\
\n\
Parameters\n\
----------\n\
* `fi` :\n\
    a federateInfo object\n\
* `argc` :\n\
    the number of command line arguments\n\
* `argv` :\n\
    an array of strings from the command line\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration indicating success or any potential errors\n\
";
static const char* _wrap_helicsFederateGetCoreObject_texinfo = "-*- texinfo -*-\n\
get the core object associated with a federate\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    a federate object\n\
\n\
Returns\n\
-------\n\
a core object, nullptr if invalid\n\
";
static const char* _wrap_helicsFederateEnterExecutionModeIterativeAsync_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRegisterOptionalSubscription_texinfo = "-*- texinfo -*-\n\
create a subscription that is specifically stated to be optional\n\
\n\
the subscription becomes part of the federate and is destroyed when the federate\n\
is freed so there are no separate free functions for subscriptions and\n\
publications\n\
\n\
optional implies that there may or may not be matching publication elsewhere in\n\
the federation\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate object in which to create a subscription\n\
* `key` :\n\
    the identifier matching a publication to get a subscription for\n\
* `type` :\n\
    a string describing the expected type of the publication may be NULL\n\
* `units` :\n\
    a string listing the units of the subscription maybe NULL\n\
\n\
Returns\n\
-------\n\
an object containing the subscription\n\
";
static const char* _wrap_helicsFederateRegisterTypeSubscription_texinfo = "-*- texinfo -*-\n\
create a subscription of a specific known type\n\
\n\
the subscription becomes part of the federate and is destroyed when the federate\n\
is freed so there are no separate free functions for subscriptions and\n\
publications\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate object in which to create a subscription\n\
* `key` :\n\
    the identifier matching a publication to get a subscription for\n\
* `type` :\n\
    a known type identifier HELICS_STRING_TYPE, HELICS_INT_TYPE,\n\
    HELICS_DOUBLE_TYPE, HELICS_COMPLEX_TYPE, HELICS_VECTOR_TYPE, HELICS_RAW_TYPE\n\
* `units` :\n\
    a string listing the units of the subscription maybe NULL\n\
\n\
Returns\n\
-------\n\
an object containing the subscription\n\
";
static const char* _wrap_helicsFederateRegisterSubscription_texinfo = "-*- texinfo -*-\n\
create a subscription\n\
\n\
the subscription becomes part of the federate and is destroyed when the federate\n\
is freed so there are no separate free functions for subscriptions and\n\
publications\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate object in which to create a subscription must have been create\n\
    with helicsCreateValueFederate or helicsCreateCombinationFederate\n\
* `key` :\n\
    the identifier matching a publication to get a subscription for\n\
* `type` :\n\
    a string describing the expected type of the publication may be NULL\n\
* `units` :\n\
    a string listing the units of the subscription maybe NULL\n\
\n\
Returns\n\
-------\n\
an object containing the subscription\n\
";
static const char* _wrap_helicsSubscriptionSetDefaultVector_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetVector_texinfo = "-*- texinfo -*-\n\
get a vector from a subscription\n\
\n\
Parameters\n\
----------\n\
* `sub` :\n\
    the subscription to get the result for\n\
* `data` :\n\
    the location to store the data\n\
* `maxlen` :\n\
    the maximum size of the vector\n\
* `actualSize` :\n\
    pointer to variable to store the actual size\n\
";
static const char* _wrap_helicsPublicationPublishVector_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsQueryExecute_texinfo = "-*- texinfo -*-\n\
Execute a query\n\
\n\
the call will block until the query finishes which may require communication or\n\
other delays\n\
\n\
Parameters\n\
----------\n\
* `query` :\n\
    the query object to use in the query\n\
* `fed` :\n\
    a federate to send the query through\n\
\n\
Returns\n\
-------\n\
a pointer to a string. the string will remain valid until the query is freed or\n\
executed again the return will be nullptr if fed or query is an invalid object\n\
";
static const char* _wrap_helicsFederateFinalize_texinfo = "-*- texinfo -*-\n\
finalize the federate this halts all communication in the federate and\n\
disconnects it from the core\n\
";
static const char* _wrap_helicsQueryExecuteComplete_texinfo = "-*- texinfo -*-\n\
complete the return from a query called with /ref helicsExecuteQueryAsync\n\
\n\
the function will block until the query completes /ref isQueryComplete can be\n\
called to determine if a query has completed or not\n\
\n\
Parameters\n\
----------\n\
* `query` :\n\
    the query object to\n\
\n\
Returns\n\
-------\n\
a pointer to a string. the string will remain valid until the query is freed or\n\
executed again the return will be nullptr if query is an invalid object\n\
";
static const char* _wrap_helicsFederateRequestTimeIterativeComplete_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRequestTimeComplete_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateEnterExecutionModeComplete_texinfo = "-*- texinfo -*-\n\
complete the call to /ref EnterExecutionModeAsync\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate object to complete the call\n\
";
static const char* _wrap_helicsCreateValueFederateFromJson_texinfo = "-*- texinfo -*-\n\
create a value federate from a JSON file or JSON string\n\
\n\
helics_federate objects can be used in all functions that take a helics_federate\n\
or helics_federate object as an argument\n\
\n\
Parameters\n\
----------\n\
* `JSON` :\n\
    a JSON file or a JSON string that contains setup and configuration\n\
    information\n\
\n\
Returns\n\
-------\n\
an opaque value federate object\n\
";
static const char* _wrap_helicsCreateMessageFederateFromJson_texinfo = "-*- texinfo -*-\n\
create a message federate from a JSON file or JSON string\n\
\n\
helics_message_federate objects can be used in all functions that take a\n\
helics_message_federate or helics_federate object as an argument\n\
\n\
Parameters\n\
----------\n\
* `JSON` :\n\
    a JSON file or a JSON string that contains setup and configuration\n\
    information\n\
\n\
Returns\n\
-------\n\
an opaque message federate object\n\
";
static const char* _wrap_helicsCreateCombinationFederateFromJson_texinfo = "-*- texinfo -*-\n\
create a combination federate from a JSON file or JSON string\n\
\n\
combination federates are both value federates and message federates, objects\n\
can be used in all functions that take a helics_federate,\n\
helics_message_federate or helics_federate object as an argument\n\
\n\
Parameters\n\
----------\n\
* `JSON` :\n\
    a JSON file or a JSON string that contains setup and configuration\n\
    information\n\
\n\
Returns\n\
-------\n\
an opaque combination federate object\n\
";
static const char* _wrap_helicsFederateSetLoggingLevel_texinfo = "-*- texinfo -*-\n\
set the logging level for the federate @ details debug and trace only do\n\
anything if they were enabled in the compilation\n\
\n\
Parameters\n\
----------\n\
* `loggingLevel` :\n\
    (-1: none, 0: error_only, 1: warnings, 2: normal, 3: debug, 4: trace)\n\
";
static const char* _wrap_helicsFederateInfoSetLoggingLevel_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsEndpointSendMessageRaw_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterGetTarget_texinfo = "-*- texinfo -*-\n\
get the target of the filter\n\
";
static const char* _wrap_helicsFilterAddDestinationTarget_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterRemoveDestinationTarget_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateInfoSetTimeOffset_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRequestTimeIterative_texinfo = "-*- texinfo -*-\n\
request an iterative time\n\
\n\
this call allows for finer grain control of the iterative process then /ref\n\
helicsFederateRequestTime it takes a time and and iteration request and return a\n\
time and iteration status\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate to make the request of\n\
* `requestTime` :\n\
    the next desired time\n\
* `iterate` :\n\
    the requested iteration mode\n\
* `timeOut` :\n\
    the granted time\n\
* `outIterate` :\n\
    the iteration specification of the result\n\
\n\
Returns\n\
-------\n\
a helics_status object with a return code of the result\n\
";
static const char* _wrap_helicsFederateEnterExecutionModeIterative_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionLastUpdateTime_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateEnterInitializationModeComplete_texinfo = "-*- texinfo -*-\n\
finalize the entry to initialize mode that was initiated with\n\
";
static const char* _wrap_helicsEndpointSetDefaultDestination_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionSetDefaultComplex_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetComplex_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsPublicationPublishComplex_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsEndpointSendEventRaw_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionSetDefaultDouble_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetDouble_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsPublicationPublishDouble_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetValueSize_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateGetMessage_texinfo = "-*- texinfo -*-\n\
receive a communication message for any endpoint in the federate\n\
\n\
the return order will be in order of endpoint creation then order of arrival all\n\
messages for the first endpoint, then all for the second, and so on\n\
\n\
Returns\n\
-------\n\
a unique_ptr to a Message object containing the message data\n\
";
static const char* _wrap_helicsEndpointGetMessage_texinfo = "-*- texinfo -*-\n\
receive a packet from a particular endpoint\n\
\n\
Parameters\n\
----------\n\
* `endpoint` :\n\
    the identifier for the endpoint\n\
\n\
Returns\n\
-------\n\
a message object\n\
";
static const char* _wrap_helicsEndpointHasMessage_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateHasMessage_texinfo = "-*- texinfo -*-\n\
check if the federate has any outstanding messages\n\
";
static const char* _wrap_helicsEndpointSendMessage_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsSubscriptionGetValue_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterAddSourceTarget_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterRemoveSourceTarget_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterGetName_texinfo = "-*- texinfo -*-\n\
get the name of the filter\n\
";
static const char* _wrap_helicsEndpointGetName_texinfo = "-*- texinfo -*-\n\
get the name of an endpoint\n\
\n\
Parameters\n\
----------\n\
* `endpoint` :\n\
    the endpoint object in question\n\
* `str` :\n\
    the location where the string is stored\n\
* `maxlen` :\n\
    the maximum string length that can be stored in str\n\
\n\
Returns\n\
-------\n\
a status variable\n\
";
static const char* _wrap_helicsFederateGetName_texinfo = "-*- texinfo -*-\n\
get the name of the federate\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate object to query\n\
* `str` :\n\
    memory buffer to store the result\n\
* `maxlen` :\n\
    the maximum size of the buffer\n\
\n\
Returns\n\
-------\n\
helics_status object indicating success or error\n\
";
static const char* _wrap_helicsEndpointReceiveCount_texinfo = "-*- texinfo -*-\n\
Returns the number of pending receives for all endpoints of particular federate.\n\
";
static const char* _wrap_helicsFederateReceiveCount_texinfo = "-*- texinfo -*-\n\
Returns the number of pending receives for the specified destination endpoint.\n\
";
static const char* _wrap_helicsBrokerFree_texinfo = "-*- texinfo -*-\n\
release the memory associated with a broker\n\
";
static const char* _wrap_helicsCoreGetIdentifier_texinfo = "-*- texinfo -*-\n\
get an identifier for the core\n\
\n\
Parameters\n\
----------\n\
* `core` :\n\
    the core to query\n\
* `identifier` :\n\
    storage space to place the identifier string\n\
* `maxlen` :\n\
    the maximum space available in identifier\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration indicating any error condition\n\
";
static const char* _wrap_helicsBrokerGetIdentifier_texinfo = "-*- texinfo -*-\n\
get an identifier for the broker\n\
\n\
Parameters\n\
----------\n\
* `broker` :\n\
    the broker to query\n\
* `identifier` :\n\
    storage space to place the identifier string\n\
* `maxlen` :\n\
    the maximum space available in identifier\n\
\n\
Returns\n\
-------\n\
a helics_status enumeration indicating any error condition\n\
";
static const char* _wrap_helicsGetVersion_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRequestTimeAsync_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsCreateCore_texinfo = "-*- texinfo -*-\n\
create a core object\n\
\n\
Parameters\n\
----------\n\
* `type` :\n\
    the type of the core to create\n\
* `name` :\n\
    the name of the core , may be a nullptr or empty string to have a name\n\
    automatically assigned\n\
* `initString` :\n\
    an initialization string to send to the core-the format is similar to\n\
    command line arguments typical options include a broker address\n\
    --broker=\"XSSAF\" or the number of federates or the address\n\
\n\
Returns\n\
-------\n\
a helics_core object\n\
";
static const char* _wrap_helicsFederateSetTimeDelta_texinfo = "-*- texinfo -*-\n\
set the minimum time delta for the federate\n\
\n\
Parameters\n\
----------\n\
* `tdelta` :\n\
    the minimum time delta to return from a time request function\n\
";
static const char* _wrap_helicsFederateInfoSetTimeDelta_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateGetCurrentTime_texinfo = "-*- texinfo -*-\n\
get the current time of the federate\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate object to query\n\
* `time` :\n\
    storage location for the time variable\n\
\n\
Returns\n\
-------\n\
helics_status object indicating success or error\n\
";
static const char* _wrap_helicsQueryIsCompleted_texinfo = "-*- texinfo -*-\n\
check if an asynchronously executed query has completed\n\
\n\
Returns\n\
-------\n\
will return helics_true if an async query has complete or a regular query call\n\
was made with a result and false if an async query has not completed or is\n\
invalid\n\
";
static const char* _wrap_helicsFederateIsAsyncOperationCompleted_texinfo = "-*- texinfo -*-\n\
check if the current Asynchronous operation has completed\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate to operate on\n\
\n\
Returns\n\
-------\n\
0 if not completed, 1 if completed\n\
";
static const char* _wrap_helicsFederateInfoSetCoreType_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsQueryExecuteAsync_texinfo = "-*- texinfo -*-\n\
Execute a query in a non-blocking call\n\
\n\
Parameters\n\
----------\n\
* `query` :\n\
    the query object to use in the query\n\
* `fed` :\n\
    a federate to send the query through\n\
\n\
Returns\n\
-------\n\
a helics status enumeration with the result of the query specification\n\
";
static const char* _wrap_helicsFederateRequestTimeIterativeAsync_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateEnterInitializationModeAsync_texinfo = "-*- texinfo -*-\n\
non blocking alternative to  the function\n\
helicsFederateEnterInitializationModeFinalize must be called to finish the\n\
operation\n\
";
static const char* _wrap_helicsFederateEnterExecutionModeAsync_texinfo = "-*- texinfo -*-\n\
request that the federate enter the Execution mode\n\
\n\
this call is non-blocking and will return immediately call /ref\n\
helicsFederateEnterExecutionModeComplete to finish the call sequence /ref\n\
";
static const char* _wrap_helicsSubscriptionIsUpdated_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFederateRequestTime_texinfo = "-*- texinfo -*-\n\
request the next time for federate execution\n\
\n\
Parameters\n\
----------\n\
* `fed` :\n\
    the federate to make the request of\n\
* `requestTime` :\n\
    the next requested time\n\
* `timeOut` :\n\
    the time granted to the federate\n\
\n\
Returns\n\
-------\n\
a helics_status if the return value is equal to helics_ok the timeOut will\n\
contain the new granted time, otherwise timeOut is invalid\n\
";
static const char* _wrap_helicsCreateQuery_texinfo = "-*- texinfo -*-\n\
create a query object\n\
\n\
a query object consists of a target and query string\n\
";
static const char* _wrap_helicsQueryFree_texinfo = "-*- texinfo -*-\n\
free the memory associated with a query object\n\
";
static const char* _wrap_helicsSubscriptionGetVectorSize_texinfo = "-*- texinfo -*-\n\
";
static const char* _wrap_helicsFilterSet_texinfo = "-*- texinfo -*-\n\
";

SWIG_DEFUN( helics_time_zero_set, _wrap_helics_time_zero_set, std::string() ) {
  if (!SWIG_check_num_args("helics_time_zero_set",args.length(),1,1,0)) return octave_value_list();
  
  return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( helics_time_zero_get, _wrap_helics_time_zero_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_double(static_cast< double >(helics_time_zero));
  return obj;
}


SWIG_DEFUN( helics_time_epsilon_set, _wrap_helics_time_epsilon_set, std::string() ) {
  if (!SWIG_check_num_args("helics_time_epsilon_set",args.length(),1,1,0)) return octave_value_list();
  
  return octave_set_immutable(args,nargout);
}


SWIG_DEFUN( helics_time_epsilon_get, _wrap_helics_time_epsilon_get, std::string() ) {
  octave_value obj;
  
  obj = SWIG_From_double(static_cast< double >(helics_time_epsilon));
  return obj;
}


SWIG_DEFUN( data_t_data_set, _wrap_data_t_data_set, std::string() ) {
  data_t *arg1 = (data_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("data_t_data_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_data_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "data_t_data_set" "', argument " "1"" of type '" "data_t *""'"); 
  }
  arg1 = reinterpret_cast< data_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "data_t_data_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg1->data) delete[] arg1->data;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->data = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->data = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( data_t_data_get, _wrap_data_t_data_get, std::string() ) {
  data_t *arg1 = (data_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("data_t_data_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_data_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "data_t_data_get" "', argument " "1"" of type '" "data_t *""'"); 
  }
  arg1 = reinterpret_cast< data_t * >(argp1);
  result = (char *) ((arg1)->data);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( data_t_length_set, _wrap_data_t_length_set, std::string() ) {
  data_t *arg1 = (data_t *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("data_t_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_data_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "data_t_length_set" "', argument " "1"" of type '" "data_t *""'"); 
  }
  arg1 = reinterpret_cast< data_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "data_t_length_set" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "data_t_length_set" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *(reinterpret_cast< int64_t * >(argp2));
    }
  }
  if (arg1) (arg1)->length = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( data_t_length_get, _wrap_data_t_length_get, std::string() ) {
  data_t *arg1 = (data_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int64_t result;
  
  if (!SWIG_check_num_args("data_t_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_data_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "data_t_length_get" "', argument " "1"" of type '" "data_t *""'"); 
  }
  arg1 = reinterpret_cast< data_t * >(argp1);
  result =  ((arg1)->length);
  _outv = SWIG_NewPointerObj((new int64_t(static_cast< const int64_t& >(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_data_t, _wrap_new_data_t, _wrap_new_data_t_texinfo ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  data_t *result = 0 ;
  
  if (!SWIG_check_num_args("new_data_t",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (data_t *)new data_t();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_data_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_data_t, _wrap_delete_data_t, std::string() ) {
  data_t *arg1 = (data_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_data_t",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_data_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_data_t" "', argument " "1"" of type '" "data_t *""'"); 
  }
  arg1 = reinterpret_cast< data_t * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_data_t_members[] = {
{"data",0,_wrap_data_t_data_get,_wrap_data_t_data_set,0,0},
{"length",0,_wrap_data_t_length_get,_wrap_data_t_length_set,0,0},
{0,0,0,0,0,0}
};
static const char *swig_data_t_base_names[] = {0};
static const swig_type_info *swig_data_t_base[] = {0};
static swig_octave_class _wrap_class_data_t = {"data_t", &SWIGTYPE_p_data_t,0,_wrap_new_data_t,0,_wrap_delete_data_t,swig_data_t_members,swig_data_t_base_names,swig_data_t_base };

SWIG_DEFUN( message_t_time_set, _wrap_message_t_time_set, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  helics_time_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("message_t_time_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_time_set" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "message_t_time_set" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  if (arg1) (arg1)->time = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_time_get, _wrap_message_t_time_get, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_time_t result;
  
  if (!SWIG_check_num_args("message_t_time_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_time_get" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  result = (helics_time_t) ((arg1)->time);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_data_set, _wrap_message_t_data_set, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("message_t_data_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_data_set" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "message_t_data_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->data = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->data = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( message_t_data_get, _wrap_message_t_data_get, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("message_t_data_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_data_get" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  result = (char *) ((arg1)->data);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_length_set, _wrap_message_t_length_set, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("message_t_length_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_length_set" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "message_t_length_set" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "message_t_length_set" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *(reinterpret_cast< int64_t * >(argp2));
    }
  }
  if (arg1) (arg1)->length = arg2;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_length_get, _wrap_message_t_length_get, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int64_t result;
  
  if (!SWIG_check_num_args("message_t_length_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_length_get" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  result =  ((arg1)->length);
  _outv = SWIG_NewPointerObj((new int64_t(static_cast< const int64_t& >(result))), SWIGTYPE_p_int64_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_original_source_set, _wrap_message_t_original_source_set, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("message_t_original_source_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_original_source_set" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "message_t_original_source_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->original_source = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->original_source = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( message_t_original_source_get, _wrap_message_t_original_source_get, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("message_t_original_source_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_original_source_get" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  result = (char *) ((arg1)->original_source);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_source_set, _wrap_message_t_source_set, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("message_t_source_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_source_set" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "message_t_source_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->source = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->source = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( message_t_source_get, _wrap_message_t_source_get, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("message_t_source_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_source_get" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  result = (char *) ((arg1)->source);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_dest_set, _wrap_message_t_dest_set, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("message_t_dest_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_dest_set" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "message_t_dest_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->dest = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->dest = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( message_t_dest_get, _wrap_message_t_dest_get, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("message_t_dest_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_dest_get" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  result = (char *) ((arg1)->dest);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( message_t_original_dest_set, _wrap_message_t_original_dest_set, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("message_t_original_dest_set",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_original_dest_set" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "message_t_original_dest_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(reinterpret_cast< const char * >(arg2))) + 1;
    arg1->original_dest = (char const *)reinterpret_cast< char* >(memcpy(new char[size], arg2, sizeof(char)*(size)));
  } else {
    arg1->original_dest = 0;
  }
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( message_t_original_dest_get, _wrap_message_t_original_dest_get, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("message_t_original_dest_get",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "message_t_original_dest_get" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  result = (char *) ((arg1)->original_dest);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( new_message_t, _wrap_new_message_t, _wrap_new_message_t_texinfo ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  message_t *result = 0 ;
  
  if (!SWIG_check_num_args("new_message_t",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (message_t *)new message_t();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_message_t, 1 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( delete_message_t, _wrap_delete_message_t, std::string() ) {
  message_t *arg1 = (message_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("delete_message_t",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0), &argp1,SWIGTYPE_p_message_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_message_t" "', argument " "1"" of type '" "message_t *""'"); 
  }
  arg1 = reinterpret_cast< message_t * >(argp1);
  delete arg1;
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


static swig_octave_member swig_message_t_members[] = {
{"time",0,_wrap_message_t_time_get,_wrap_message_t_time_set,0,0},
{"data",0,_wrap_message_t_data_get,_wrap_message_t_data_set,0,0},
{"length",0,_wrap_message_t_length_get,_wrap_message_t_length_set,0,0},
{"original_source",0,_wrap_message_t_original_source_get,_wrap_message_t_original_source_set,0,0},
{"source",0,_wrap_message_t_source_get,_wrap_message_t_source_set,0,0},
{"dest",0,_wrap_message_t_dest_get,_wrap_message_t_dest_set,0,0},
{"original_dest",0,_wrap_message_t_original_dest_get,_wrap_message_t_original_dest_set,0,0},
{0,0,0,0,0,0}
};
static const char *swig_message_t_base_names[] = {0};
static const swig_type_info *swig_message_t_base[] = {0};
static swig_octave_class _wrap_class_message_t = {"message_t", &SWIGTYPE_p_message_t,0,_wrap_new_message_t,0,_wrap_delete_message_t,swig_message_t_members,swig_message_t_base_names,swig_message_t_base };

SWIG_DEFUN( helicsGetVersion, _wrap_helicsGetVersion, _wrap_helicsGetVersion_texinfo ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsGetVersion",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (char *)helicsGetVersion();
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsIsCoreTypeAvailable, _wrap_helicsIsCoreTypeAvailable, _wrap_helicsIsCoreTypeAvailable_texinfo ) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_bool_t result;
  
  if (!SWIG_check_num_args("helicsIsCoreTypeAvailable",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsIsCoreTypeAvailable" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (helics_bool_t)helicsIsCoreTypeAvailable((char const *)arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateCore, _wrap_helicsCreateCore, _wrap_helicsCreateCore_texinfo ) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_core result;
  
  if (!SWIG_check_num_args("helicsCreateCore",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCore" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateCore" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCreateCore" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (helics_core)helicsCreateCore((char const *)arg1,(char const *)arg2,(char const *)arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateCoreFromArgs, _wrap_helicsCreateCoreFromArgs, _wrap_helicsCreateCoreFromArgs_texinfo ) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_core result;
  
  if (!SWIG_check_num_args("helicsCreateCoreFromArgs",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCoreFromArgs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateCoreFromArgs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsCreateCoreFromArgs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(args(3), &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsCreateCoreFromArgs" "', argument " "4"" of type '" "char const *const *""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  result = (helics_core)helicsCreateCoreFromArgs((char const *)arg1,(char const *)arg2,arg3,(char const *const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateBroker, _wrap_helicsCreateBroker, _wrap_helicsCreateBroker_texinfo ) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_broker result;
  
  if (!SWIG_check_num_args("helicsCreateBroker",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateBroker" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateBroker" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCreateBroker" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (helics_broker)helicsCreateBroker((char const *)arg1,(char const *)arg2,(char const *)arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateBrokerFromArgs, _wrap_helicsCreateBrokerFromArgs, _wrap_helicsCreateBrokerFromArgs_texinfo ) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_broker result;
  
  if (!SWIG_check_num_args("helicsCreateBrokerFromArgs",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateBrokerFromArgs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateBrokerFromArgs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsCreateBrokerFromArgs" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(args(3), &argp4,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsCreateBrokerFromArgs" "', argument " "4"" of type '" "char const *const *""'"); 
  }
  arg4 = reinterpret_cast< char ** >(argp4);
  result = (helics_broker)helicsCreateBrokerFromArgs((char const *)arg1,(char const *)arg2,arg3,(char const *const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsBrokerIsConnected, _wrap_helicsBrokerIsConnected, _wrap_helicsBrokerIsConnected_texinfo ) {
  helics_broker arg1 = (helics_broker) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsBrokerIsConnected",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerIsConnected" "', argument " "1"" of type '" "helics_broker""'"); 
  }
  result = (int)helicsBrokerIsConnected(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreIsConnected, _wrap_helicsCoreIsConnected, _wrap_helicsCoreIsConnected_texinfo ) {
  helics_core arg1 = (helics_core) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsCoreIsConnected",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreIsConnected" "', argument " "1"" of type '" "helics_core""'"); 
  }
  result = (int)helicsCoreIsConnected(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsBrokerGetIdentifier, _wrap_helicsBrokerGetIdentifier, _wrap_helicsBrokerGetIdentifier_texinfo ) {
  helics_broker arg1 = (helics_broker) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsBrokerGetIdentifier",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerGetIdentifier" "', argument " "1"" of type '" "helics_broker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerGetIdentifier" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsBrokerGetIdentifier" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsBrokerGetIdentifier(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreGetIdentifier, _wrap_helicsCoreGetIdentifier, _wrap_helicsCoreGetIdentifier_texinfo ) {
  helics_core arg1 = (helics_core) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsCoreGetIdentifier",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreGetIdentifier" "', argument " "1"" of type '" "helics_core""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreGetIdentifier" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsCoreGetIdentifier" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsCoreGetIdentifier(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsBrokerGetAddress, _wrap_helicsBrokerGetAddress, _wrap_helicsBrokerGetAddress_texinfo ) {
  helics_broker arg1 = (helics_broker) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsBrokerGetAddress",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerGetAddress" "', argument " "1"" of type '" "helics_broker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerGetAddress" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsBrokerGetAddress" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsBrokerGetAddress(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreSetReadyToInit, _wrap_helicsCoreSetReadyToInit, std::string() ) {
  helics_core arg1 = (helics_core) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsCoreSetReadyToInit",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreSetReadyToInit" "', argument " "1"" of type '" "helics_core""'"); 
  }
  result = (helics_status)helicsCoreSetReadyToInit(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreDisconnect, _wrap_helicsCoreDisconnect, _wrap_helicsCoreDisconnect_texinfo ) {
  helics_core arg1 = (helics_core) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsCoreDisconnect",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreDisconnect" "', argument " "1"" of type '" "helics_core""'"); 
  }
  result = (helics_status)helicsCoreDisconnect(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsBrokerDisconnect, _wrap_helicsBrokerDisconnect, _wrap_helicsBrokerDisconnect_texinfo ) {
  helics_broker arg1 = (helics_broker) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsBrokerDisconnect",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerDisconnect" "', argument " "1"" of type '" "helics_broker""'"); 
  }
  result = (helics_status)helicsBrokerDisconnect(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreFree, _wrap_helicsCoreFree, _wrap_helicsCoreFree_texinfo ) {
  helics_core arg1 = (helics_core) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("helicsCoreFree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreFree" "', argument " "1"" of type '" "helics_core""'"); 
  }
  helicsCoreFree(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsBrokerFree, _wrap_helicsBrokerFree, _wrap_helicsBrokerFree_texinfo ) {
  helics_broker arg1 = (helics_broker) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("helicsBrokerFree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerFree" "', argument " "1"" of type '" "helics_broker""'"); 
  }
  helicsBrokerFree(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateValueFederate, _wrap_helicsCreateValueFederate, _wrap_helicsCreateValueFederate_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) (helics_federate_info_t)0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_federate result;
  
  if (!SWIG_check_num_args("helicsCreateValueFederate",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateValueFederate" "', argument " "1"" of type '" "helics_federate_info_t const""'"); 
  }
  result = (helics_federate)helicsCreateValueFederate(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateValueFederateFromJson, _wrap_helicsCreateValueFederateFromJson, _wrap_helicsCreateValueFederateFromJson_texinfo ) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_federate result;
  
  if (!SWIG_check_num_args("helicsCreateValueFederateFromJson",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateValueFederateFromJson" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (helics_federate)helicsCreateValueFederateFromJson((char const *)arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateMessageFederate, _wrap_helicsCreateMessageFederate, _wrap_helicsCreateMessageFederate_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) (helics_federate_info_t)0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_federate result;
  
  if (!SWIG_check_num_args("helicsCreateMessageFederate",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateMessageFederate" "', argument " "1"" of type '" "helics_federate_info_t const""'"); 
  }
  result = (helics_federate)helicsCreateMessageFederate(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateMessageFederateFromJson, _wrap_helicsCreateMessageFederateFromJson, _wrap_helicsCreateMessageFederateFromJson_texinfo ) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_federate result;
  
  if (!SWIG_check_num_args("helicsCreateMessageFederateFromJson",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateMessageFederateFromJson" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (helics_federate)helicsCreateMessageFederateFromJson((char const *)arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateCombinationFederate, _wrap_helicsCreateCombinationFederate, _wrap_helicsCreateCombinationFederate_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) (helics_federate_info_t)0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_federate result;
  
  if (!SWIG_check_num_args("helicsCreateCombinationFederate",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCombinationFederate" "', argument " "1"" of type '" "helics_federate_info_t const""'"); 
  }
  result = (helics_federate)helicsCreateCombinationFederate(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateCombinationFederateFromJson, _wrap_helicsCreateCombinationFederateFromJson, _wrap_helicsCreateCombinationFederateFromJson_texinfo ) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_federate result;
  
  if (!SWIG_check_num_args("helicsCreateCombinationFederateFromJson",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCombinationFederateFromJson" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (helics_federate)helicsCreateCombinationFederateFromJson((char const *)arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoCreate, _wrap_helicsFederateInfoCreate, _wrap_helicsFederateInfoCreate_texinfo ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_federate_info_t result;
  
  if (!SWIG_check_num_args("helicsFederateInfoCreate",args.length(),0,0,0)) {
    SWIG_fail;
  }
  result = (helics_federate_info_t)helicsFederateInfoCreate();
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoLoadFromArgs, _wrap_helicsFederateInfoLoadFromArgs, _wrap_helicsFederateInfoLoadFromArgs_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoLoadFromArgs",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoLoadFromArgs" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoLoadFromArgs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(args(2), &argp3,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateInfoLoadFromArgs" "', argument " "3"" of type '" "char const *const *""'"); 
  }
  arg3 = reinterpret_cast< char ** >(argp3);
  result = (helics_status)helicsFederateInfoLoadFromArgs(arg1,arg2,(char const *const *)arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoFree, _wrap_helicsFederateInfoFree, _wrap_helicsFederateInfoFree_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("helicsFederateInfoFree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoFree" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  helicsFederateInfoFree(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetFederateName, _wrap_helicsFederateInfoSetFederateName, _wrap_helicsFederateInfoSetFederateName_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetFederateName",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetFederateName" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetFederateName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFederateInfoSetFederateName(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetCoreName, _wrap_helicsFederateInfoSetCoreName, _wrap_helicsFederateInfoSetCoreName_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreName",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreName" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetCoreName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFederateInfoSetCoreName(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetCoreInitString, _wrap_helicsFederateInfoSetCoreInitString, _wrap_helicsFederateInfoSetCoreInitString_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreInitString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreInitString" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetCoreInitString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFederateInfoSetCoreInitString(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetCoreTypeFromString, _wrap_helicsFederateInfoSetCoreTypeFromString, _wrap_helicsFederateInfoSetCoreTypeFromString_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreTypeFromString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreTypeFromString" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetCoreTypeFromString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFederateInfoSetCoreTypeFromString(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetCoreType, _wrap_helicsFederateInfoSetCoreType, _wrap_helicsFederateInfoSetCoreType_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreType",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreType" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetCoreType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (helics_status)helicsFederateInfoSetCoreType(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetFlag, _wrap_helicsFederateInfoSetFlag, _wrap_helicsFederateInfoSetFlag_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  int arg2 ;
  helics_bool_t arg3 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetFlag",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetFlag" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetFlag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateInfoSetFlag" "', argument " "3"" of type '" "helics_bool_t""'");
  } 
  arg3 = static_cast< helics_bool_t >(val3);
  result = (helics_status)helicsFederateInfoSetFlag(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetOutputDelay, _wrap_helicsFederateInfoSetOutputDelay, _wrap_helicsFederateInfoSetOutputDelay_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetOutputDelay",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetOutputDelay" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetOutputDelay" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateInfoSetOutputDelay(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetTimeDelta, _wrap_helicsFederateInfoSetTimeDelta, _wrap_helicsFederateInfoSetTimeDelta_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetTimeDelta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetTimeDelta" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetTimeDelta" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateInfoSetTimeDelta(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetInputDelay, _wrap_helicsFederateInfoSetInputDelay, _wrap_helicsFederateInfoSetInputDelay_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetInputDelay",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetInputDelay" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetInputDelay" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateInfoSetInputDelay(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetTimeOffset, _wrap_helicsFederateInfoSetTimeOffset, _wrap_helicsFederateInfoSetTimeOffset_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetTimeOffset",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetTimeOffset" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetTimeOffset" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateInfoSetTimeOffset(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetPeriod, _wrap_helicsFederateInfoSetPeriod, _wrap_helicsFederateInfoSetPeriod_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetPeriod",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetPeriod" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetPeriod" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateInfoSetPeriod(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetMaxIterations, _wrap_helicsFederateInfoSetMaxIterations, _wrap_helicsFederateInfoSetMaxIterations_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetMaxIterations",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetMaxIterations" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetMaxIterations" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (helics_status)helicsFederateInfoSetMaxIterations(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateInfoSetLoggingLevel, _wrap_helicsFederateInfoSetLoggingLevel, _wrap_helicsFederateInfoSetLoggingLevel_texinfo ) {
  helics_federate_info_t arg1 = (helics_federate_info_t) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateInfoSetLoggingLevel",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetLoggingLevel" "', argument " "1"" of type '" "helics_federate_info_t""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetLoggingLevel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (helics_status)helicsFederateInfoSetLoggingLevel(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateFinalize, _wrap_helicsFederateFinalize, _wrap_helicsFederateFinalize_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateFinalize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateFinalize" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateFinalize(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateFree, _wrap_helicsFederateFree, _wrap_helicsFederateFree_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("helicsFederateFree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateFree" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  helicsFederateFree(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCloseLibrary, _wrap_helicsCloseLibrary, _wrap_helicsCloseLibrary_texinfo ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("helicsCloseLibrary",args.length(),0,0,0)) {
    SWIG_fail;
  }
  helicsCloseLibrary();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterInitializationMode, _wrap_helicsFederateEnterInitializationMode, _wrap_helicsFederateEnterInitializationMode_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateEnterInitializationMode",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterInitializationMode" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateEnterInitializationMode(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterInitializationModeAsync, _wrap_helicsFederateEnterInitializationModeAsync, _wrap_helicsFederateEnterInitializationModeAsync_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateEnterInitializationModeAsync",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterInitializationModeAsync" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateEnterInitializationModeAsync(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateIsAsyncOperationCompleted, _wrap_helicsFederateIsAsyncOperationCompleted, _wrap_helicsFederateIsAsyncOperationCompleted_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_bool_t result;
  
  if (!SWIG_check_num_args("helicsFederateIsAsyncOperationCompleted",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateIsAsyncOperationCompleted" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_bool_t)helicsFederateIsAsyncOperationCompleted(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterInitializationModeComplete, _wrap_helicsFederateEnterInitializationModeComplete, _wrap_helicsFederateEnterInitializationModeComplete_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateEnterInitializationModeComplete",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterInitializationModeComplete" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateEnterInitializationModeComplete(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterExecutionMode, _wrap_helicsFederateEnterExecutionMode, _wrap_helicsFederateEnterExecutionMode_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateEnterExecutionMode",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutionMode" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateEnterExecutionMode(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterExecutionModeAsync, _wrap_helicsFederateEnterExecutionModeAsync, _wrap_helicsFederateEnterExecutionModeAsync_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateEnterExecutionModeAsync",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutionModeAsync" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateEnterExecutionModeAsync(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterExecutionModeComplete, _wrap_helicsFederateEnterExecutionModeComplete, _wrap_helicsFederateEnterExecutionModeComplete_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateEnterExecutionModeComplete",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutionModeComplete" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateEnterExecutionModeComplete(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterExecutionModeIterative, _wrap_helicsFederateEnterExecutionModeIterative, _wrap_helicsFederateEnterExecutionModeIterative_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_iteration_request arg2 ;
  helics_iteration_status *arg3 = (helics_iteration_status *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  helics_iteration_status temp3 ;
  int res3 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg3 = &temp3;
  if (!SWIG_check_num_args("helicsFederateEnterExecutionModeIterative",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutionModeIterative" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateEnterExecutionModeIterative" "', argument " "2"" of type '" "helics_iteration_request""'");
  } 
  arg2 = static_cast< helics_iteration_request >(val2);
  result = (helics_status)helicsFederateEnterExecutionModeIterative(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res3)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_helics_iteration_status, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterExecutionModeIterativeAsync, _wrap_helicsFederateEnterExecutionModeIterativeAsync, _wrap_helicsFederateEnterExecutionModeIterativeAsync_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_iteration_request arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateEnterExecutionModeIterativeAsync",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutionModeIterativeAsync" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateEnterExecutionModeIterativeAsync" "', argument " "2"" of type '" "helics_iteration_request""'");
  } 
  arg2 = static_cast< helics_iteration_request >(val2);
  result = (helics_status)helicsFederateEnterExecutionModeIterativeAsync(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateEnterExecutionModeIterativeComplete, _wrap_helicsFederateEnterExecutionModeIterativeComplete, _wrap_helicsFederateEnterExecutionModeIterativeComplete_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_iteration_status *arg2 = (helics_iteration_status *) 0 ;
  int res1 ;
  helics_iteration_status temp2 ;
  int res2 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  if (!SWIG_check_num_args("helicsFederateEnterExecutionModeIterativeComplete",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutionModeIterativeComplete" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateEnterExecutionModeIterativeComplete(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_helics_iteration_status, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetState, _wrap_helicsFederateGetState, _wrap_helicsFederateGetState_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  federate_state *arg2 = (federate_state *) 0 ;
  int res1 ;
  federate_state temp2 ;
  int res2 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  if (!SWIG_check_num_args("helicsFederateGetState",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetState" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateGetState(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_federate_state, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetCoreObject, _wrap_helicsFederateGetCoreObject, _wrap_helicsFederateGetCoreObject_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_core result;
  
  if (!SWIG_check_num_args("helicsFederateGetCoreObject",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetCoreObject" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_core)helicsFederateGetCoreObject(arg1);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRequestTime, _wrap_helicsFederateRequestTime, _wrap_helicsFederateRequestTime_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  helics_time_t *arg3 = (helics_time_t *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  helics_time_t temp3 ;
  int res3 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg3 = &temp3;
  if (!SWIG_check_num_args("helicsFederateRequestTime",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTime" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTime" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateRequestTime(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res3)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRequestTimeIterative, _wrap_helicsFederateRequestTimeIterative, _wrap_helicsFederateRequestTimeIterative_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  helics_iteration_request arg3 ;
  helics_time_t *arg4 = (helics_time_t *) 0 ;
  helics_iteration_status *arg5 = (helics_iteration_status *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  helics_time_t temp4 ;
  int res4 = SWIG_TMPOBJ ;
  helics_iteration_status temp5 ;
  int res5 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg4 = &temp4;
  arg5 = &temp5;
  if (!SWIG_check_num_args("helicsFederateRequestTimeIterative",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeIterative" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTimeIterative" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRequestTimeIterative" "', argument " "3"" of type '" "helics_iteration_request""'");
  } 
  arg3 = static_cast< helics_iteration_request >(val3);
  result = (helics_status)helicsFederateRequestTimeIterative(arg1,arg2,arg3,arg4,arg5);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res4)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_helics_iteration_status, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRequestTimeAsync, _wrap_helicsFederateRequestTimeAsync, _wrap_helicsFederateRequestTimeAsync_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateRequestTimeAsync",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeAsync" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTimeAsync" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateRequestTimeAsync(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRequestTimeComplete, _wrap_helicsFederateRequestTimeComplete, _wrap_helicsFederateRequestTimeComplete_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t *arg2 = (helics_time_t *) 0 ;
  int res1 ;
  helics_time_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  if (!SWIG_check_num_args("helicsFederateRequestTimeComplete",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeComplete" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateRequestTimeComplete(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRequestTimeIterativeAsync, _wrap_helicsFederateRequestTimeIterativeAsync, _wrap_helicsFederateRequestTimeIterativeAsync_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  helics_iteration_request arg3 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateRequestTimeIterativeAsync",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeIterativeAsync" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTimeIterativeAsync" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRequestTimeIterativeAsync" "', argument " "3"" of type '" "helics_iteration_request""'");
  } 
  arg3 = static_cast< helics_iteration_request >(val3);
  result = (helics_status)helicsFederateRequestTimeIterativeAsync(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRequestTimeIterativeComplete, _wrap_helicsFederateRequestTimeIterativeComplete, _wrap_helicsFederateRequestTimeIterativeComplete_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t *arg2 = (helics_time_t *) 0 ;
  helics_iteration_status *arg3 = (helics_iteration_status *) 0 ;
  int res1 ;
  helics_time_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  helics_iteration_status temp3 ;
  int res3 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!SWIG_check_num_args("helicsFederateRequestTimeIterativeComplete",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeIterativeComplete" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateRequestTimeIterativeComplete(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_helics_iteration_status, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetName, _wrap_helicsFederateGetName, _wrap_helicsFederateGetName_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateGetName",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetName" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateGetName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateGetName" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsFederateGetName(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateSetTimeDelta, _wrap_helicsFederateSetTimeDelta, _wrap_helicsFederateSetTimeDelta_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateSetTimeDelta",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetTimeDelta" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetTimeDelta" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateSetTimeDelta(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateSetOutputDelay, _wrap_helicsFederateSetOutputDelay, _wrap_helicsFederateSetOutputDelay_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateSetOutputDelay",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetOutputDelay" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetOutputDelay" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateSetOutputDelay(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateSetInputDelay, _wrap_helicsFederateSetInputDelay, _wrap_helicsFederateSetInputDelay_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateSetInputDelay",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetInputDelay" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetInputDelay" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  result = (helics_status)helicsFederateSetInputDelay(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateSetPeriod, _wrap_helicsFederateSetPeriod, _wrap_helicsFederateSetPeriod_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t arg2 ;
  helics_time_t arg3 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateSetPeriod",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetPeriod" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetPeriod" "', argument " "2"" of type '" "helics_time_t""'");
  } 
  arg2 = static_cast< helics_time_t >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateSetPeriod" "', argument " "3"" of type '" "helics_time_t""'");
  } 
  arg3 = static_cast< helics_time_t >(val3);
  result = (helics_status)helicsFederateSetPeriod(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateSetFlag, _wrap_helicsFederateSetFlag, _wrap_helicsFederateSetFlag_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int arg2 ;
  helics_bool_t arg3 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateSetFlag",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetFlag" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetFlag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateSetFlag" "', argument " "3"" of type '" "helics_bool_t""'");
  } 
  arg3 = static_cast< helics_bool_t >(val3);
  result = (helics_status)helicsFederateSetFlag(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateSetLoggingLevel, _wrap_helicsFederateSetLoggingLevel, _wrap_helicsFederateSetLoggingLevel_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFederateSetLoggingLevel",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetLoggingLevel" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetLoggingLevel" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (helics_status)helicsFederateSetLoggingLevel(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetCurrentTime, _wrap_helicsFederateGetCurrentTime, _wrap_helicsFederateGetCurrentTime_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_time_t *arg2 = (helics_time_t *) 0 ;
  int res1 ;
  helics_time_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  if (!SWIG_check_num_args("helicsFederateGetCurrentTime",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetCurrentTime" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsFederateGetCurrentTime(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCreateQuery, _wrap_helicsCreateQuery, _wrap_helicsCreateQuery_texinfo ) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_query result;
  
  if (!SWIG_check_num_args("helicsCreateQuery",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(args(0), &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateQuery" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateQuery" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_query)helicsCreateQuery((char const *)arg1,(char const *)arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsQueryExecute, _wrap_helicsQueryExecute, _wrap_helicsQueryExecute_texinfo ) {
  helics_query arg1 = (helics_query) 0 ;
  helics_federate arg2 = (helics_federate) 0 ;
  int res1 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsQueryExecute",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryExecute" "', argument " "1"" of type '" "helics_query""'"); 
  }
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQueryExecute" "', argument " "2"" of type '" "helics_federate""'"); 
  }
  result = (char *)helicsQueryExecute(arg1,arg2);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsQueryExecuteAsync, _wrap_helicsQueryExecuteAsync, _wrap_helicsQueryExecuteAsync_texinfo ) {
  helics_query arg1 = (helics_query) 0 ;
  helics_federate arg2 = (helics_federate) 0 ;
  int res1 ;
  int res2 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsQueryExecuteAsync",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryExecuteAsync" "', argument " "1"" of type '" "helics_query""'"); 
  }
  res2 = SWIG_ConvertPtr(args(1),SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQueryExecuteAsync" "', argument " "2"" of type '" "helics_federate""'"); 
  }
  result = (helics_status)helicsQueryExecuteAsync(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsQueryExecuteComplete, _wrap_helicsQueryExecuteComplete, _wrap_helicsQueryExecuteComplete_texinfo ) {
  helics_query arg1 = (helics_query) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsQueryExecuteComplete",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryExecuteComplete" "', argument " "1"" of type '" "helics_query""'"); 
  }
  result = (char *)helicsQueryExecuteComplete(arg1);
  _outv = SWIG_FromCharPtr((const char *)result);
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsQueryIsCompleted, _wrap_helicsQueryIsCompleted, _wrap_helicsQueryIsCompleted_texinfo ) {
  helics_query arg1 = (helics_query) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_bool_t result;
  
  if (!SWIG_check_num_args("helicsQueryIsCompleted",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryIsCompleted" "', argument " "1"" of type '" "helics_query""'"); 
  }
  result = (helics_bool_t)helicsQueryIsCompleted(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsQueryFree, _wrap_helicsQueryFree, _wrap_helicsQueryFree_texinfo ) {
  helics_query arg1 = (helics_query) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("helicsQueryFree",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryFree" "', argument " "1"" of type '" "helics_query""'"); 
  }
  helicsQueryFree(arg1);
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsCleanupHelicsLibrary, _wrap_helicsCleanupHelicsLibrary, std::string() ) {
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  
  if (!SWIG_check_num_args("helicsCleanupHelicsLibrary",args.length(),0,0,0)) {
    SWIG_fail;
  }
  helicsCleanupHelicsLibrary();
  _outv = octave_value();
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterSubscription, _wrap_helicsFederateRegisterSubscription, _wrap_helicsFederateRegisterSubscription_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_subscription result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterSubscription",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterSubscription" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterSubscription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterSubscription" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterSubscription" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_subscription)helicsFederateRegisterSubscription(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterTypeSubscription, _wrap_helicsFederateRegisterTypeSubscription, _wrap_helicsFederateRegisterTypeSubscription_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_subscription result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterTypeSubscription",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterTypeSubscription" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterTypeSubscription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterTypeSubscription" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterTypeSubscription" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_subscription)helicsFederateRegisterTypeSubscription(arg1,(char const *)arg2,arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterOptionalSubscription, _wrap_helicsFederateRegisterOptionalSubscription, _wrap_helicsFederateRegisterOptionalSubscription_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_subscription result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterOptionalSubscription",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterOptionalSubscription" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterOptionalSubscription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterOptionalSubscription" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterOptionalSubscription" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_subscription)helicsFederateRegisterOptionalSubscription(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterOptionalTypeSubscription, _wrap_helicsFederateRegisterOptionalTypeSubscription, _wrap_helicsFederateRegisterOptionalTypeSubscription_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_subscription result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterOptionalTypeSubscription",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterOptionalTypeSubscription" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterOptionalTypeSubscription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterOptionalTypeSubscription" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterOptionalTypeSubscription" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_subscription)helicsFederateRegisterOptionalTypeSubscription(arg1,(char const *)arg2,arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterPublication, _wrap_helicsFederateRegisterPublication, _wrap_helicsFederateRegisterPublication_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_publication result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterPublication",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterPublication" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterPublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterPublication" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterPublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_publication)helicsFederateRegisterPublication(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterTypePublication, _wrap_helicsFederateRegisterTypePublication, _wrap_helicsFederateRegisterTypePublication_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_publication result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterTypePublication",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterTypePublication" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterTypePublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterTypePublication" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterTypePublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_publication)helicsFederateRegisterTypePublication(arg1,(char const *)arg2,arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterGlobalPublication, _wrap_helicsFederateRegisterGlobalPublication, _wrap_helicsFederateRegisterGlobalPublication_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_publication result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalPublication",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_publication)helicsFederateRegisterGlobalPublication(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterGlobalTypePublication, _wrap_helicsFederateRegisterGlobalTypePublication, _wrap_helicsFederateRegisterGlobalTypePublication_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_publication result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalTypePublication",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_publication)helicsFederateRegisterGlobalTypePublication(arg1,(char const *)arg2,arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationPublish, _wrap_helicsPublicationPublish, _wrap_helicsPublicationPublish_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationPublish",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublish" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationPublish" "', argument " "2"" of type '" "char const *""'");
  }  
  arg2 = reinterpret_cast< char * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  result = (helics_status)helicsPublicationPublish(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationPublishString, _wrap_helicsPublicationPublishString, _wrap_helicsPublicationPublishString_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationPublishString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishString" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationPublishString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsPublicationPublishString(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationPublishInteger, _wrap_helicsPublicationPublishInteger, _wrap_helicsPublicationPublishInteger_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  int64_t arg2 ;
  int res1 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationPublishInteger",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishInteger" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationPublishInteger" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "helicsPublicationPublishInteger" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *(reinterpret_cast< int64_t * >(argp2));
    }
  }
  result = (helics_status)helicsPublicationPublishInteger(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationPublishDouble, _wrap_helicsPublicationPublishDouble, _wrap_helicsPublicationPublishDouble_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  double arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationPublishDouble",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishDouble" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationPublishDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (helics_status)helicsPublicationPublishDouble(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationPublishComplex, _wrap_helicsPublicationPublishComplex, _wrap_helicsPublicationPublishComplex_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  double arg2 ;
  double arg3 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationPublishComplex",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishComplex" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationPublishComplex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsPublicationPublishComplex" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (helics_status)helicsPublicationPublishComplex(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationPublishVector, _wrap_helicsPublicationPublishVector, _wrap_helicsPublicationPublishVector_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  double *arg2 ;
  int arg3 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationPublishVector",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishVector" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationPublishVector" "', argument " "2"" of type '" "double const []""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsPublicationPublishVector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsPublicationPublishVector(arg1,(double const (*))arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetValueSize, _wrap_helicsSubscriptionGetValueSize, _wrap_helicsSubscriptionGetValueSize_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsSubscriptionGetValueSize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetValueSize" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  result = (int)helicsSubscriptionGetValueSize(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetValue, _wrap_helicsSubscriptionGetValue, _wrap_helicsSubscriptionGetValue_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg4 = &temp4;
  if (!SWIG_check_num_args("helicsSubscriptionGetValue",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetValue" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionGetValue" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionGetValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsSubscriptionGetValue(arg1,arg2,arg3,arg4);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res4)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetString, _wrap_helicsSubscriptionGetString, _wrap_helicsSubscriptionGetString_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionGetString",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetString" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionGetString" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionGetString" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsSubscriptionGetString(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetInteger, _wrap_helicsSubscriptionGetInteger, _wrap_helicsSubscriptionGetInteger_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  int res1 ;
  int64_t temp2 ;
  int res2 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  if (!SWIG_check_num_args("helicsSubscriptionGetInteger",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetInteger" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  result = (helics_status)helicsSubscriptionGetInteger(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_long_SS_long((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int64_t, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetDouble, _wrap_helicsSubscriptionGetDouble, _wrap_helicsSubscriptionGetDouble_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  double *arg2 = (double *) 0 ;
  int res1 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  if (!SWIG_check_num_args("helicsSubscriptionGetDouble",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetDouble" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  result = (helics_status)helicsSubscriptionGetDouble(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetComplex, _wrap_helicsSubscriptionGetComplex, _wrap_helicsSubscriptionGetComplex_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int res1 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!SWIG_check_num_args("helicsSubscriptionGetComplex",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetComplex" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  result = (helics_status)helicsSubscriptionGetComplex(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetVectorSize, _wrap_helicsSubscriptionGetVectorSize, _wrap_helicsSubscriptionGetVectorSize_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsSubscriptionGetVectorSize",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetVectorSize" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  result = (int)helicsSubscriptionGetVectorSize(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetVector, _wrap_helicsSubscriptionGetVector, _wrap_helicsSubscriptionGetVector_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  double *arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg4 = &temp4;
  if (!SWIG_check_num_args("helicsSubscriptionGetVector",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetVector" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionGetVector" "', argument " "2"" of type '" "double []""'"); 
  } 
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionGetVector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsSubscriptionGetVector(arg1,arg2,arg3,arg4);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res4)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionSetDefault, _wrap_helicsSubscriptionSetDefault, _wrap_helicsSubscriptionSetDefault_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionSetDefault",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionSetDefault" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionSetDefault" "', argument " "2"" of type '" "char const *""'");
  }  
  arg2 = reinterpret_cast< char * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  result = (helics_status)helicsSubscriptionSetDefault(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionSetDefaultString, _wrap_helicsSubscriptionSetDefaultString, _wrap_helicsSubscriptionSetDefaultString_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionSetDefaultString",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionSetDefaultString" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionSetDefaultString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsSubscriptionSetDefaultString(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionSetDefaultInteger, _wrap_helicsSubscriptionSetDefaultInteger, _wrap_helicsSubscriptionSetDefaultInteger_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  int64_t arg2 ;
  int res1 ;
  void *argp2 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionSetDefaultInteger",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionSetDefaultInteger" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  {
    res2 = SWIG_ConvertPtr(args(1), &argp2, SWIGTYPE_p_int64_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionSetDefaultInteger" "', argument " "2"" of type '" "int64_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "helicsSubscriptionSetDefaultInteger" "', argument " "2"" of type '" "int64_t""'");
    } else {
      arg2 = *(reinterpret_cast< int64_t * >(argp2));
    }
  }
  result = (helics_status)helicsSubscriptionSetDefaultInteger(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionSetDefaultDouble, _wrap_helicsSubscriptionSetDefaultDouble, _wrap_helicsSubscriptionSetDefaultDouble_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  double arg2 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionSetDefaultDouble",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionSetDefaultDouble" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsSubscriptionSetDefaultDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (helics_status)helicsSubscriptionSetDefaultDouble(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionSetDefaultComplex, _wrap_helicsSubscriptionSetDefaultComplex, _wrap_helicsSubscriptionSetDefaultComplex_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  double arg2 ;
  double arg3 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionSetDefaultComplex",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionSetDefaultComplex" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  ecode2 = SWIG_AsVal_double(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsSubscriptionSetDefaultComplex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionSetDefaultComplex" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (helics_status)helicsSubscriptionSetDefaultComplex(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionSetDefaultVector, _wrap_helicsSubscriptionSetDefaultVector, _wrap_helicsSubscriptionSetDefaultVector_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int res1 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  arg2 = &temp2;
  if (!SWIG_check_num_args("helicsSubscriptionSetDefaultVector",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionSetDefaultVector" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  ecode3 = SWIG_AsVal_int(args(1), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionSetDefaultVector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsSubscriptionSetDefaultVector(arg1,(double const *)arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (SWIG_IsTmpObj(res2)) {
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    _outp = SWIG_Octave_AppendOutput(_outp, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetType, _wrap_helicsSubscriptionGetType, _wrap_helicsSubscriptionGetType_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionGetType",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetType" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionGetType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionGetType" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsSubscriptionGetType(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationGetType, _wrap_helicsPublicationGetType, _wrap_helicsPublicationGetType_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationGetType",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetType" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationGetType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsPublicationGetType" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsPublicationGetType(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetKey, _wrap_helicsSubscriptionGetKey, _wrap_helicsSubscriptionGetKey_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionGetKey",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetKey" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionGetKey" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionGetKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsSubscriptionGetKey(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationGetKey, _wrap_helicsPublicationGetKey, _wrap_helicsPublicationGetKey_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationGetKey",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetKey" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationGetKey" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsPublicationGetKey" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsPublicationGetKey(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionGetUnits, _wrap_helicsSubscriptionGetUnits, _wrap_helicsSubscriptionGetUnits_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsSubscriptionGetUnits",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetUnits" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsSubscriptionGetUnits" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsSubscriptionGetUnits" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsSubscriptionGetUnits(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsPublicationGetUnits, _wrap_helicsPublicationGetUnits, _wrap_helicsPublicationGetUnits_texinfo ) {
  helics_publication arg1 = (helics_publication) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsPublicationGetUnits",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetUnits" "', argument " "1"" of type '" "helics_publication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationGetUnits" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsPublicationGetUnits" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsPublicationGetUnits(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionIsUpdated, _wrap_helicsSubscriptionIsUpdated, _wrap_helicsSubscriptionIsUpdated_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_bool_t result;
  
  if (!SWIG_check_num_args("helicsSubscriptionIsUpdated",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionIsUpdated" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  result = (helics_bool_t)helicsSubscriptionIsUpdated(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsSubscriptionLastUpdateTime, _wrap_helicsSubscriptionLastUpdateTime, _wrap_helicsSubscriptionLastUpdateTime_texinfo ) {
  helics_subscription arg1 = (helics_subscription) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_time_t result;
  
  if (!SWIG_check_num_args("helicsSubscriptionLastUpdateTime",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionLastUpdateTime" "', argument " "1"" of type '" "helics_subscription""'"); 
  }
  result = (helics_time_t)helicsSubscriptionLastUpdateTime(arg1);
  _outv = SWIG_From_double(static_cast< double >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetPublicationCount, _wrap_helicsFederateGetPublicationCount, std::string() ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateGetPublicationCount",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetPublicationCount" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (int)helicsFederateGetPublicationCount(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetSubscriptionCount, _wrap_helicsFederateGetSubscriptionCount, std::string() ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateGetSubscriptionCount",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetSubscriptionCount" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (int)helicsFederateGetSubscriptionCount(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterEndpoint, _wrap_helicsFederateRegisterEndpoint, _wrap_helicsFederateRegisterEndpoint_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_endpoint result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterEndpoint",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterEndpoint" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (helics_endpoint)helicsFederateRegisterEndpoint(arg1,(char const *)arg2,(char const *)arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterGlobalEndpoint, _wrap_helicsFederateRegisterGlobalEndpoint, _wrap_helicsFederateRegisterGlobalEndpoint_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_endpoint result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalEndpoint",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalEndpoint" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterGlobalEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (helics_endpoint)helicsFederateRegisterGlobalEndpoint(arg1,(char const *)arg2,(char const *)arg3);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointSetDefaultDestination, _wrap_helicsEndpointSetDefaultDestination, _wrap_helicsEndpointSetDefaultDestination_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsEndpointSetDefaultDestination",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSetDefaultDestination" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSetDefaultDestination" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsEndpointSetDefaultDestination(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointSendMessageRaw, _wrap_helicsEndpointSendMessageRaw, _wrap_helicsEndpointSendMessageRaw_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsEndpointSendMessageRaw",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendMessageRaw" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendMessageRaw" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, &size3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsEndpointSendMessageRaw" "', argument " "3"" of type '" "char const *""'");
  }  
  arg3 = reinterpret_cast< char * >(buf3);
  arg4 = static_cast< int >(size3 - 1);
  result = (helics_status)helicsEndpointSendMessageRaw(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointSendEventRaw, _wrap_helicsEndpointSendEventRaw, _wrap_helicsEndpointSendEventRaw_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  helics_time_t arg5 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 = 0 ;
  int alloc3 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsEndpointSendEventRaw",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendEventRaw" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendEventRaw" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, &size3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsEndpointSendEventRaw" "', argument " "3"" of type '" "char const *""'");
  }  
  arg3 = reinterpret_cast< char * >(buf3);
  arg4 = static_cast< int >(size3 - 1);
  ecode5 = SWIG_AsVal_double(args(3), &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "helicsEndpointSendEventRaw" "', argument " "5"" of type '" "helics_time_t""'");
  } 
  arg5 = static_cast< helics_time_t >(val5);
  result = (helics_status)helicsEndpointSendEventRaw(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointSendMessage, _wrap_helicsEndpointSendMessage, _wrap_helicsEndpointSendMessage_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  message_t *arg2 = (message_t *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsEndpointSendMessage",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendMessage" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  res2 = SWIG_ConvertPtr(args(1), &argp2,SWIGTYPE_p_message_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendMessage" "', argument " "2"" of type '" "message_t *""'"); 
  }
  arg2 = reinterpret_cast< message_t * >(argp2);
  result = (helics_status)helicsEndpointSendMessage(arg1,arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointSubscribe, _wrap_helicsEndpointSubscribe, _wrap_helicsEndpointSubscribe_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsEndpointSubscribe",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSubscribe" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSubscribe" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsEndpointSubscribe" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (helics_status)helicsEndpointSubscribe(arg1,(char const *)arg2,(char const *)arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateHasMessage, _wrap_helicsFederateHasMessage, _wrap_helicsFederateHasMessage_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_bool_t result;
  
  if (!SWIG_check_num_args("helicsFederateHasMessage",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateHasMessage" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (helics_bool_t)helicsFederateHasMessage(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointHasMessage, _wrap_helicsEndpointHasMessage, _wrap_helicsEndpointHasMessage_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_bool_t result;
  
  if (!SWIG_check_num_args("helicsEndpointHasMessage",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointHasMessage" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  result = (helics_bool_t)helicsEndpointHasMessage(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateReceiveCount, _wrap_helicsFederateReceiveCount, _wrap_helicsFederateReceiveCount_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateReceiveCount",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateReceiveCount" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (int)helicsFederateReceiveCount(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointReceiveCount, _wrap_helicsEndpointReceiveCount, _wrap_helicsEndpointReceiveCount_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsEndpointReceiveCount",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointReceiveCount" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  result = (int)helicsEndpointReceiveCount(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointGetMessage, _wrap_helicsEndpointGetMessage, _wrap_helicsEndpointGetMessage_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  message_t result;
  
  if (!SWIG_check_num_args("helicsEndpointGetMessage",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetMessage" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  result = helicsEndpointGetMessage(arg1);
  _outv = SWIG_NewPointerObj((new message_t(static_cast< const message_t& >(result))), SWIGTYPE_p_message_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetMessage, _wrap_helicsFederateGetMessage, _wrap_helicsFederateGetMessage_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  message_t result;
  
  if (!SWIG_check_num_args("helicsFederateGetMessage",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetMessage" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = helicsFederateGetMessage(arg1);
  _outv = SWIG_NewPointerObj((new message_t(static_cast< const message_t& >(result))), SWIGTYPE_p_message_t, SWIG_POINTER_OWN |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointGetType, _wrap_helicsEndpointGetType, _wrap_helicsEndpointGetType_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsEndpointGetType",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetType" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointGetType" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsEndpointGetType" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsEndpointGetType(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsEndpointGetName, _wrap_helicsEndpointGetName, _wrap_helicsEndpointGetName_texinfo ) {
  helics_endpoint arg1 = (helics_endpoint) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsEndpointGetName",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetName" "', argument " "1"" of type '" "helics_endpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointGetName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsEndpointGetName" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsEndpointGetName(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateGetEndpointCount, _wrap_helicsFederateGetEndpointCount, std::string() ) {
  helics_federate arg1 = (helics_federate) 0 ;
  int res1 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateGetEndpointCount",args.length(),1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetEndpointCount" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  result = (int)helicsFederateGetEndpointCount(arg1);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  return _out;
fail:
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterSourceFilter, _wrap_helicsFederateRegisterSourceFilter, _wrap_helicsFederateRegisterSourceFilter_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_filter_type_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_filter result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterSourceFilter",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterSourceFilter" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRegisterSourceFilter" "', argument " "2"" of type '" "helics_filter_type_t""'");
  } 
  arg2 = static_cast< helics_filter_type_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterSourceFilter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterSourceFilter" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_filter)helicsFederateRegisterSourceFilter(arg1,arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterDestinationFilter, _wrap_helicsFederateRegisterDestinationFilter, _wrap_helicsFederateRegisterDestinationFilter_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  helics_filter_type_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_filter result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterDestinationFilter",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterDestinationFilter" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRegisterDestinationFilter" "', argument " "2"" of type '" "helics_filter_type_t""'");
  } 
  arg2 = static_cast< helics_filter_type_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterDestinationFilter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterDestinationFilter" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_filter)helicsFederateRegisterDestinationFilter(arg1,arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsFederateRegisterCloningFilter, _wrap_helicsFederateRegisterCloningFilter, _wrap_helicsFederateRegisterCloningFilter_texinfo ) {
  helics_federate arg1 = (helics_federate) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_filter result;
  
  if (!SWIG_check_num_args("helicsFederateRegisterCloningFilter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterCloningFilter" "', argument " "1"" of type '" "helics_federate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterCloningFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_filter)helicsFederateRegisterCloningFilter(arg1,(char const *)arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreRegisterSourceFilter, _wrap_helicsCoreRegisterSourceFilter, _wrap_helicsCoreRegisterSourceFilter_texinfo ) {
  helics_core arg1 = (helics_core) 0 ;
  helics_filter_type_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_filter result;
  
  if (!SWIG_check_num_args("helicsCoreRegisterSourceFilter",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreRegisterSourceFilter" "', argument " "1"" of type '" "helics_core""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsCoreRegisterSourceFilter" "', argument " "2"" of type '" "helics_filter_type_t""'");
  } 
  arg2 = static_cast< helics_filter_type_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreRegisterSourceFilter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsCoreRegisterSourceFilter" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_filter)helicsCoreRegisterSourceFilter(arg1,arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreRegisterDestinationFilter, _wrap_helicsCoreRegisterDestinationFilter, _wrap_helicsCoreRegisterDestinationFilter_texinfo ) {
  helics_core arg1 = (helics_core) 0 ;
  helics_filter_type_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_filter result;
  
  if (!SWIG_check_num_args("helicsCoreRegisterDestinationFilter",args.length(),4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreRegisterDestinationFilter" "', argument " "1"" of type '" "helics_core""'"); 
  }
  ecode2 = SWIG_AsVal_int(args(1), &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsCoreRegisterDestinationFilter" "', argument " "2"" of type '" "helics_filter_type_t""'");
  } 
  arg2 = static_cast< helics_filter_type_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreRegisterDestinationFilter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args(3), &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsCoreRegisterDestinationFilter" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (helics_filter)helicsCoreRegisterDestinationFilter(arg1,arg2,(char const *)arg3,(char const *)arg4);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return _out;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return octave_value_list();
}


SWIG_DEFUN( helicsCoreRegisterCloningFilter, _wrap_helicsCoreRegisterCloningFilter, _wrap_helicsCoreRegisterCloningFilter_texinfo ) {
  helics_core arg1 = (helics_core) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_filter result;
  
  if (!SWIG_check_num_args("helicsCoreRegisterCloningFilter",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreRegisterCloningFilter" "', argument " "1"" of type '" "helics_core""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreRegisterCloningFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_filter)helicsCoreRegisterCloningFilter(arg1,(char const *)arg2);
  _outv = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterGetTarget, _wrap_helicsFilterGetTarget, _wrap_helicsFilterGetTarget_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterGetTarget",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterGetTarget" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterGetTarget" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFilterGetTarget" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsFilterGetTarget(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterGetName, _wrap_helicsFilterGetName, _wrap_helicsFilterGetName_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterGetName",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterGetName" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterGetName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFilterGetName" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (helics_status)helicsFilterGetName(arg1,arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterSet, _wrap_helicsFilterSet, _wrap_helicsFilterSet_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterSet",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterSet" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterSet" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(args(2), &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFilterSet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (helics_status)helicsFilterSet(arg1,(char const *)arg2,arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterSetString, _wrap_helicsFilterSetString, std::string() ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterSetString",args.length(),3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterSetString" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterSetString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args(2), &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFilterSetString" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (helics_status)helicsFilterSetString(arg1,(char const *)arg2,(char const *)arg3);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterAddDestinationTarget, _wrap_helicsFilterAddDestinationTarget, _wrap_helicsFilterAddDestinationTarget_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterAddDestinationTarget",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterAddDestinationTarget" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterAddDestinationTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFilterAddDestinationTarget(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterAddSourceTarget, _wrap_helicsFilterAddSourceTarget, _wrap_helicsFilterAddSourceTarget_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterAddSourceTarget",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterAddSourceTarget" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterAddSourceTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFilterAddSourceTarget(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterAddDeliveryEndpoint, _wrap_helicsFilterAddDeliveryEndpoint, _wrap_helicsFilterAddDeliveryEndpoint_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterAddDeliveryEndpoint",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterAddDeliveryEndpoint" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterAddDeliveryEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFilterAddDeliveryEndpoint(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterRemoveDestinationTarget, _wrap_helicsFilterRemoveDestinationTarget, _wrap_helicsFilterRemoveDestinationTarget_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterRemoveDestinationTarget",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterRemoveDestinationTarget" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterRemoveDestinationTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFilterRemoveDestinationTarget(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterRemoveSourceTarget, _wrap_helicsFilterRemoveSourceTarget, _wrap_helicsFilterRemoveSourceTarget_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterRemoveSourceTarget",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterRemoveSourceTarget" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterRemoveSourceTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFilterRemoveSourceTarget(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}


SWIG_DEFUN( helicsFilterRemoveDeliveryEndpoint, _wrap_helicsFilterRemoveDeliveryEndpoint, _wrap_helicsFilterRemoveDeliveryEndpoint_texinfo ) {
  helics_filter arg1 = (helics_filter) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  octave_value_list _out;
  octave_value_list *_outp=&_out;
  octave_value _outv;
  helics_status result;
  
  if (!SWIG_check_num_args("helicsFilterRemoveDeliveryEndpoint",args.length(),2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(args(0),SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterRemoveDeliveryEndpoint" "', argument " "1"" of type '" "helics_filter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(args(1), &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterRemoveDeliveryEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (helics_status)helicsFilterRemoveDeliveryEndpoint(arg1,(char const *)arg2);
  _outv = SWIG_From_int(static_cast< int >(result));
  if (_outv.is_defined()) _outp = SWIG_Octave_AppendOutput(_outp, _outv);
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return _out;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return octave_value_list();
}



static const struct swig_octave_member swig_globals[] = {
{"helics_time_zero",0,_wrap_helics_time_zero_get,_wrap_helics_time_zero_set,2,0},
{"helics_time_epsilon",0,_wrap_helics_time_epsilon_get,_wrap_helics_time_epsilon_set,2,0},
{"data_t_data_set",_wrap_data_t_data_set,0,0,2,0},
{"data_t_data_get",_wrap_data_t_data_get,0,0,2,0},
{"data_t_length_set",_wrap_data_t_length_set,0,0,2,0},
{"data_t_length_get",_wrap_data_t_length_get,0,0,2,0},
{"new_data_t",_wrap_new_data_t,0,0,2,_wrap_new_data_t_texinfo},
{"delete_data_t",_wrap_delete_data_t,0,0,2,0},
{"message_t_time_set",_wrap_message_t_time_set,0,0,2,0},
{"message_t_time_get",_wrap_message_t_time_get,0,0,2,0},
{"message_t_data_set",_wrap_message_t_data_set,0,0,2,0},
{"message_t_data_get",_wrap_message_t_data_get,0,0,2,0},
{"message_t_length_set",_wrap_message_t_length_set,0,0,2,0},
{"message_t_length_get",_wrap_message_t_length_get,0,0,2,0},
{"message_t_original_source_set",_wrap_message_t_original_source_set,0,0,2,0},
{"message_t_original_source_get",_wrap_message_t_original_source_get,0,0,2,0},
{"message_t_source_set",_wrap_message_t_source_set,0,0,2,0},
{"message_t_source_get",_wrap_message_t_source_get,0,0,2,0},
{"message_t_dest_set",_wrap_message_t_dest_set,0,0,2,0},
{"message_t_dest_get",_wrap_message_t_dest_get,0,0,2,0},
{"message_t_original_dest_set",_wrap_message_t_original_dest_set,0,0,2,0},
{"message_t_original_dest_get",_wrap_message_t_original_dest_get,0,0,2,0},
{"new_message_t",_wrap_new_message_t,0,0,2,_wrap_new_message_t_texinfo},
{"delete_message_t",_wrap_delete_message_t,0,0,2,0},
{"helicsGetVersion",_wrap_helicsGetVersion,0,0,2,_wrap_helicsGetVersion_texinfo},
{"helicsIsCoreTypeAvailable",_wrap_helicsIsCoreTypeAvailable,0,0,2,_wrap_helicsIsCoreTypeAvailable_texinfo},
{"helicsCreateCore",_wrap_helicsCreateCore,0,0,2,_wrap_helicsCreateCore_texinfo},
{"helicsCreateCoreFromArgs",_wrap_helicsCreateCoreFromArgs,0,0,2,_wrap_helicsCreateCoreFromArgs_texinfo},
{"helicsCreateBroker",_wrap_helicsCreateBroker,0,0,2,_wrap_helicsCreateBroker_texinfo},
{"helicsCreateBrokerFromArgs",_wrap_helicsCreateBrokerFromArgs,0,0,2,_wrap_helicsCreateBrokerFromArgs_texinfo},
{"helicsBrokerIsConnected",_wrap_helicsBrokerIsConnected,0,0,2,_wrap_helicsBrokerIsConnected_texinfo},
{"helicsCoreIsConnected",_wrap_helicsCoreIsConnected,0,0,2,_wrap_helicsCoreIsConnected_texinfo},
{"helicsBrokerGetIdentifier",_wrap_helicsBrokerGetIdentifier,0,0,2,_wrap_helicsBrokerGetIdentifier_texinfo},
{"helicsCoreGetIdentifier",_wrap_helicsCoreGetIdentifier,0,0,2,_wrap_helicsCoreGetIdentifier_texinfo},
{"helicsBrokerGetAddress",_wrap_helicsBrokerGetAddress,0,0,2,_wrap_helicsBrokerGetAddress_texinfo},
{"helicsCoreSetReadyToInit",_wrap_helicsCoreSetReadyToInit,0,0,2,0},
{"helicsCoreDisconnect",_wrap_helicsCoreDisconnect,0,0,2,_wrap_helicsCoreDisconnect_texinfo},
{"helicsBrokerDisconnect",_wrap_helicsBrokerDisconnect,0,0,2,_wrap_helicsBrokerDisconnect_texinfo},
{"helicsCoreFree",_wrap_helicsCoreFree,0,0,2,_wrap_helicsCoreFree_texinfo},
{"helicsBrokerFree",_wrap_helicsBrokerFree,0,0,2,_wrap_helicsBrokerFree_texinfo},
{"helicsCreateValueFederate",_wrap_helicsCreateValueFederate,0,0,2,_wrap_helicsCreateValueFederate_texinfo},
{"helicsCreateValueFederateFromJson",_wrap_helicsCreateValueFederateFromJson,0,0,2,_wrap_helicsCreateValueFederateFromJson_texinfo},
{"helicsCreateMessageFederate",_wrap_helicsCreateMessageFederate,0,0,2,_wrap_helicsCreateMessageFederate_texinfo},
{"helicsCreateMessageFederateFromJson",_wrap_helicsCreateMessageFederateFromJson,0,0,2,_wrap_helicsCreateMessageFederateFromJson_texinfo},
{"helicsCreateCombinationFederate",_wrap_helicsCreateCombinationFederate,0,0,2,_wrap_helicsCreateCombinationFederate_texinfo},
{"helicsCreateCombinationFederateFromJson",_wrap_helicsCreateCombinationFederateFromJson,0,0,2,_wrap_helicsCreateCombinationFederateFromJson_texinfo},
{"helicsFederateInfoCreate",_wrap_helicsFederateInfoCreate,0,0,2,_wrap_helicsFederateInfoCreate_texinfo},
{"helicsFederateInfoLoadFromArgs",_wrap_helicsFederateInfoLoadFromArgs,0,0,2,_wrap_helicsFederateInfoLoadFromArgs_texinfo},
{"helicsFederateInfoFree",_wrap_helicsFederateInfoFree,0,0,2,_wrap_helicsFederateInfoFree_texinfo},
{"helicsFederateInfoSetFederateName",_wrap_helicsFederateInfoSetFederateName,0,0,2,_wrap_helicsFederateInfoSetFederateName_texinfo},
{"helicsFederateInfoSetCoreName",_wrap_helicsFederateInfoSetCoreName,0,0,2,_wrap_helicsFederateInfoSetCoreName_texinfo},
{"helicsFederateInfoSetCoreInitString",_wrap_helicsFederateInfoSetCoreInitString,0,0,2,_wrap_helicsFederateInfoSetCoreInitString_texinfo},
{"helicsFederateInfoSetCoreTypeFromString",_wrap_helicsFederateInfoSetCoreTypeFromString,0,0,2,_wrap_helicsFederateInfoSetCoreTypeFromString_texinfo},
{"helicsFederateInfoSetCoreType",_wrap_helicsFederateInfoSetCoreType,0,0,2,_wrap_helicsFederateInfoSetCoreType_texinfo},
{"helicsFederateInfoSetFlag",_wrap_helicsFederateInfoSetFlag,0,0,2,_wrap_helicsFederateInfoSetFlag_texinfo},
{"helicsFederateInfoSetOutputDelay",_wrap_helicsFederateInfoSetOutputDelay,0,0,2,_wrap_helicsFederateInfoSetOutputDelay_texinfo},
{"helicsFederateInfoSetTimeDelta",_wrap_helicsFederateInfoSetTimeDelta,0,0,2,_wrap_helicsFederateInfoSetTimeDelta_texinfo},
{"helicsFederateInfoSetInputDelay",_wrap_helicsFederateInfoSetInputDelay,0,0,2,_wrap_helicsFederateInfoSetInputDelay_texinfo},
{"helicsFederateInfoSetTimeOffset",_wrap_helicsFederateInfoSetTimeOffset,0,0,2,_wrap_helicsFederateInfoSetTimeOffset_texinfo},
{"helicsFederateInfoSetPeriod",_wrap_helicsFederateInfoSetPeriod,0,0,2,_wrap_helicsFederateInfoSetPeriod_texinfo},
{"helicsFederateInfoSetMaxIterations",_wrap_helicsFederateInfoSetMaxIterations,0,0,2,_wrap_helicsFederateInfoSetMaxIterations_texinfo},
{"helicsFederateInfoSetLoggingLevel",_wrap_helicsFederateInfoSetLoggingLevel,0,0,2,_wrap_helicsFederateInfoSetLoggingLevel_texinfo},
{"helicsFederateFinalize",_wrap_helicsFederateFinalize,0,0,2,_wrap_helicsFederateFinalize_texinfo},
{"helicsFederateFree",_wrap_helicsFederateFree,0,0,2,_wrap_helicsFederateFree_texinfo},
{"helicsCloseLibrary",_wrap_helicsCloseLibrary,0,0,2,_wrap_helicsCloseLibrary_texinfo},
{"helicsFederateEnterInitializationMode",_wrap_helicsFederateEnterInitializationMode,0,0,2,_wrap_helicsFederateEnterInitializationMode_texinfo},
{"helicsFederateEnterInitializationModeAsync",_wrap_helicsFederateEnterInitializationModeAsync,0,0,2,_wrap_helicsFederateEnterInitializationModeAsync_texinfo},
{"helicsFederateIsAsyncOperationCompleted",_wrap_helicsFederateIsAsyncOperationCompleted,0,0,2,_wrap_helicsFederateIsAsyncOperationCompleted_texinfo},
{"helicsFederateEnterInitializationModeComplete",_wrap_helicsFederateEnterInitializationModeComplete,0,0,2,_wrap_helicsFederateEnterInitializationModeComplete_texinfo},
{"helicsFederateEnterExecutionMode",_wrap_helicsFederateEnterExecutionMode,0,0,2,_wrap_helicsFederateEnterExecutionMode_texinfo},
{"helicsFederateEnterExecutionModeAsync",_wrap_helicsFederateEnterExecutionModeAsync,0,0,2,_wrap_helicsFederateEnterExecutionModeAsync_texinfo},
{"helicsFederateEnterExecutionModeComplete",_wrap_helicsFederateEnterExecutionModeComplete,0,0,2,_wrap_helicsFederateEnterExecutionModeComplete_texinfo},
{"helicsFederateEnterExecutionModeIterative",_wrap_helicsFederateEnterExecutionModeIterative,0,0,2,_wrap_helicsFederateEnterExecutionModeIterative_texinfo},
{"helicsFederateEnterExecutionModeIterativeAsync",_wrap_helicsFederateEnterExecutionModeIterativeAsync,0,0,2,_wrap_helicsFederateEnterExecutionModeIterativeAsync_texinfo},
{"helicsFederateEnterExecutionModeIterativeComplete",_wrap_helicsFederateEnterExecutionModeIterativeComplete,0,0,2,_wrap_helicsFederateEnterExecutionModeIterativeComplete_texinfo},
{"helicsFederateGetState",_wrap_helicsFederateGetState,0,0,2,_wrap_helicsFederateGetState_texinfo},
{"helicsFederateGetCoreObject",_wrap_helicsFederateGetCoreObject,0,0,2,_wrap_helicsFederateGetCoreObject_texinfo},
{"helicsFederateRequestTime",_wrap_helicsFederateRequestTime,0,0,2,_wrap_helicsFederateRequestTime_texinfo},
{"helicsFederateRequestTimeIterative",_wrap_helicsFederateRequestTimeIterative,0,0,2,_wrap_helicsFederateRequestTimeIterative_texinfo},
{"helicsFederateRequestTimeAsync",_wrap_helicsFederateRequestTimeAsync,0,0,2,_wrap_helicsFederateRequestTimeAsync_texinfo},
{"helicsFederateRequestTimeComplete",_wrap_helicsFederateRequestTimeComplete,0,0,2,_wrap_helicsFederateRequestTimeComplete_texinfo},
{"helicsFederateRequestTimeIterativeAsync",_wrap_helicsFederateRequestTimeIterativeAsync,0,0,2,_wrap_helicsFederateRequestTimeIterativeAsync_texinfo},
{"helicsFederateRequestTimeIterativeComplete",_wrap_helicsFederateRequestTimeIterativeComplete,0,0,2,_wrap_helicsFederateRequestTimeIterativeComplete_texinfo},
{"helicsFederateGetName",_wrap_helicsFederateGetName,0,0,2,_wrap_helicsFederateGetName_texinfo},
{"helicsFederateSetTimeDelta",_wrap_helicsFederateSetTimeDelta,0,0,2,_wrap_helicsFederateSetTimeDelta_texinfo},
{"helicsFederateSetOutputDelay",_wrap_helicsFederateSetOutputDelay,0,0,2,_wrap_helicsFederateSetOutputDelay_texinfo},
{"helicsFederateSetInputDelay",_wrap_helicsFederateSetInputDelay,0,0,2,_wrap_helicsFederateSetInputDelay_texinfo},
{"helicsFederateSetPeriod",_wrap_helicsFederateSetPeriod,0,0,2,_wrap_helicsFederateSetPeriod_texinfo},
{"helicsFederateSetFlag",_wrap_helicsFederateSetFlag,0,0,2,_wrap_helicsFederateSetFlag_texinfo},
{"helicsFederateSetLoggingLevel",_wrap_helicsFederateSetLoggingLevel,0,0,2,_wrap_helicsFederateSetLoggingLevel_texinfo},
{"helicsFederateGetCurrentTime",_wrap_helicsFederateGetCurrentTime,0,0,2,_wrap_helicsFederateGetCurrentTime_texinfo},
{"helicsCreateQuery",_wrap_helicsCreateQuery,0,0,2,_wrap_helicsCreateQuery_texinfo},
{"helicsQueryExecute",_wrap_helicsQueryExecute,0,0,2,_wrap_helicsQueryExecute_texinfo},
{"helicsQueryExecuteAsync",_wrap_helicsQueryExecuteAsync,0,0,2,_wrap_helicsQueryExecuteAsync_texinfo},
{"helicsQueryExecuteComplete",_wrap_helicsQueryExecuteComplete,0,0,2,_wrap_helicsQueryExecuteComplete_texinfo},
{"helicsQueryIsCompleted",_wrap_helicsQueryIsCompleted,0,0,2,_wrap_helicsQueryIsCompleted_texinfo},
{"helicsQueryFree",_wrap_helicsQueryFree,0,0,2,_wrap_helicsQueryFree_texinfo},
{"helicsCleanupHelicsLibrary",_wrap_helicsCleanupHelicsLibrary,0,0,2,0},
{"helicsFederateRegisterSubscription",_wrap_helicsFederateRegisterSubscription,0,0,2,_wrap_helicsFederateRegisterSubscription_texinfo},
{"helicsFederateRegisterTypeSubscription",_wrap_helicsFederateRegisterTypeSubscription,0,0,2,_wrap_helicsFederateRegisterTypeSubscription_texinfo},
{"helicsFederateRegisterOptionalSubscription",_wrap_helicsFederateRegisterOptionalSubscription,0,0,2,_wrap_helicsFederateRegisterOptionalSubscription_texinfo},
{"helicsFederateRegisterOptionalTypeSubscription",_wrap_helicsFederateRegisterOptionalTypeSubscription,0,0,2,_wrap_helicsFederateRegisterOptionalTypeSubscription_texinfo},
{"helicsFederateRegisterPublication",_wrap_helicsFederateRegisterPublication,0,0,2,_wrap_helicsFederateRegisterPublication_texinfo},
{"helicsFederateRegisterTypePublication",_wrap_helicsFederateRegisterTypePublication,0,0,2,_wrap_helicsFederateRegisterTypePublication_texinfo},
{"helicsFederateRegisterGlobalPublication",_wrap_helicsFederateRegisterGlobalPublication,0,0,2,_wrap_helicsFederateRegisterGlobalPublication_texinfo},
{"helicsFederateRegisterGlobalTypePublication",_wrap_helicsFederateRegisterGlobalTypePublication,0,0,2,_wrap_helicsFederateRegisterGlobalTypePublication_texinfo},
{"helicsPublicationPublish",_wrap_helicsPublicationPublish,0,0,2,_wrap_helicsPublicationPublish_texinfo},
{"helicsPublicationPublishString",_wrap_helicsPublicationPublishString,0,0,2,_wrap_helicsPublicationPublishString_texinfo},
{"helicsPublicationPublishInteger",_wrap_helicsPublicationPublishInteger,0,0,2,_wrap_helicsPublicationPublishInteger_texinfo},
{"helicsPublicationPublishDouble",_wrap_helicsPublicationPublishDouble,0,0,2,_wrap_helicsPublicationPublishDouble_texinfo},
{"helicsPublicationPublishComplex",_wrap_helicsPublicationPublishComplex,0,0,2,_wrap_helicsPublicationPublishComplex_texinfo},
{"helicsPublicationPublishVector",_wrap_helicsPublicationPublishVector,0,0,2,_wrap_helicsPublicationPublishVector_texinfo},
{"helicsSubscriptionGetValueSize",_wrap_helicsSubscriptionGetValueSize,0,0,2,_wrap_helicsSubscriptionGetValueSize_texinfo},
{"helicsSubscriptionGetValue",_wrap_helicsSubscriptionGetValue,0,0,2,_wrap_helicsSubscriptionGetValue_texinfo},
{"helicsSubscriptionGetString",_wrap_helicsSubscriptionGetString,0,0,2,_wrap_helicsSubscriptionGetString_texinfo},
{"helicsSubscriptionGetInteger",_wrap_helicsSubscriptionGetInteger,0,0,2,_wrap_helicsSubscriptionGetInteger_texinfo},
{"helicsSubscriptionGetDouble",_wrap_helicsSubscriptionGetDouble,0,0,2,_wrap_helicsSubscriptionGetDouble_texinfo},
{"helicsSubscriptionGetComplex",_wrap_helicsSubscriptionGetComplex,0,0,2,_wrap_helicsSubscriptionGetComplex_texinfo},
{"helicsSubscriptionGetVectorSize",_wrap_helicsSubscriptionGetVectorSize,0,0,2,_wrap_helicsSubscriptionGetVectorSize_texinfo},
{"helicsSubscriptionGetVector",_wrap_helicsSubscriptionGetVector,0,0,2,_wrap_helicsSubscriptionGetVector_texinfo},
{"helicsSubscriptionSetDefault",_wrap_helicsSubscriptionSetDefault,0,0,2,_wrap_helicsSubscriptionSetDefault_texinfo},
{"helicsSubscriptionSetDefaultString",_wrap_helicsSubscriptionSetDefaultString,0,0,2,_wrap_helicsSubscriptionSetDefaultString_texinfo},
{"helicsSubscriptionSetDefaultInteger",_wrap_helicsSubscriptionSetDefaultInteger,0,0,2,_wrap_helicsSubscriptionSetDefaultInteger_texinfo},
{"helicsSubscriptionSetDefaultDouble",_wrap_helicsSubscriptionSetDefaultDouble,0,0,2,_wrap_helicsSubscriptionSetDefaultDouble_texinfo},
{"helicsSubscriptionSetDefaultComplex",_wrap_helicsSubscriptionSetDefaultComplex,0,0,2,_wrap_helicsSubscriptionSetDefaultComplex_texinfo},
{"helicsSubscriptionSetDefaultVector",_wrap_helicsSubscriptionSetDefaultVector,0,0,2,_wrap_helicsSubscriptionSetDefaultVector_texinfo},
{"helicsSubscriptionGetType",_wrap_helicsSubscriptionGetType,0,0,2,_wrap_helicsSubscriptionGetType_texinfo},
{"helicsPublicationGetType",_wrap_helicsPublicationGetType,0,0,2,_wrap_helicsPublicationGetType_texinfo},
{"helicsSubscriptionGetKey",_wrap_helicsSubscriptionGetKey,0,0,2,_wrap_helicsSubscriptionGetKey_texinfo},
{"helicsPublicationGetKey",_wrap_helicsPublicationGetKey,0,0,2,_wrap_helicsPublicationGetKey_texinfo},
{"helicsSubscriptionGetUnits",_wrap_helicsSubscriptionGetUnits,0,0,2,_wrap_helicsSubscriptionGetUnits_texinfo},
{"helicsPublicationGetUnits",_wrap_helicsPublicationGetUnits,0,0,2,_wrap_helicsPublicationGetUnits_texinfo},
{"helicsSubscriptionIsUpdated",_wrap_helicsSubscriptionIsUpdated,0,0,2,_wrap_helicsSubscriptionIsUpdated_texinfo},
{"helicsSubscriptionLastUpdateTime",_wrap_helicsSubscriptionLastUpdateTime,0,0,2,_wrap_helicsSubscriptionLastUpdateTime_texinfo},
{"helicsFederateGetPublicationCount",_wrap_helicsFederateGetPublicationCount,0,0,2,0},
{"helicsFederateGetSubscriptionCount",_wrap_helicsFederateGetSubscriptionCount,0,0,2,0},
{"helicsFederateRegisterEndpoint",_wrap_helicsFederateRegisterEndpoint,0,0,2,_wrap_helicsFederateRegisterEndpoint_texinfo},
{"helicsFederateRegisterGlobalEndpoint",_wrap_helicsFederateRegisterGlobalEndpoint,0,0,2,_wrap_helicsFederateRegisterGlobalEndpoint_texinfo},
{"helicsEndpointSetDefaultDestination",_wrap_helicsEndpointSetDefaultDestination,0,0,2,_wrap_helicsEndpointSetDefaultDestination_texinfo},
{"helicsEndpointSendMessageRaw",_wrap_helicsEndpointSendMessageRaw,0,0,2,_wrap_helicsEndpointSendMessageRaw_texinfo},
{"helicsEndpointSendEventRaw",_wrap_helicsEndpointSendEventRaw,0,0,2,_wrap_helicsEndpointSendEventRaw_texinfo},
{"helicsEndpointSendMessage",_wrap_helicsEndpointSendMessage,0,0,2,_wrap_helicsEndpointSendMessage_texinfo},
{"helicsEndpointSubscribe",_wrap_helicsEndpointSubscribe,0,0,2,_wrap_helicsEndpointSubscribe_texinfo},
{"helicsFederateHasMessage",_wrap_helicsFederateHasMessage,0,0,2,_wrap_helicsFederateHasMessage_texinfo},
{"helicsEndpointHasMessage",_wrap_helicsEndpointHasMessage,0,0,2,_wrap_helicsEndpointHasMessage_texinfo},
{"helicsFederateReceiveCount",_wrap_helicsFederateReceiveCount,0,0,2,_wrap_helicsFederateReceiveCount_texinfo},
{"helicsEndpointReceiveCount",_wrap_helicsEndpointReceiveCount,0,0,2,_wrap_helicsEndpointReceiveCount_texinfo},
{"helicsEndpointGetMessage",_wrap_helicsEndpointGetMessage,0,0,2,_wrap_helicsEndpointGetMessage_texinfo},
{"helicsFederateGetMessage",_wrap_helicsFederateGetMessage,0,0,2,_wrap_helicsFederateGetMessage_texinfo},
{"helicsEndpointGetType",_wrap_helicsEndpointGetType,0,0,2,_wrap_helicsEndpointGetType_texinfo},
{"helicsEndpointGetName",_wrap_helicsEndpointGetName,0,0,2,_wrap_helicsEndpointGetName_texinfo},
{"helicsFederateGetEndpointCount",_wrap_helicsFederateGetEndpointCount,0,0,2,0},
{"helicsFederateRegisterSourceFilter",_wrap_helicsFederateRegisterSourceFilter,0,0,2,_wrap_helicsFederateRegisterSourceFilter_texinfo},
{"helicsFederateRegisterDestinationFilter",_wrap_helicsFederateRegisterDestinationFilter,0,0,2,_wrap_helicsFederateRegisterDestinationFilter_texinfo},
{"helicsFederateRegisterCloningFilter",_wrap_helicsFederateRegisterCloningFilter,0,0,2,_wrap_helicsFederateRegisterCloningFilter_texinfo},
{"helicsCoreRegisterSourceFilter",_wrap_helicsCoreRegisterSourceFilter,0,0,2,_wrap_helicsCoreRegisterSourceFilter_texinfo},
{"helicsCoreRegisterDestinationFilter",_wrap_helicsCoreRegisterDestinationFilter,0,0,2,_wrap_helicsCoreRegisterDestinationFilter_texinfo},
{"helicsCoreRegisterCloningFilter",_wrap_helicsCoreRegisterCloningFilter,0,0,2,_wrap_helicsCoreRegisterCloningFilter_texinfo},
{"helicsFilterGetTarget",_wrap_helicsFilterGetTarget,0,0,2,_wrap_helicsFilterGetTarget_texinfo},
{"helicsFilterGetName",_wrap_helicsFilterGetName,0,0,2,_wrap_helicsFilterGetName_texinfo},
{"helicsFilterSet",_wrap_helicsFilterSet,0,0,2,_wrap_helicsFilterSet_texinfo},
{"helicsFilterSetString",_wrap_helicsFilterSetString,0,0,2,0},
{"helicsFilterAddDestinationTarget",_wrap_helicsFilterAddDestinationTarget,0,0,2,_wrap_helicsFilterAddDestinationTarget_texinfo},
{"helicsFilterAddSourceTarget",_wrap_helicsFilterAddSourceTarget,0,0,2,_wrap_helicsFilterAddSourceTarget_texinfo},
{"helicsFilterAddDeliveryEndpoint",_wrap_helicsFilterAddDeliveryEndpoint,0,0,2,_wrap_helicsFilterAddDeliveryEndpoint_texinfo},
{"helicsFilterRemoveDestinationTarget",_wrap_helicsFilterRemoveDestinationTarget,0,0,2,_wrap_helicsFilterRemoveDestinationTarget_texinfo},
{"helicsFilterRemoveSourceTarget",_wrap_helicsFilterRemoveSourceTarget,0,0,2,_wrap_helicsFilterRemoveSourceTarget_texinfo},
{"helicsFilterRemoveDeliveryEndpoint",_wrap_helicsFilterRemoveDeliveryEndpoint,0,0,2,_wrap_helicsFilterRemoveDeliveryEndpoint_texinfo},
{0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_data_t = {"_p_data_t", "data_t *", 0, 0, (void*)&_wrap_class_data_t, 0};
static swig_type_info _swigt__p_double = {"_p_double", "helics_time_t *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_federate_state = {"_p_federate_state", "enum federate_state *|federate_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_helics_filter_type_t = {"_p_helics_filter_type_t", "enum helics_filter_type_t *|helics_filter_type_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_helics_iteration_request = {"_p_helics_iteration_request", "enum helics_iteration_request *|helics_iteration_request *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_helics_iteration_status = {"_p_helics_iteration_status", "enum helics_iteration_status *|helics_iteration_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_helics_status = {"_p_helics_status", "enum helics_status *|helics_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "helics_bool_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_message_t = {"_p_message_t", "message_t *", 0, 0, (void*)&_wrap_class_message_t, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "helics_publication|helics_core|helics_broker|helics_query|helics_filter|helics_subscription|helics_federate|helics_federate_info_t|helics_endpoint|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_data_t,
  &_swigt__p_double,
  &_swigt__p_federate_state,
  &_swigt__p_helics_filter_type_t,
  &_swigt__p_helics_iteration_request,
  &_swigt__p_helics_iteration_status,
  &_swigt__p_helics_status,
  &_swigt__p_int,
  &_swigt__p_int64_t,
  &_swigt__p_message_t,
  &_swigt__p_p_char,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_data_t[] = {  {&_swigt__p_data_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_federate_state[] = {  {&_swigt__p_federate_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_helics_filter_type_t[] = {  {&_swigt__p_helics_filter_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_helics_iteration_request[] = {  {&_swigt__p_helics_iteration_request, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_helics_iteration_status[] = {  {&_swigt__p_helics_iteration_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_helics_status[] = {  {&_swigt__p_helics_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_message_t[] = {  {&_swigt__p_message_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_data_t,
  _swigc__p_double,
  _swigc__p_federate_state,
  _swigc__p_helics_filter_type_t,
  _swigc__p_helics_iteration_request,
  _swigc__p_helics_iteration_status,
  _swigc__p_helics_status,
  _swigc__p_int,
  _swigc__p_int64_t,
  _swigc__p_message_t,
  _swigc__p_p_char,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



static bool SWIG_init_user(octave_swig_type* module_ns);

SWIGINTERN bool SWIG_Octave_LoadModule(std::string name) {
  bool retn = false;
  {
#if SWIG_OCTAVE_PREREQ(4,2,0)
    octave::unwind_protect frame;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#elif SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect frame;
    frame.protect_var(error_state);                     error_state = 0;
    frame.protect_var(warning_state);                   warning_state = 0;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#else
    unwind_protect::begin_frame("SWIG_Octave_LoadModule");
    unwind_protect_int(error_state);                    error_state = 0;
    unwind_protect_int(warning_state);                  warning_state = 0;
    unwind_protect_bool(discard_error_messages);        discard_error_messages = true;
    unwind_protect_bool(discard_warning_messages);      discard_warning_messages = true;
#endif
#if SWIG_OCTAVE_PREREQ(4,2,0)
    try {
      feval(name, octave_value_list(), 0);
      retn = true;
    } catch (octave::execution_exception&) { }
#else
    feval(name, octave_value_list(), 0);
    retn = (error_state == 0);
#endif
#if !SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect::run_frame("SWIG_Octave_LoadModule");
#endif
  }
  if (!retn) {
    error(SWIG_name_d ": could not load module `%s'", name.c_str());
  }
  return retn;
}

SWIGINTERN bool SWIG_Octave_InstallFunction(octave_function *octloadfcn, std::string name) {
  bool retn = false;
  {
#if SWIG_OCTAVE_PREREQ(4,2,0)
    octave::unwind_protect frame;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#elif SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect frame;
    frame.protect_var(error_state);                     error_state = 0;
    frame.protect_var(warning_state);                   warning_state = 0;
    frame.protect_var(discard_error_messages);          discard_error_messages = true;
    frame.protect_var(discard_warning_messages);        discard_warning_messages = true;
#else
    unwind_protect::begin_frame("SWIG_Octave_LoadModule");
    unwind_protect_int(error_state);                    error_state = 0;
    unwind_protect_int(warning_state);                  warning_state = 0;
    unwind_protect_bool(discard_error_messages);        discard_error_messages = true;
    unwind_protect_bool(discard_warning_messages);      discard_warning_messages = true;
#endif
    octave_value_list args;
    args.append(name);
    args.append(octloadfcn->fcn_file_name());
#if SWIG_OCTAVE_PREREQ(4,2,0)
    try {
      feval("autoload", args, 0);
      retn = true;
    } catch (octave::execution_exception&) { }
#else
    feval("autoload", args, 0);
    retn = (error_state == 0);
#endif
#if !SWIG_OCTAVE_PREREQ(3,3,50)
    unwind_protect::run_frame("SWIG_Octave_InstallFunction");
#endif
  }
  if (!retn) {
    error(SWIG_name_d ": could not load function `%s'", name.c_str());
  }
  return retn;
}

static const char *const subclass_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} subclass()\n\
@deftypefnx{Loadable Function} {} subclass(@var{swigclass}, @var{name}, @var{fcn}, @dots{})\n\
Subclass a C++ class from within Octave, and provide implementations of its virtual methods.\n\
\n\
See the SWIG manual for usage examples.\n\
@end deftypefn";

DEFUN_DLD( subclass, args, nargout, subclass_usage ) {
  octave_swig_type *top = new octave_swig_type;
  for (int j = 0; j < args.length(); ++j) {
    if (args(j).type_id() == octave_swig_ref::static_type_id()) {
      octave_swig_ref *osr = static_cast < octave_swig_ref *>(args(j).internal_rep());
      octave_swig_type *ost = osr->get_ptr();
      if (!ost->is_owned()) {
        error("subclass: cannot subclass object not constructed on octave side");
        return octave_value_list();
      }
      top->merge(*ost);
    } else if (args(j).is_function_handle()) {
      top->assign(args(j).fcn_handle_value()->fcn_name(), args(j));
    } else if (args(j).is_string()) {
      if (j + 1 >= args.length()) {
        error("subclass: member assignments must be of string,value form");
        return octave_value_list();
      }
      top->assign(args(j).string_value(), args(j + 1));
      ++j;
    } else {
      error("subclass: invalid arguments to subclass()");
      return octave_value_list();
    }
  }
  return octave_value(Swig::swig_value_ref(top));
}

static const char *const swig_type_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_type(@var{swigref})\n\
Return the underlying C/C++ type name of a SWIG-wrapped object.\n\
@end deftypefn";

DEFUN_DLD( swig_type, args, nargout, swig_type_usage ) {
  if (args.length() != 1) {
    error("swig_type: must be called with only a single object");
    return octave_value_list();
  }
  octave_swig_type *ost = Swig::swig_value_deref(args(0));
  if (!ost) {
    error("swig_type: object is not a swig_ref");
    return octave_value_list();
  }
  return octave_value(ost->swig_type_name());
}

static const char *const swig_typequery_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_typequery(@var{string})\n\
Return @var{string} if it is a recognised SWIG-wrapped C/C++ type name;\n\
otherwise return `<unknown>'.\n\
@end deftypefn";

DEFUN_DLD( swig_typequery, args, nargout, swig_typequery_usage ) {
  if (args.length() != 1 || !args(0).is_string()) {
    error("swig_typequery: must be called with single string argument");
    return octave_value_list();
  }
  swig_module_info *module = SWIG_GetModule(0);
  swig_type_info *type = SWIG_TypeQueryModule(module, module, args(0).string_value().c_str());
  if (!type)
    return octave_value("<unknown>");
  return octave_value(type->name);
}

static const char *const swig_this_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_this(@var{swigref})\n\
Return the underlying C/C++ pointer of a SWIG-wrapped object.\n\
@end deftypefn";

DEFUN_DLD( swig_this, args, nargout, swig_this_usage ) {
  if (args.length() != 1) {
    error("swig_this: must be called with only a single object");
    return octave_value_list();
  }
  if (args(0).is_matrix_type() && args(0).rows() == 0 && args(0).columns() == 0)
    return octave_value(octave_uint64(0));
  octave_swig_type *ost = Swig::swig_value_deref(args(0));
  if (!ost) {
    error("swig_this: object is not a swig_ref");
    return octave_value_list();
  }
  return octave_value(octave_uint64((unsigned long long) ost->swig_this()));
}

static const char *const swig_octave_prereq_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Function} {} swig_octave_prereq(@var{major}, @var{minor}, @var{patch})\n\
Return true if the version of Octave is at least @var{major}.@var{minor}.@var{patch}.\n\
@end deftypefn";

DEFUN_DLD( swig_octave_prereq, args, nargout, swig_octave_prereq_usage ) {
  if (args.length() != 3) {
    error("swig_octave_prereq: must be called with 3 arguments");
    return octave_value_list();
  }
  const int major = args(0).int_value();
  const int minor = args(1).int_value();
  const int patch = args(2).int_value();
  const bool prereq = SWIG_OCTAVE_PREREQ(major, minor, patch);
  return octave_value(prereq);
}

static const char *const SWIG_name_usage = "-*- texinfo -*- \n\
@deftypefn {Loadable Module} {} " SWIG_name_d "\n\
Loads the SWIG-generated module `" SWIG_name_d "'.\n\
@end deftypefn";

DEFUN_DLD( SWIG_name, args, nargout, SWIG_name_usage ) {

  static octave_swig_type* module_ns = 0;

  // workaround to prevent octave seg-faulting on exit: set Octave exit function
  // octave_exit to _Exit, which exits immediately without trying to cleanup memory.
  // definitely affected version 3.2.*, not sure about 3.3.*, seems to be fixed in
  // version 3.4.*, but reappeared in 4.2.*, so turn on for all versions after 3.2.*.
  // can be turned off with macro definition.
#ifndef SWIG_OCTAVE_NO_SEGFAULT_HACK
#if SWIG_OCTAVE_PREREQ(3,2,0)
  octave_exit = ::_Exit;
#endif
#endif

  // check for no input and output args
  if (args.length() != 0 || nargout != 0) {
    print_usage();
    return octave_value_list();
  }

  // create module on first function call
  if (!module_ns) {

    // workaround bug in octave where installing global variable of custom type and then
    // exiting without explicitly clearing the variable causes octave to segfault.
#if SWIG_OCTAVE_PREREQ(3,2,0)
    octave_value_list eval_args;
    eval_args.append("base");
    eval_args.append("function __swig_atexit__; "
                     "  if mislocked() "
                     "    clear -all; "
                     "  else "
                     "    mlock(); "
                     "  endif; "
                     "endfunction; "
                     "__swig_atexit__; "
                     "atexit(\"__swig_atexit__\", false); "
                     "atexit(\"__swig_atexit__\")");
    feval("evalin", eval_args, 0);
#endif

    octave_swig_ref::register_type();
    octave_swig_packed::register_type();
    SWIG_InitializeModule(0);
    SWIG_PropagateClientData();

    octave_function *me = octave_call_stack::current();

    if (!SWIG_Octave_InstallFunction(me, "subclass")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_type")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_typequery")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_this")) {
      return octave_value_list();
    }
    if (!SWIG_Octave_InstallFunction(me, "swig_octave_prereq")) {
      return octave_value_list();
    }

    octave_swig_type* cvar_ns=0;
    if (std::string(SWIG_global_name) != ".") {
      cvar_ns=new octave_swig_type;
      for (int j=0;swig_globals[j].name;++j)
        if (swig_globals[j].get_method)
          cvar_ns->assign(swig_globals[j].name,&swig_globals[j]);
    }

    module_ns=new octave_swig_type(0, 0, 0, true);
    if (std::string(SWIG_global_name) != ".") {
      module_ns->assign(SWIG_global_name,Swig::swig_value_ref(cvar_ns));
    }
    else {
      for (int j=0;swig_globals[j].name;++j)
        if (swig_globals[j].get_method)
          module_ns->assign(swig_globals[j].name,&swig_globals[j]);
    }
    for (int j=0;swig_globals[j].name;++j)
      if (swig_globals[j].method)
        module_ns->assign(swig_globals[j].name,&swig_globals[j]);

    // * need better solution here; swig_type -> octave_class mapping is
    // * really n-to-1, in some cases such as template partial spec, etc.
    // * see failing tests.
    for (int j=0;swig_types[j];++j)
      if (swig_types[j]->clientdata) {
        swig_octave_class* c=(swig_octave_class*)swig_types[j]->clientdata;
        module_ns->assign(c->name,
                        Swig::swig_value_ref
                        (new octave_swig_type(0,swig_types[j])));
      }

    if (!SWIG_init_user(module_ns)) {
      delete module_ns;
      module_ns=0;
      return octave_value_list();
    }

    SWIG_InstallOps(octave_swig_ref::static_type_id());

    octave_swig_type::swig_member_const_iterator mb;
    for (mb = module_ns->swig_members_begin(); mb != module_ns->swig_members_end(); ++mb) {
      if (mb->second.first && mb->second.first->method) {
        if (!SWIG_Octave_InstallFunction(me, mb->first)) {
          return octave_value_list();
        }
      }
    }

#if !SWIG_OCTAVE_PREREQ(3,2,0)
    mlock(me->name());
#else
    mlock();
#endif

  }

  octave_swig_type::swig_member_const_iterator mb;
  for (mb = module_ns->swig_members_begin(); mb != module_ns->swig_members_end(); ++mb) {
    if (mb->second.second.is_defined()) {
      SWIG_Octave_SetGlobalValue(mb->first, mb->second.second);
      SWIG_Octave_LinkGlobalValue(mb->first);
    }
  }

  SWIG_Octave_SetGlobalValue(SWIG_name_d, module_ns->as_value());
  SWIG_Octave_LinkGlobalValue(SWIG_name_d);

  return octave_value_list();

}


static bool SWIG_init_user(octave_swig_type* module_ns)
{
  SWIG_Octave_SetConstant(module_ns,"helics_ok",SWIG_From_int(static_cast< int >(helics_ok)));
  SWIG_Octave_SetConstant(module_ns,"helics_invalid_object",SWIG_From_int(static_cast< int >(helics_invalid_object)));
  SWIG_Octave_SetConstant(module_ns,"helics_invalid_argument",SWIG_From_int(static_cast< int >(helics_invalid_argument)));
  SWIG_Octave_SetConstant(module_ns,"helics_discard",SWIG_From_int(static_cast< int >(helics_discard)));
  SWIG_Octave_SetConstant(module_ns,"helics_terminated",SWIG_From_int(static_cast< int >(helics_terminated)));
  SWIG_Octave_SetConstant(module_ns,"helics_warning",SWIG_From_int(static_cast< int >(helics_warning)));
  SWIG_Octave_SetConstant(module_ns,"helics_invalid_state_transition",SWIG_From_int(static_cast< int >(helics_invalid_state_transition)));
  SWIG_Octave_SetConstant(module_ns,"helics_invalid_function_call",SWIG_From_int(static_cast< int >(helics_invalid_function_call)));
  SWIG_Octave_SetConstant(module_ns,"helics_error",SWIG_From_int(static_cast< int >(helics_error)));
  SWIG_Octave_SetConstant(module_ns,"helics_true",SWIG_From_int(static_cast< int >((1))));
  SWIG_Octave_SetConstant(module_ns,"helics_false",SWIG_From_int(static_cast< int >((0))));
  SWIG_Octave_SetConstant(module_ns,"no_iteration",SWIG_From_int(static_cast< int >(no_iteration)));
  SWIG_Octave_SetConstant(module_ns,"force_iteration",SWIG_From_int(static_cast< int >(force_iteration)));
  SWIG_Octave_SetConstant(module_ns,"iterate_if_needed",SWIG_From_int(static_cast< int >(iterate_if_needed)));
  SWIG_Octave_SetConstant(module_ns,"next_step",SWIG_From_int(static_cast< int >(next_step)));
  SWIG_Octave_SetConstant(module_ns,"iteration_error",SWIG_From_int(static_cast< int >(iteration_error)));
  SWIG_Octave_SetConstant(module_ns,"iteration_halted",SWIG_From_int(static_cast< int >(iteration_halted)));
  SWIG_Octave_SetConstant(module_ns,"iterating",SWIG_From_int(static_cast< int >(iterating)));
  SWIG_Octave_SetConstant(module_ns,"helics_startup_state",SWIG_From_int(static_cast< int >(helics_startup_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_initialization_state",SWIG_From_int(static_cast< int >(helics_initialization_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_execution_state",SWIG_From_int(static_cast< int >(helics_execution_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_finalize_state",SWIG_From_int(static_cast< int >(helics_finalize_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_error_state",SWIG_From_int(static_cast< int >(helics_error_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_pending_init_state",SWIG_From_int(static_cast< int >(helics_pending_init_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_pending_exec_state",SWIG_From_int(static_cast< int >(helics_pending_exec_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_pending_time_state",SWIG_From_int(static_cast< int >(helics_pending_time_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_pending_iterative_time_state",SWIG_From_int(static_cast< int >(helics_pending_iterative_time_state)));
  SWIG_Octave_SetConstant(module_ns,"helics_custom_filter",SWIG_From_int(static_cast< int >(helics_custom_filter)));
  SWIG_Octave_SetConstant(module_ns,"helics_delay_filter",SWIG_From_int(static_cast< int >(helics_delay_filter)));
  SWIG_Octave_SetConstant(module_ns,"helics_randomDelay_filter",SWIG_From_int(static_cast< int >(helics_randomDelay_filter)));
  SWIG_Octave_SetConstant(module_ns,"helics_randomDrop_filter",SWIG_From_int(static_cast< int >(helics_randomDrop_filter)));
  SWIG_Octave_SetConstant(module_ns,"helics_reroute_filter",SWIG_From_int(static_cast< int >(helics_reroute_filter)));
  SWIG_Octave_SetConstant(module_ns,"helics_clone_filter",SWIG_From_int(static_cast< int >(helics_clone_filter)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_DEFAULT",SWIG_From_int(static_cast< int >(0)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_ZMQ",SWIG_From_int(static_cast< int >(1)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_MPI",SWIG_From_int(static_cast< int >(2)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_TEST",SWIG_From_int(static_cast< int >(3)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_INTERPROCESS",SWIG_From_int(static_cast< int >(4)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_IPC",SWIG_From_int(static_cast< int >(5)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_TCP",SWIG_From_int(static_cast< int >(6)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_CORE_TYPE_UDP",SWIG_From_int(static_cast< int >(7)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_STRING_TYPE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_DOUBLE_TYPE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_INT_TYPE",SWIG_From_int(static_cast< int >(2)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_COMPLEX_TYPE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_VECTOR_TYPE",SWIG_From_int(static_cast< int >(4)));
  SWIG_Octave_SetConstant(module_ns,"HELICS_RAW_TYPE",SWIG_From_int(static_cast< int >(25)));
  return true;
}

