name: Build release artifacts

on: release

jobs:
################################
# Create all submodules archive
################################
  create-all-submodule-archive:
    name: Create all submodule archive
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      if: github.event.action == 'published'
      
    - name: Create archive
      if: github.event.action == 'published'
      # Creates the archive then moves it to an artifact subfolder
      run: ./scripts/_git-all-archive.sh -l "$(git rev-parse --abbrev-ref "${GITHUB_REF}")" && mkdir artifact && mv "Helics-$(git rev-parse --abbrev-ref "${GITHUB_REF}")-source.tar.gz" artifact/
      
    - name: Upload archive to release
      if: github.event.action == 'published'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      run: ./.github/workflows/upload-release-asset.sh "artifact/Helics-$(git rev-parse --abbrev-ref "${GITHUB_REF}")-source.tar.gz"
      
    - name: Upload artifact
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: all-submodules-archive
        path: artifact
        
################################
# Build MSVC archives
################################
  build-windows-msvc:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2016, windows-2019]
        arch: [x64]
        include:
          - os: windows-2016
            cmake_gen: 'Visual Studio 15 2017'
            msvc_ver: 'msvc2017'
          - os: windows-2019
            cmake_gen: 'Visual Studio 16 2019'
            msvc_ver: 'msvc2019'
    steps:
    - uses: actions/checkout@v1
      if: github.event.action == 'published'
      
    # Build with Python 3.6 interface
    - uses: actions/setup-python@v1
      if: github.event.action == 'published'
      with:
        python-version: '3.6'
        architecture: ${{ matrix.arch }}
        
    # Compile HELICS and create the installer
    - name: Build installer
      if: github.event.action == 'published'
      env:
        BUILD_ARCH: ${{ matrix.arch }}
        BUILD_GEN: ${{ matrix.cmake_gen }}
        MSVC_VER: ${{ matrix.msvc_ver }}
      shell: bash
      # This uses bash variable substitution in a few places
      # 1. replacing x86 with Win32 (setting the Python version uses x86)
      # 2. getting the cmake directory for running cpack with an absolute path (chocolatey has an unfortunately named alias)
      # 3. moving the generated installer with a rename to add msvcYYYY to the file name
      run: |
        echo "Building with ${BUILD_GEN} for ${BUILD_ARCH}"
        choco install -y swig
        cpack_dir="$(which cmake)"
        cpack_dir="${cpack_dir%/cmake}"
        mkdir build && cd build
        cmake -G "${BUILD_GEN}" -A "${BUILD_ARCH/x86/Win32}" -DCMAKE_BUILD_TYPE=Debug -DENABLE_PACKAGE_BUILD=ON -DBUILD_SHARED_LIBS=ON -DBUILD_HELICS_EXAMPLES=OFF -DBUILD_TESTING=OFF -DBUILD_APP_EXECUTABLES=OFF -DDISABLE_C_SHARED_LIB=ON ..
        cmake --build . --config Debug
        echo "Packing Debug"
        "${cpack_dir}/cpack" -G "ZIP" -C Debug -B "$(pwd)/../tmp_dir"
        pushd ../tmp_dir
        rm -rf _CPack_Packages
        ZIP_FILE="$(ls Helics-*.zip)"
        7z x "$ZIP_FILE" -y
        rm "$ZIP_FILE"
        popd
        cmake -G "${BUILD_GEN}" -A "${BUILD_ARCH/x86/Win32}" -DCMAKE_BUILD_TYPE=Release -DENABLE_PACKAGE_BUILD=ON -DBUILD_SHARED_LIBS=ON -DBUILD_HELICS_EXAMPLES=OFF -DBUILD_TESTING=OFF -DBUILD_APP_EXECUTABLES=OFF -DDISABLE_C_SHARED_LIB=ON ..
        cmake --build . --config Release
        echo "Packing Release"
        "${cpack_dir}/cpack" -G "ZIP" -C Release -B "$(pwd)/../tmp_dir"
        cd ../tmp_dir
        rm -rf _CPack_Packages
        ZIP_FILE="$(ls Helics-*.zip)"
        7z x "$ZIP_FILE" -y
        rm "$ZIP_FILE"
        7z a "$ZIP_FILE" -r *
        mkdir ../artifact
        mv "$ZIP_FILE" "../artifact/${ZIP_FILE/-win/-${MSVC_VER}-win}"
        
    - name: Upload installer to release
      if: github.event.action == 'published'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      shell: bash
      run: ./.github/workflows/upload-release-asset.sh "$(ls artifact/Helics-*.zip)"
      
    # GitHub Actions combines artifacts uploaded with the same name
    - name: Upload artifact
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: windows-installers
        path: artifact
        
################################
# Build Windows installer
################################
  build-windows-installer:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        arch: [x64]
        cpack_gen: [NSIS, ZIP]
        include:
          - os: windows-2019
            cmake_gen: 'Visual Studio 16 2019'
            msvc_ver: 'msvc2019'
    steps:
    - uses: actions/checkout@v1
      if: github.event.action == 'published'
      
    # Build with Python 3.6 interface
    - uses: actions/setup-python@v1
      if: github.event.action == 'published'
      with:
        python-version: '3.6'
        architecture: ${{ matrix.arch }}
        
    # Compile HELICS and create the installer
    - name: Build installer
      if: github.event.action == 'published'
      env:
        BUILD_ARCH: ${{ matrix.arch }}
        BUILD_GEN: ${{ matrix.cmake_gen }}
        MSVC_VER: ${{ matrix.msvc_ver }}
        CPACK_GEN: ${{ matrix.cpack_gen }}
      shell: bash
      # This uses bash variable substitution in a few places
      # 1. replacing x86 with Win32 (setting the Python version uses x86)
      # 2. getting the cmake directory for running cpack with an absolute path (chocolatey has an unfortunately named alias)
      run: |
        echo "Building ${CPACK_GEN} installer with ${BUILD_GEN} for ${BUILD_ARCH}"
        choco install -y swig
        mkdir build && cd build
        cmake -G "${BUILD_GEN}" -A "${BUILD_ARCH/x86/Win32}" -DCMAKE_BUILD_TYPE=Release -DENABLE_PACKAGE_BUILD=ON -DBUILD_PYTHON_INTERFACE=ON -DBUILD_JAVA_INTERFACE=ON -DDISABLE_STATIC_LIB_INSTALL=ON -DSTATIC_STANDARD_LIB=ON -DBUILD_HELICS_EXAMPLES=OFF -DBUILD_TESTING=OFF .. || true
        cmake --build . --config Release
        cpack_dir="$(which cmake)"
        cpack_dir="${cpack_dir%/cmake}"
        "${cpack_dir}/cpack" -G "${CPACK_GEN}" -C Release -B "$(pwd)/../artifact"
        cd ../artifact
        rm -rf _CPack_Packages
        
    - name: Upload installer to release
      if: github.event.action == 'published'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      shell: bash
      run: ./.github/workflows/upload-release-asset.sh "$(ls artifact/Helics-*)"
      
    # GitHub Actions combines artifacts uploaded with the same name
    - name: Upload artifact
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: windows-installers
        path: artifact
        
################################
# Build Windows shared library
################################
  build-windows-sharedlib:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        arch: [x64]
        include:
          - os: windows-2019
            cmake_gen: 'Visual Studio 16 2019'
            msvc_ver: 'msvc2019'
    steps:
    - uses: actions/checkout@v1
      if: github.event.action == 'published'
      
    # Build with Python 3.6 interface
    - uses: actions/setup-python@v1
      if: github.event.action == 'published'
      with:
        python-version: '3.6'
        architecture: ${{ matrix.arch }}
        
    # Compile HELICS and create the installer
    - name: Build installer
      if: github.event.action == 'published'
      env:
        BUILD_ARCH: ${{ matrix.arch }}
        BUILD_GEN: ${{ matrix.cmake_gen }}
        MSVC_VER: ${{ matrix.msvc_ver }}
      shell: bash
      # This uses bash variable substitution in a few places
      # 1. replacing x86 with Win32 (setting the Python version uses x86)
      # 2. getting the cmake directory for running cpack with an absolute path (chocolatey has an unfortunately named alias)
      run: |
        echo "Building shared library with ${BUILD_GEN} for ${BUILD_ARCH}"
        choco install -y swig
        mkdir build && cd build
        cmake -G "${BUILD_GEN}" -A "${BUILD_ARCH/x86/Win32}" -DCMAKE_BUILD_TYPE=Release -DENABLE_PACKAGE_BUILD=ON -DDISABLE_STATIC_LIB_INSTALL=ON -DSTATIC_STANDARD_LIB=ON -DBUILD_APP_EXECUTABLES=OFF -DBUILD_HELICS_EXAMPLES=OFF -DBUILD_TESTING=OFF .. || true
        cmake --build . --config Release
        cpack_dir="$(which cmake)"
        cpack_dir="${cpack_dir%/cmake}"
        "${cpack_dir}/cpack" -G "TGZ" -C Release -B "$(pwd)/../artifact"
        cd ../artifact
        rm -rf _CPack_Packages
        ARCHIVE_FILE="$(ls Helics-*)"
        mv "$ARCHIVE_FILE" "${ARCHIVE_FILE/Helics-/Helics-shared-}"
        
    - name: Upload installer to release
      if: github.event.action == 'published'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      shell: bash
      run: ./.github/workflows/upload-release-asset.sh "$(ls artifact/Helics-*)"
      
    # GitHub Actions combines artifacts uploaded with the same name
    - name: Upload artifact
      if: github.event.action == 'published'
      uses: actions/upload-artifact@v1
      with:
        name: windows-installers
        path: artifact
        
################################
# Generate SHA-256 file
################################
  generate-sha256:
    name: Calculate SHA256 for release assets
    needs: [create-all-submodule-archive, build-windows-installer, build-windows-msvc, build-windows-sharedlib]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      if: github.event.action == 'published'
      
    - name: Get all submodules archive
      if: github.event.action == 'published'
      uses: actions/download-artifact@v1
      with:
        name: all-submodules-archive
        path: artifacts
        
    - name: Get Windows installers
      if: github.event.action == 'published'
      uses: actions/download-artifact@v1
      with:
        name: windows-installers
        path: artifacts
        
    - name: Create SHA-256 file
      if: github.event.action == 'published'
      run: cd artifacts && sha256sum * > "Helics-$(git rev-parse --abbrev-ref "${GITHUB_REF}")-SHA-256.txt"
      
    - name: Upload SHA-256 file to release
      if: github.event.action == 'published'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOAD_URL: ${{ github.event.release.upload_url }}
      run: ./.github/workflows/upload-release-asset.sh "artifacts/Helics-$(git rev-parse --abbrev-ref "${GITHUB_REF}")-SHA-256.txt"
