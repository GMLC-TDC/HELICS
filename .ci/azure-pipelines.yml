trigger:
  branches:
    exclude:
      - pre-commit/*

jobs:
  - job: Linux
    strategy:
      matrix:
        ubuntuDefault:
          containerImage: 'helics/buildenv:ubuntu18.04-default-builder'
          test_config: 'ci'
        gcc10:
          containerImage: 'helics/buildenv:gcc10-builder'
          test_config: 'ci'
        clang10:
          containerImage: 'helics/buildenv:clang10-builder'
          test_config: 'ci'
        clang5:
          containerImage: 'helics/buildenv:clang5-builder'
          test_config: 'ci'

    pool:
      vmImage: 'ubuntu-latest'
    container: $[ variables['containerImage'] ]
    timeoutInMinutes: 90

    steps:
      - bash: |
          source scripts/setup-helics-ci-options.sh
          mkdir -p build && cd build
          ../scripts/ci-build.sh
        env:
          MAKEFLAGS: '-j 4'
          CMAKE_GENERATOR: 'Unix Makefiles'
          USE_SWIG: 'true'
          USE_MPI: 'true'
          ZMQ_SUBPROJECT: $[variables['zmq_subproject']]
          ZMQ_FORCE_SUBPROJECT: $[variables['zmq_subproject']]
        displayName: 'Build HELICS'

      - bash: ../scripts/run-ci-tests.sh "$TEST_CONFIG"
        env:
          TEST_CONFIG: $[variables['test_config']]
        workingDirectory: 'build'
        displayName: 'Test HELICS'

  - job: macOS
    strategy:
      matrix:
        XCode-latest:
          test_config: 'ci'
          vmImage: 'macOS-latest'
        XCode-oldest:
          test_config: 'ci'
          vmImage: 'macOS-10.14'
          xcode_path: '/Applications/Xcode_10.1.app'
    pool:
      vmImage: $[ variables['vmImage'] ]
    timeoutInMinutes: 90

    steps:
      - bash: sudo xcode-select --switch "${XCODE_PATH}/Contents/Developer"
        env:
          XCODE_PATH: $[variables['xcode_path']]
        displayName: 'Set XCode Path'
        condition: ne(variables['xcode_path'],'')
      - bash: brew install swig zeromq boost
        displayName: 'Install dependencies'
      - bash: |
          source scripts/setup-helics-ci-options.sh
          mkdir -p build && cd build
          ../scripts/ci-build.sh
        env:
          MAKEFLAGS: '-j 4'
          CMAKE_GENERATOR: 'Unix Makefiles'
          USE_SWIG: 'true'
        displayName: 'Build HELICS'

      - bash: ../scripts/run-ci-tests.sh "$TEST_CONFIG"
        env:
          TEST_CONFIG: $[variables['test_config']]
        workingDirectory: 'build'
        displayName: 'Test HELICS'

  - job: Windows
    strategy:
      matrix:
        VS2017-32bit:
          imageName: 'vs2017-win2016'
          langArch: 'x86'
          vsArch: 'Win32'
          extraFlags: '-DHELICS_DISABLE_WEBSERVER=ON'
        VS2017-64bit:
          imageName: 'vs2017-win2016'
          langArch: 'x64'
          vsArch: 'x64'
          extraFlags: ''
        VS2019-64bit:
          imageName: 'windows-2019'
          langArch: 'x64'
          vsArch: 'x64'
          extraFlags: ''
    pool:
      vmImage: $(imageName)

    steps:
      # -----------------------
      # Install dependencies
      # -----------------------
      - bash: choco install swig --yes --limit-output
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: Install swig

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.5'
          addToPath: true
          architecture: $(langArch)

      - bash: pip3 install pytest
        displayName: Install pytest

      # -----------------------
      # Configure HELICS
      # -----------------------
      - bash: |
          echo "##vso[task.setvariable variable=BOOST_ROOT]$BOOST_ROOT_1_72_0"
      - task: CMake@1
        inputs:
          cmakeArgs: -A $(vsArch) -DHELICS_ENABLE_SWIG=ON -DHELICS_BUILD_CXX_SHARED_LIB=ON -DHELICS_ENABLE_PACKAGE_BUILD=ON -DHELICS_BUILD_TESTS=ON -DHELICS_BUILD_EXAMPLES=ON $(extraFlags) ..
        displayName: 'Configure HELICS'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      #  - task: CMake@1
      #    inputs:
      #      cmakeArgs: -DBUILD_PYTHON_INTERFACE=ON .
      #    displayName: 'Configure Python interface'
      #    condition: and(ne( variables['imageName'], 'vs2015-win2012r2' ), eq( variables['langArch'], 'x64' ))

      #  - task: CMake@1
      #    inputs:
      #      cmakeArgs: -DBUILD_JAVA_INTERFACE=ON .
      #    displayName: 'Configure Java interface'
      #    condition: eq( variables['langArch'], 'x64' )

      # -----------------------
      # Build HELICS
      # -----------------------
      - bash: cmake --build . --config Release
        displayName: 'Build HELICS'
        workingDirectory: build

      # -----------------------
      # Package HELICS
      # -----------------------
      - bash: |
          cpack_dir="$(which cmake)"
          cpack_dir="${cpack_dir%/cmake}"
          "${cpack_dir}/cpack" -G "NSIS" -C Release -B "$PWD/installer-output"
        displayName: 'Package HELICS'
        workingDirectory: build

      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/build/installer-output'
          contents: '*.exe'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: installer

      # -----------------------
      # Test HELICS
      # -----------------------
      - bash: ctest --output-on-failure --timeout 480 -C Release -L "Continuous"
        displayName: 'Test HELICS'
        workingDirectory: build

      # Packaging tests
      - bash: ctest --output-on-failure --timeout 200 -C Release -L "PackagingFast"
        displayName: 'Test HELICS packaging'
        workingDirectory: build

      - task: PublishBuildArtifacts@1
        condition: failed()
        inputs:
          pathtoPublish: '$(Build.SourcesDirectory)/build'
          artifactName: buildDirContents
