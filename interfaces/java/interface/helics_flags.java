/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.java.helics;

/**
 *  enumeration of general flags that can be used in federates/cores/brokers 
 */
public final class helics_flags {
  /**
   *  flag specifying that a federate, core, or broker may be slow to respond to pings<br>
   *         If the federate goes offline there is no good way to detect it so use with caution
   */
  public final static helics_flags helics_flag_slow_responding = new helics_flags("helics_flag_slow_responding", helicsJNI.helics_flag_slow_responding_get());
  /**
   *  flag specifying the federate/core/broker is operating in a user debug mode so deadlock<br>
   *     timers and timeout are disabled this flag is a combination of slow_responding and disabling of<br>
   *     some timeouts
   */
  public final static helics_flags helics_flag_debugging = new helics_flags("helics_flag_debugging", helicsJNI.helics_flag_debugging_get());
  /**
   *  specify that a federate error should terminate the federation
   */
  public final static helics_flags helics_flag_terminate_on_error = new helics_flags("helics_flag_terminate_on_error", helicsJNI.helics_flag_terminate_on_error_get());
  /**
   *  specify that the log files should be flushed on every log message
   */
  public final static helics_flags helics_flag_force_logging_flush = new helics_flags("helics_flag_force_logging_flush", helicsJNI.helics_flag_force_logging_flush_get());
  /**
   *  specify that a full log should be dumped into a file
   */
  public final static helics_flags helics_flag_dumplog = new helics_flags("helics_flag_dumplog", helicsJNI.helics_flag_dumplog_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static helics_flags swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + helics_flags.class + " with value " + swigValue);
  }

  private helics_flags(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private helics_flags(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private helics_flags(String swigName, helics_flags swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static helics_flags[] swigValues = { helics_flag_slow_responding, helics_flag_debugging, helics_flag_terminate_on_error, helics_flag_force_logging_flush, helics_flag_dumplog };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

