/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMATLAB
#define SWIG_name_d      "helics"
#define SWIG_name        helics

#define SWIG_op_prefix        "op_"
#define SWIG_pkg_name        "helics"
#define SwigVar_mxArray mxArray*


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Workaround, Octave's mex.h lacks uint64_t */
#include <stdint.h>
/* MATLAB's C-API */
#include <mex.h>
/* MISC C libraries */
#include <math.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <limits.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Last error */
static int SWIG_lasterror_code = 0;
static char SWIG_lasterror_msg[65536];
SWIGRUNTIME void SWIG_Error(int code, const char *format, ...) {
  SWIG_lasterror_code = code;
  va_list arg;
  va_start(arg, format);
  vsnprintf(SWIG_lasterror_msg, sizeof(SWIG_lasterror_msg), format, arg);
  va_end(arg);
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME int SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs) {
    SWIG_Error(SWIG_RuntimeError, "function %s takes at most %i arguments", func_name, max_args);
  } else if (num_args < min_args) {
    SWIG_Error(SWIG_RuntimeError, "function %s requires at least %i arguments", func_name, min_args);
  } else {
    return 1;
  }
  return 0;
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata)                      SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Matlab_SetModule(pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Pointer to C/C++ object, including type information and reference counters */
typedef struct SwigPtr {
  void *ptr;
  swig_type_info *type;
  int own;
  void *self;
  struct SwigPtr* next;
} SwigPtr;
static swig_module_info *saved_swig_module = 0;

/* Add new pointer object to the memory allocator
   Returns the location of the new element by reference and a return flag by value.
 */
int SWIG_Matlab_NewPointer(SwigPtr** swig_ptr, void *ptr, swig_type_info *type, int own) {
  /* Check input arguments */
  if (!swig_ptr || !type) return 1;

  /* Allocate memory */
  SwigPtr *obj=(SwigPtr *)malloc(sizeof(SwigPtr));
  if (!obj) return 1;

  /* Initialize object */
  obj->ptr = ptr;
  obj->type = type;
  obj->own = own;
  obj->self = obj;
  obj->next = 0;

  /* Return memory reference and successful return */
  *swig_ptr = obj;
  return 0;
}

/* Free pointer object
   Returns a void* with the object to be freed (if any)
 */
void* SWIG_Matlab_DeletePointer(SwigPtr* p) {
  /* Quick return if null pointer? */
  if (p==0) return 0;

  /* Clear and free */
  void* ret = p->own ? p->ptr : 0;
  p->ptr=0;
  p->type=0;
  p->own=0;
  p->self=0;
  p->next=0;
  free(p);
  return ret;
}

/* This should probably be moved somewhere else */
#ifdef __cplusplus
extern "C"
#endif /* cplusplus */
void SWIG_Matlab_ExitFcn(void) {
  /* Unused at the moment */
}

SWIGRUNTIME int
SWIG_Matlab_CallInterp(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  return mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
#else
  mxArray* ex = mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
  if (ex) {
    mxDestroyArray(ex);
    return 1;
  } else {
    return 0;
  }
#endif
}

SWIGRUNTIME mxArray*
SWIG_Matlab_CallInterpEx(int nlhs, mxArray *plhs[], int nrhs,
                       mxArray *prhs[], const char *functionName) {
#ifdef HAVE_OCTAVE
  int flag = mexCallMATLAB(nlhs, plhs, nrhs, prhs, functionName);
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:CallInterpEx","Not implemented for Octave");
  }
  return 0;
#else
  return mexCallMATLABWithTrap(nlhs, plhs, nrhs, prhs, functionName);
#endif
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Matlab_ConvertPacked(mxArray* SWIGUNUSEDPARM(pm), void* SWIGUNUSEDPARM(ptr), size_t SWIGUNUSEDPARM(sz), swig_type_info* SWIGUNUSEDPARM(ty)) {
  mexErrMsgIdAndTxt("SWIG:ConvertPacked","Not implemented");
  return SWIG_ERROR;
}

/* Runtime API implementation */
SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  /* Ownership? */
  int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;

  /* Allocate a pointer object */
  SwigPtr* swig_ptr = 0;
  if (SWIG_Matlab_NewPointer(&swig_ptr, ptr, type, own)) {
    mexErrMsgIdAndTxt("SWIG:NewPointerObj","Cannot allocate pointer");
  }

  /* Create a SwigRef instance */
  mxArray* pm = 0;
  int ex = SWIG_Matlab_CallInterp(1, &pm, 0, 0, "SwigRef");
  if (ex) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "Cannot create SwigRef instance");

  /* Set pointer property */
  mxArray *pm_ptr = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ptr) = (uint64_T)swig_ptr;
  if(!pm_ptr) mexErrMsgIdAndTxt("SWIG:NewPointerObj", "mxCreateNumericMatrix failed");

  mxArray *rhs[2] = {pm, pm_ptr};
  mexCallMATLAB(0, 0, 2, rhs, "SwigSet");
  mxDestroyArray(pm_ptr);

  /* Create a proxy class of the desired type */
  if (type->clientdata) {
    const char* matlab_classname = (const char *)type->clientdata;
    mxArray* pm_test = 0;
    ex = SWIG_Matlab_CallInterp(1, &pm_test, 1, &pm, matlab_classname);
    if (ex) {
      mexWarnMsgIdAndTxt("SWIG:NewPointerObj",
                         "NewPointerObj problem. creating SwigRef as opposed to %s", matlab_classname);
    } else {
      mxDestroyArray(pm);
      pm = pm_test;
    }
  }

  return pm;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE mxArray*
SWIG_Matlab_NewPackedObj(void* SWIGUNUSEDPARM(ptr), size_t SWIGUNUSEDPARM(sz), swig_type_info* SWIGUNUSEDPARM(type)) {
  mexErrMsgIdAndTxt("SWIG:NewPackedOb","Not implemented");
  return 0;
}

SWIGRUNTIME int SWIG_Matlab_isOwned(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  return p ? p->own : 0;
}

SWIGRUNTIME SwigPtr* SWIG_Matlab_getSwigPtr(mxArray* pm) {
/* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)) {
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return 0;
  }
  SwigPtr* p = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Consistency check */
  if (p->self != p) return 0;

  /* Get pointer object */
  return p;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  /* Get index, represented as a uint64_T scalar */
  mxArray *pm_ptr;
  mexCallMATLAB(1, &pm_ptr, 1, &pm, "SwigGet");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 ||
     mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)){
    if(pm_ptr) mxDestroyArray(pm_ptr);
    return SWIG_ERROR;
  }
  SwigPtr* swig_ptr = (SwigPtr*)(*(uint64_T*)mxGetData(pm_ptr));
  mxDestroyArray(pm_ptr);

  /* Get pointer object */
  if (!swig_ptr) return SWIG_ERROR;

  swig_cast_info *tc;
  int same_type = 0;
  SwigPtr* p=swig_ptr;
  while (p) {
    /* Loop over types */
    swig_type_info *p_type = p->type;

    /* No type cast needed */
    if (p_type==type || !type) {
      same_type = 1;
      break;
    }

    /* Check if type conversion is possible */
    tc = SWIG_TypeCheck(p_type->name, type);
    if (tc) break;

    /* Check next type */
    p = p->next;
  }

  /* Conversion not possible */
  if (!same_type && !tc) return SWIG_ERROR;

  /* Get data */
  if (ptr) *ptr = p->ptr;
  if (own) *own = p->own;

  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    SWIG_Matlab_DeletePointer(swig_ptr);
  }

  /* No type cast needed */
  if (same_type || !ptr) {
    return SWIG_OK;
  }

  /* Do type-cast */
  int newmemory = 0;
  *ptr = SWIG_TypeCast(tc, *ptr, &newmemory);
  if (newmemory == SWIG_CAST_NEW_MEMORY) {
    if (own) {
      *own = *own | SWIG_CAST_NEW_MEMORY;
    } else {
      /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
      mexErrMsgIdAndTxt("SWIG:ConvertPointerObj","SWIG error in converting pointer for type %s. Bad typemap?",type->name);
      return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  if (!saved_swig_module) {
    /* First call for this module, fetch pointer from MATLAB */
    mxArray* mem = 0;
    int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
    if (flag || !mem) mexErrMsgIdAndTxt("SWIG:GetModule", "Cannot call SwigMem");
    /* On first call, mem is an empty matrix */
    if (mxGetNumberOfElements(mem)!= 0) {
      if (!mxIsStruct(mem)) {
        mexErrMsgIdAndTxt("SWIG:GetModule", "Corrupted memory");
      }
      mxArray *module = mxGetField(mem, 0,
        "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
      if (module && mxGetNumberOfElements(module) == 1 && mxGetClassID(module) == mxUINT64_CLASS && !mxIsComplex(module)) {
        /* Cast memory as a pointer */
        saved_swig_module = (swig_module_info*)(*(uint64_T*)mxGetData(module));
      }
    }
    mxDestroyArray(mem);
  }
  return saved_swig_module;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(swig_module_info *pointer) {
  mxArray* mem = 0;
  const char *fields[1] = {"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME};
  int flag = mexCallMATLAB(1, &mem, 0, 0, "SwigMem");
  if (flag || !mem) mexErrMsgIdAndTxt("SWIG:SetModule", "Cannot call SwigMem");
  /* Under normal circumstances, swigMem is an empty matrix */
  /* but is not required to be for a valid call to SWIG_Matlab_SetModule() */
  if (mxGetNumberOfElements(mem) == 0) {
    mxDestroyArray(mem);
    mem = mxCreateStructMatrix(1,1,1,fields);
    if(!mem) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateStructMatrix failed");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetField(mem, 0, fields[0], module);
  } else {
    int nfields = 0;
    int fieldNum = 0;
    /* Add to existing mem if not the same */
    if (!mxIsStruct(mem)) {
      mexErrMsgIdAndTxt("SWIG:SetModule", "Corrupted memory");
    }
    nfields = mxGetNumberOfFields(mem);
    /* Check if same type table */
    int ii;
    for (ii=0; ii<nfields; ++ii){
      if(strcmp(mxGetFieldNameByNumber(mem, ii), fields[0]) == 0) {
        mxDestroyArray(mem);
        return;
      }
    }
    fieldNum = mxAddField(mem, fields[0]);
    if (fieldNum < 0) mexErrMsgIdAndTxt("SWIG:SetModule", "Error adding field to SwigMem");
    mxArray *module = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
    if(!module) mexErrMsgIdAndTxt("SWIG:SetModule","mxCreateNumericMatrix failed");
    *(uint64_T *)mxGetData(module) = (uint64_T)pointer;
    mxSetFieldByNumber(mem, 0, fieldNum, module);
  }
  /* Set variable in SwigMem */
  flag = mexCallMATLAB(0, 0, 1, &mem, "SwigMem");
  mxDestroyArray(mem);
  if (flag) {
    mexErrMsgIdAndTxt("SWIG:SetModule", "Could not set variable in SwigMem.\n");
  }
  saved_swig_module = pointer;
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)

#ifdef __cplusplus
#include <streambuf>
#include <iostream>
namespace swig {
  // Stream buffer to allow redirecting output to MATLAB
  class SWIG_Matlab_streambuf : public std::streambuf {
  public:
    SWIG_Matlab_streambuf() {}
  protected:
    virtual int_type overflow(int_type ch) {
      if(ch != traits_type::eof()) {
        mexPrintf("%c", static_cast<char>(ch));
      }
      return ch;
    }
    virtual std::streamsize xsputn(const char* s, std::streamsize num) {
      // Pass straight to mexPrintf without buffering
      mexPrintf("%.*s", static_cast<int>(num), s);
      return num;
    }
  };

  // Instantiation
  static SWIG_Matlab_streambuf SWIG_Matlab_buf;
} // namespace swig
#endif /* cplusplus */



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_HelicsComplex swig_types[0]
#define SWIGTYPE_p_HelicsCoreFlags swig_types[1]
#define SWIGTYPE_p_HelicsCoreTypes swig_types[2]
#define SWIGTYPE_p_HelicsDataTypes swig_types[3]
#define SWIGTYPE_p_HelicsError swig_types[4]
#define SWIGTYPE_p_HelicsErrorTypes swig_types[5]
#define SWIGTYPE_p_HelicsFederateFlags swig_types[6]
#define SWIGTYPE_p_HelicsFederateState swig_types[7]
#define SWIGTYPE_p_HelicsFilterTypes swig_types[8]
#define SWIGTYPE_p_HelicsFlags swig_types[9]
#define SWIGTYPE_p_HelicsHandleOptions swig_types[10]
#define SWIGTYPE_p_HelicsIterationRequest swig_types[11]
#define SWIGTYPE_p_HelicsIterationResult swig_types[12]
#define SWIGTYPE_p_HelicsLogLevels swig_types[13]
#define SWIGTYPE_p_HelicsMultiInputModes swig_types[14]
#define SWIGTYPE_p_HelicsProperties swig_types[15]
#define SWIGTYPE_p_HelicsSequencingModes swig_types[16]
#define SWIGTYPE_p_char swig_types[17]
#define SWIGTYPE_p_double swig_types[18]
#define SWIGTYPE_p_int swig_types[19]
#define SWIGTYPE_p_int32_t swig_types[20]
#define SWIGTYPE_p_p_char swig_types[21]
#define SWIGTYPE_p_void swig_types[22]
static swig_type_info *swig_types[24];
static swig_module_info swig_module = {swig_types, 23, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include "helics/helics.h"
/* throw a helics error */
static void throwHelicsMatlabError(HelicsError *err) {
  switch (err->error_code)
  {
  case HELICS_OK:
    return;
  case HELICS_ERROR_REGISTRATION_FAILURE:
    mexErrMsgIdAndTxt( "helics:registration_failure", err->message);
    break;
  case   HELICS_ERROR_CONNECTION_FAILURE:
  mexErrMsgIdAndTxt( "helics:connection_failure", err->message);
    break;
  case   HELICS_ERROR_INVALID_OBJECT:
  mexErrMsgIdAndTxt( "helics:invalid_object", err->message);
    break;
  case   HELICS_ERROR_INVALID_ARGUMENT:
  mexErrMsgIdAndTxt( "helics:invalid_argument", err->message);
    break;
  case   HELICS_ERROR_DISCARD:
  mexErrMsgIdAndTxt( "helics:discard", err->message);
    break;
  case HELICS_ERROR_SYSTEM_FAILURE:
    mexErrMsgIdAndTxt( "helics:system_failure", err->message);
    break;
  case   HELICS_ERROR_INVALID_STATE_TRANSITION:
  mexErrMsgIdAndTxt( "helics:invalid_state_transition", err->message);
    break;
  case   HELICS_ERROR_INVALID_FUNCTION_CALL:
  mexErrMsgIdAndTxt( "helics:invalid_function_call", err->message);
    break;
  case   HELICS_ERROR_EXECUTION_FAILURE:
  mexErrMsgIdAndTxt( "helics:execution_failure", err->message);
    break;
  case   HELICS_ERROR_INSUFFICIENT_SPACE:
    mexErrMsgIdAndTxt( "helics:insufficient_space", err->message);
    break;
  case   HELICS_ERROR_OTHER:
  case   HELICS_ERROR_EXTERNAL_TYPE:
  default:
  mexErrMsgIdAndTxt( "helics:error", err->message);
    break;
  }
}



#include "helics/helics.h"


  SWIGINTERNINLINE mxArray* SWIG_From_long    (long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


  SWIGINTERNINLINE mxArray* SWIG_From_double    (double value)
    {    
      return mxCreateDoubleScalar(value);
    }


  SWIGINTERN int SWIG_AsVal_double (mxArray* pm, double* val)
    {
      if(!mxIsDouble(pm) || mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      if (val) *val = mxGetScalar(pm);
      return SWIG_OK;
    }


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE mxArray*
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
   mwSize dims[2] = {1,(mwSize)size};
   mxArray* ret = mxCreateCharArray((mwSize)2,dims);
   if(!ret) mexErrMsgIdAndTxt("SWIG:FromCharPtrAndSize","mxCreateCharArray failed");
   mxChar *ret_data = (mxChar *)mxGetData(ret);
   size_t i;
   for(i=0; i<size; ++i) ret_data[i] = carray[i];
   return ret;  
}


SWIGINTERNINLINE mxArray* 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  SWIGINTERN int SWIG_AsVal_long (mxArray* pm, long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_int (mxArray* obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(mxArray* pm, char** cptr, size_t* psize, int *alloc)
{
  if(!mxIsChar(pm) || (mxGetNumberOfElements(pm) != 0 && mxGetM(pm)!=1)) return SWIG_TypeError;
  size_t len=mxGetN(pm);
  static char buf[256];
  int flag = mxGetString(pm,buf,(mwSize)sizeof(buf));
  if(flag) return SWIG_TypeError;

  if (alloc) {
    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), buf, sizeof(char)*(len + 1)));
    *alloc = SWIG_NEWOBJ;
  } else if (cptr)
    *cptr = buf;
  if (psize)
    *psize = len + 1;
  return SWIG_OK;
}





SWIGINTERN int
SWIG_AsCharArray(mxArray* obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (mxArray* obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


  SWIGINTERN int SWIG_AsVal_long_SS_long (mxArray* pm, long long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


  SWIGINTERNINLINE mxArray* SWIG_From_long_SS_long    (long long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}

SWIGINTERN int _wrap_HELICS_INVALID_OPTION_INDEX_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(HELICS_INVALID_OPTION_INDEX));
  return 0;
}


SWIGINTERN int _wrap_HELICS_TIME_ZERO_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_double(static_cast< double >(HELICS_TIME_ZERO));
  return 0;
}


SWIGINTERN int _wrap_HELICS_TIME_EPSILON_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_double(static_cast< double >(HELICS_TIME_EPSILON));
  return 0;
}


SWIGINTERN int _wrap_HELICS_TIME_INVALID_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_double(static_cast< double >(HELICS_TIME_INVALID));
  return 0;
}


SWIGINTERN int _wrap_HELICS_TIME_MAXTIME_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_double(static_cast< double >(HELICS_TIME_MAXTIME));
  return 0;
}


SWIGINTERN int _wrap_HELICS_TRUE_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(HELICS_TRUE));
  return 0;
}


SWIGINTERN int _wrap_HELICS_FALSE_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  resv[0] = SWIG_From_int(static_cast< int >(HELICS_FALSE));
  return 0;
}


int _wrap_HelicsComplex_real_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsComplex *arg1 = (HelicsComplex *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HelicsComplex_real_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_HelicsComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelicsComplex_real_set" "', argument " "1"" of type '" "HelicsComplex *""'"); 
  }
  arg1 = reinterpret_cast< HelicsComplex * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HelicsComplex_real_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->real = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HelicsComplex_real_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsComplex *arg1 = (HelicsComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("HelicsComplex_real_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_HelicsComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelicsComplex_real_get" "', argument " "1"" of type '" "HelicsComplex *""'"); 
  }
  arg1 = reinterpret_cast< HelicsComplex * >(argp1);
  result = (double) ((arg1)->real);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HelicsComplex_imag_set(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsComplex *arg1 = (HelicsComplex *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("HelicsComplex_imag_set",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_HelicsComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelicsComplex_imag_set" "', argument " "1"" of type '" "HelicsComplex *""'"); 
  }
  arg1 = reinterpret_cast< HelicsComplex * >(argp1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HelicsComplex_imag_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->imag = arg2;
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_HelicsComplex_imag_get(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsComplex *arg1 = (HelicsComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("HelicsComplex_imag_get",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_HelicsComplex, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HelicsComplex_imag_get" "', argument " "1"" of type '" "HelicsComplex *""'"); 
  }
  arg1 = reinterpret_cast< HelicsComplex * >(argp1);
  result = (double) ((arg1)->imag);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_new_HelicsComplex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  HelicsComplex *result = 0 ;
  
  if (!SWIG_check_num_args("new_HelicsComplex",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (HelicsComplex *)new HelicsComplex();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HelicsComplex, 1 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_delete_HelicsComplex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsComplex *arg1 = (HelicsComplex *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  int is_owned;
  if (!SWIG_check_num_args("delete_HelicsComplex",argc,1,1,0)) {
    SWIG_fail;
  }
  is_owned = SWIG_Matlab_isOwned(argv[0]);
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_HelicsComplex, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HelicsComplex" "', argument " "1"" of type '" "HelicsComplex *""'"); 
  }
  arg1 = reinterpret_cast< HelicsComplex * >(argp1);
  if (is_owned) {
    delete arg1;
  }
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsGetVersion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsGetVersion",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (char *)helicsGetVersion();
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsGetBuildFlags(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsGetBuildFlags",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (char *)helicsGetBuildFlags();
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsGetCompilerVersion(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsGetCompilerVersion",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (char *)helicsGetCompilerVersion();
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsLoadSignalHandler(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsLoadSignalHandler",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  helicsLoadSignalHandler();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsClearSignalHandler(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsClearSignalHandler",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  helicsClearSignalHandler();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsAbort(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsAbort",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "helicsAbort" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsAbort" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsAbort(arg1,(char const *)arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_helicsIsCoreTypeAvailable(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsIsCoreTypeAvailable",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsIsCoreTypeAvailable" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (HelicsBool)helicsIsCoreTypeAvailable((char const *)arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_helicsCreateCore(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsCore result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCreateCore",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCore" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateCore" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCreateCore" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsCore)helicsCreateCore((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCreateCoreFromArgs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsCore result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsCreateCoreFromArgs",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCoreFromArgs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateCoreFromArgs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    /* Check if is a list */
    if (mxIsCell(argv[2])) {
      int ii;
      int allocation2=0;
      char *buffer_cell=NULL;
      int cellSize=static_cast<int>(mxGetNumberOfElements(argv[2]));
      arg4 = (char **) malloc((cellSize+1)*sizeof(char *));
      for (ii=0;ii<cellSize;++ii)
      {
        mxArray *cellElement=mxGetCell(argv[2], ii);
        int resCode = SWIG_AsCharPtrAndSize(cellElement, &buffer_cell, NULL, &allocation2);
        if (!SWIG_IsOK(resCode)) {
          SWIG_exception_fail(SWIG_ArgError(resCode), "cell elements must be a string");
        }
        arg4[ii+1]=buffer_cell;
      }
      
    }
    else if (mxIsChar(argv[2]))
    {
      int retval=0;
      char *buffer=NULL;
      int allocation=0;
      arg3=2;
      arg4 = (char **) malloc(2*sizeof(char *));
      retval = SWIG_AsCharPtrAndSize(argv[2], &buffer, NULL, &allocation);
      if (!SWIG_IsOK(retval)) {
        SWIG_exception_fail(SWIG_ArgError(retval), "conversion to string failed");
      }
      arg4[0]=buffer;
      arg4[1]=buffer;
    }
    else
    {
      SWIG_exception_fail(SWIG_ArgError(3), "argument must be a cell array or string");
      return NULL;
    }
  }
  result = (HelicsCore)helicsCreateCoreFromArgs((char const *)arg1,(char const *)arg2,arg3,(char const *const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    free((char **) arg4);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    free((char **) arg4);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsCoreClone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsCore result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsCoreClone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreClone" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  result = (HelicsCore)helicsCoreClone(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsCoreIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsCoreIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreIsValid" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  result = (HelicsBool)helicsCoreIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCreateBroker(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsBroker result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCreateBroker",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateBroker" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateBroker" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCreateBroker" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsBroker)helicsCreateBroker((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCreateBrokerFromArgs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 = (char **) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsBroker result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsCreateBrokerFromArgs",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateBrokerFromArgs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateBrokerFromArgs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    /* Check if is a list */
    if (mxIsCell(argv[2])) {
      int ii;
      int allocation2=0;
      char *buffer_cell=NULL;
      int cellSize=static_cast<int>(mxGetNumberOfElements(argv[2]));
      arg4 = (char **) malloc((cellSize+1)*sizeof(char *));
      for (ii=0;ii<cellSize;++ii)
      {
        mxArray *cellElement=mxGetCell(argv[2], ii);
        int resCode = SWIG_AsCharPtrAndSize(cellElement, &buffer_cell, NULL, &allocation2);
        if (!SWIG_IsOK(resCode)) {
          SWIG_exception_fail(SWIG_ArgError(resCode), "cell elements must be a string");
        }
        arg4[ii+1]=buffer_cell;
      }
      
    }
    else if (mxIsChar(argv[2]))
    {
      int retval=0;
      char *buffer=NULL;
      int allocation=0;
      arg3=2;
      arg4 = (char **) malloc(2*sizeof(char *));
      retval = SWIG_AsCharPtrAndSize(argv[2], &buffer, NULL, &allocation);
      if (!SWIG_IsOK(retval)) {
        SWIG_exception_fail(SWIG_ArgError(retval), "conversion to string failed");
      }
      arg4[0]=buffer;
      arg4[1]=buffer;
    }
    else
    {
      SWIG_exception_fail(SWIG_ArgError(3), "argument must be a cell array or string");
      return NULL;
    }
  }
  result = (HelicsBroker)helicsCreateBrokerFromArgs((char const *)arg1,(char const *)arg2,arg3,(char const *const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    free((char **) arg4);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    free((char **) arg4);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsBrokerClone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsBroker result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsBrokerClone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerClone" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  result = (HelicsBroker)helicsBrokerClone(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsBrokerIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsBrokerIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerIsValid" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  result = (HelicsBool)helicsBrokerIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsBrokerIsConnected(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsBrokerIsConnected",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerIsConnected" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  result = (HelicsBool)helicsBrokerIsConnected(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsBrokerDataLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsBrokerDataLink",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerDataLink" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerDataLink" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsBrokerDataLink" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsBrokerDataLink(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsBrokerAddSourceFilterToEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsBrokerAddSourceFilterToEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerAddSourceFilterToEndpoint" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerAddSourceFilterToEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsBrokerAddSourceFilterToEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsBrokerAddSourceFilterToEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsBrokerAddDestinationFilterToEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsBrokerAddDestinationFilterToEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerAddDestinationFilterToEndpoint" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerAddDestinationFilterToEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsBrokerAddDestinationFilterToEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsBrokerAddDestinationFilterToEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsBrokerMakeConnections(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsBrokerMakeConnections",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerMakeConnections" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerMakeConnections" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsBrokerMakeConnections(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsCoreWaitForDisconnect(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsBool result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsCoreWaitForDisconnect",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreWaitForDisconnect" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsCoreWaitForDisconnect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsBool)helicsCoreWaitForDisconnect(arg1,arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsBrokerWaitForDisconnect(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsBool result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsBrokerWaitForDisconnect",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerWaitForDisconnect" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsBrokerWaitForDisconnect" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsBool)helicsBrokerWaitForDisconnect(arg1,arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsCoreIsConnected(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsCoreIsConnected",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreIsConnected" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  result = (HelicsBool)helicsCoreIsConnected(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCoreDataLink(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCoreDataLink",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreDataLink" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreDataLink" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreDataLink" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsCoreDataLink(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCoreAddSourceFilterToEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCoreAddSourceFilterToEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreAddSourceFilterToEndpoint" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreAddSourceFilterToEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreAddSourceFilterToEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsCoreAddSourceFilterToEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCoreAddDestinationFilterToEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCoreAddDestinationFilterToEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreAddDestinationFilterToEndpoint" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreAddDestinationFilterToEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreAddDestinationFilterToEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsCoreAddDestinationFilterToEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCoreMakeConnections(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsCoreMakeConnections",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreMakeConnections" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreMakeConnections" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsCoreMakeConnections(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsBrokerGetIdentifier(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsBrokerGetIdentifier",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerGetIdentifier" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  result = (char *)helicsBrokerGetIdentifier(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCoreGetIdentifier(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsCoreGetIdentifier",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreGetIdentifier" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  result = (char *)helicsCoreGetIdentifier(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsBrokerGetAddress(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsBrokerGetAddress",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerGetAddress" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  result = (char *)helicsBrokerGetAddress(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCoreGetAddress(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsCoreGetAddress",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreGetAddress" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  result = (char *)helicsCoreGetAddress(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCoreSetReadyToInit(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsCoreSetReadyToInit",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreSetReadyToInit" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  helicsCoreSetReadyToInit(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsCoreConnect(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsBool result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsCoreConnect",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreConnect" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  result = (HelicsBool)helicsCoreConnect(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsCoreDisconnect(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsCoreDisconnect",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreDisconnect" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  helicsCoreDisconnect(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsGetFederateByName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsGetFederateByName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsGetFederateByName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (HelicsFederate)helicsGetFederateByName((char const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsBrokerDisconnect(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsBrokerDisconnect",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerDisconnect" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  helicsBrokerDisconnect(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateDestroy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsFederateDestroy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateDestroy" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateDestroy(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsBrokerDestroy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsBrokerDestroy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerDestroy" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  helicsBrokerDestroy(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCoreDestroy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsCoreDestroy",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreDestroy" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  helicsCoreDestroy(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCoreFree(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsCoreFree",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreFree" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  helicsCoreFree(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsBrokerFree(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsBrokerFree",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerFree" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  helicsBrokerFree(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCreateValueFederate(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  HelicsFederateInfo arg2 = (HelicsFederateInfo) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsCreateValueFederate",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateValueFederate" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateValueFederate" "', argument " "2"" of type '" "HelicsFederateInfo""'"); 
  }
  result = (HelicsFederate)helicsCreateValueFederate((char const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsCreateValueFederateFromConfig(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsCreateValueFederateFromConfig",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateValueFederateFromConfig" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (HelicsFederate)helicsCreateValueFederateFromConfig((char const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsCreateMessageFederate(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  HelicsFederateInfo arg2 = (HelicsFederateInfo) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsCreateMessageFederate",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateMessageFederate" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateMessageFederate" "', argument " "2"" of type '" "HelicsFederateInfo""'"); 
  }
  result = (HelicsFederate)helicsCreateMessageFederate((char const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsCreateMessageFederateFromConfig(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsCreateMessageFederateFromConfig",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateMessageFederateFromConfig" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (HelicsFederate)helicsCreateMessageFederateFromConfig((char const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsCreateCombinationFederate(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  HelicsFederateInfo arg2 = (HelicsFederateInfo) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsCreateCombinationFederate",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCombinationFederate" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateCombinationFederate" "', argument " "2"" of type '" "HelicsFederateInfo""'"); 
  }
  result = (HelicsFederate)helicsCreateCombinationFederate((char const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsCreateCombinationFederateFromConfig(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsCreateCombinationFederateFromConfig",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateCombinationFederateFromConfig" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (HelicsFederate)helicsCreateCombinationFederateFromConfig((char const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateClone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsFederate result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateClone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateClone" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsFederate)helicsFederateClone(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsCreateFederateInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  HelicsFederateInfo result;
  
  if (!SWIG_check_num_args("helicsCreateFederateInfo",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  result = (HelicsFederateInfo)helicsCreateFederateInfo();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateInfoClone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsFederateInfo result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateInfoClone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoClone" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  result = (HelicsFederateInfo)helicsFederateInfoClone(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoLoadFromArgs(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateInfoLoadFromArgs",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoLoadFromArgs" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  {
    /* Check if is a list */
    if (mxIsCell(argv[1])) {
      int ii;
      int allocation2=0;
      char *buffer_cell=NULL;
      int cellSize=static_cast<int>(mxGetNumberOfElements(argv[1]));
      arg3 = (char **) malloc((cellSize+1)*sizeof(char *));
      for (ii=0;ii<cellSize;++ii)
      {
        mxArray *cellElement=mxGetCell(argv[1], ii);
        int resCode = SWIG_AsCharPtrAndSize(cellElement, &buffer_cell, NULL, &allocation2);
        if (!SWIG_IsOK(resCode)) {
          SWIG_exception_fail(SWIG_ArgError(resCode), "cell elements must be a string");
        }
        arg3[ii+1]=buffer_cell;
      }
      
    }
    else if (mxIsChar(argv[1]))
    {
      int retval=0;
      char *buffer=NULL;
      int allocation=0;
      arg2=2;
      arg3 = (char **) malloc(2*sizeof(char *));
      retval = SWIG_AsCharPtrAndSize(argv[1], &buffer, NULL, &allocation);
      if (!SWIG_IsOK(retval)) {
        SWIG_exception_fail(SWIG_ArgError(retval), "conversion to string failed");
      }
      arg3[0]=buffer;
      arg3[1]=buffer;
    }
    else
    {
      SWIG_exception_fail(SWIG_ArgError(3), "argument must be a cell array or string");
      return NULL;
    }
  }
  helicsFederateInfoLoadFromArgs(arg1,arg2,(char const *const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    free((char **) arg3);
  }
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    free((char **) arg3);
  }
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoFree(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsFederateInfoFree",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoFree" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  helicsFederateInfoFree(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsFederateIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateIsValid" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsBool)helicsFederateIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateInfoSetCoreName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreName",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreName" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetCoreName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateInfoSetCoreName(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetCoreInitString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreInitString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreInitString" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetCoreInitString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateInfoSetCoreInitString(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetBrokerInitString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetBrokerInitString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetBrokerInitString" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetBrokerInitString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateInfoSetBrokerInitString(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetCoreType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreType",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreType" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetCoreType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  helicsFederateInfoSetCoreType(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetCoreTypeFromString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetCoreTypeFromString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetCoreTypeFromString" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetCoreTypeFromString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateInfoSetCoreTypeFromString(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetBroker(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetBroker",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetBroker" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetBroker" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateInfoSetBroker(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetBrokerKey(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetBrokerKey",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetBrokerKey" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetBrokerKey" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateInfoSetBrokerKey(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetBrokerPort(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetBrokerPort",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetBrokerPort" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetBrokerPort" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  helicsFederateInfoSetBrokerPort(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetLocalPort(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetLocalPort",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetLocalPort" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateInfoSetLocalPort" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateInfoSetLocalPort(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsGetPropertyIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsGetPropertyIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsGetPropertyIndex" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (int)helicsGetPropertyIndex((char const *)arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_helicsGetFlagIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsGetFlagIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsGetFlagIndex" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (int)helicsGetFlagIndex((char const *)arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_helicsGetOptionIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsGetOptionIndex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsGetOptionIndex" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (int)helicsGetOptionIndex((char const *)arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_helicsGetOptionValue(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsGetOptionValue",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsGetOptionValue" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (int)helicsGetOptionValue((char const *)arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return 1;
}


int _wrap_helicsFederateInfoSetFlagOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  int arg2 ;
  HelicsBool arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetFlagOption",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetFlagOption" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetFlagOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateInfoSetFlagOption" "', argument " "3"" of type '" "HelicsBool""'");
  } 
  arg3 = static_cast< HelicsBool >(val3);
  helicsFederateInfoSetFlagOption(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetSeparator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  char arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  char val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetSeparator",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetSeparator" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetSeparator" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  helicsFederateInfoSetSeparator(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetTimeProperty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  int arg2 ;
  HelicsTime arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetTimeProperty",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetTimeProperty" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetTimeProperty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateInfoSetTimeProperty" "', argument " "3"" of type '" "HelicsTime""'");
  } 
  arg3 = static_cast< HelicsTime >(val3);
  helicsFederateInfoSetTimeProperty(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateInfoSetIntegerProperty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederateInfo arg1 = (HelicsFederateInfo) 0 ;
  int arg2 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateInfoSetIntegerProperty",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateInfoSetIntegerProperty" "', argument " "1"" of type '" "HelicsFederateInfo""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateInfoSetIntegerProperty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateInfoSetIntegerProperty" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  helicsFederateInfoSetIntegerProperty(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterInterfaces(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterInterfaces",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterInterfaces" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterInterfaces" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateRegisterInterfaces(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGlobalError(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateGlobalError",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGlobalError" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGlobalError" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateGlobalError" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFederateGlobalError(arg1,arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateLocalError(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateLocalError",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateLocalError" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateLocalError" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateLocalError" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFederateLocalError(arg1,arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateFinalize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateFinalize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateFinalize" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateFinalize(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateFinalizeAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateFinalizeAsync",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateFinalizeAsync" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateFinalizeAsync(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateFinalizeComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateFinalizeComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateFinalizeComplete" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateFinalizeComplete(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateDisconnect(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateDisconnect",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateDisconnect" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateDisconnect(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateDisconnectAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateDisconnectAsync",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateDisconnectAsync" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateDisconnectAsync(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateDisconnectComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateDisconnectComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateDisconnectComplete" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateDisconnectComplete(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateFree(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsFederateFree",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateFree" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateFree(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCloseLibrary(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsCloseLibrary",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  helicsCloseLibrary();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateEnterInitializingMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateEnterInitializingMode",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterInitializingMode" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateEnterInitializingMode(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterInitializingModeAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateEnterInitializingModeAsync",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterInitializingModeAsync" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateEnterInitializingModeAsync(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateIsAsyncOperationCompleted(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsBool result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateIsAsyncOperationCompleted",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateIsAsyncOperationCompleted" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsBool)helicsFederateIsAsyncOperationCompleted(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterInitializingModeComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateEnterInitializingModeComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterInitializingModeComplete" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateEnterInitializingModeComplete(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterExecutingMode(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateEnterExecutingMode",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutingMode" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateEnterExecutingMode(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterExecutingModeAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateEnterExecutingModeAsync",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutingModeAsync" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateEnterExecutingModeAsync(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterExecutingModeComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateEnterExecutingModeComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutingModeComplete" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateEnterExecutingModeComplete(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterExecutingModeIterative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsIterationRequest arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsIterationResult result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateEnterExecutingModeIterative",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutingModeIterative" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateEnterExecutingModeIterative" "', argument " "2"" of type '" "HelicsIterationRequest""'");
  } 
  arg2 = static_cast< HelicsIterationRequest >(val2);
  result = (HelicsIterationResult)helicsFederateEnterExecutingModeIterative(arg1,arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterExecutingModeIterativeAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsIterationRequest arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateEnterExecutingModeIterativeAsync",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutingModeIterativeAsync" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateEnterExecutingModeIterativeAsync" "', argument " "2"" of type '" "HelicsIterationRequest""'");
  } 
  arg2 = static_cast< HelicsIterationRequest >(val2);
  helicsFederateEnterExecutingModeIterativeAsync(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateEnterExecutingModeIterativeComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsIterationResult result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateEnterExecutingModeIterativeComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateEnterExecutingModeIterativeComplete" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsIterationResult)helicsFederateEnterExecutingModeIterativeComplete(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetState(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsFederateState result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateGetState",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetState" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsFederateState)helicsFederateGetState(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetCore(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsCore result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateGetCore",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetCore" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsCore)helicsFederateGetCore(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsTime arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsTime result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRequestTime",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTime" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTime" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  result = (HelicsTime)helicsFederateRequestTime(arg1,arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestTimeAdvance(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsTime arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsTime result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRequestTimeAdvance",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeAdvance" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTimeAdvance" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  result = (HelicsTime)helicsFederateRequestTimeAdvance(arg1,arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestNextStep(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsTime result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateRequestNextStep",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestNextStep" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsTime)helicsFederateRequestNextStep(arg1,arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestTimeIterative(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsTime arg2 ;
  HelicsIterationRequest arg3 ;
  HelicsIterationResult *arg4 = (HelicsIterationResult *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsIterationResult temp4 ;
  int res4 = SWIG_TMPOBJ ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsTime result;
  
  arg4 = &temp4;
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRequestTimeIterative",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeIterative" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTimeIterative" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRequestTimeIterative" "', argument " "3"" of type '" "HelicsIterationRequest""'");
  } 
  arg3 = static_cast< HelicsIterationRequest >(val3);
  result = (HelicsTime)helicsFederateRequestTimeIterative(arg1,arg2,arg3,arg4,arg5);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsTmpObj(res4)) {
    if (--resc>=0) *resv++ = SWIG_From_int((*arg4));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    if (--resc>=0) *resv++ = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_HelicsIterationResult, new_flags);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestTimeAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsTime arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRequestTimeAsync",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeAsync" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTimeAsync" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  helicsFederateRequestTimeAsync(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestTimeComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsTime result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateRequestTimeComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeComplete" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsTime)helicsFederateRequestTimeComplete(arg1,arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestTimeIterativeAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsTime arg2 ;
  HelicsIterationRequest arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRequestTimeIterativeAsync",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeIterativeAsync" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRequestTimeIterativeAsync" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRequestTimeIterativeAsync" "', argument " "3"" of type '" "HelicsIterationRequest""'");
  } 
  arg3 = static_cast< HelicsIterationRequest >(val3);
  helicsFederateRequestTimeIterativeAsync(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRequestTimeIterativeComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsIterationResult *arg2 = (HelicsIterationResult *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  HelicsIterationResult temp2 ;
  int res2 = SWIG_TMPOBJ ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsTime result;
  
  arg2 = &temp2;
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRequestTimeIterativeComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRequestTimeIterativeComplete" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsTime)helicsFederateRequestTimeIterativeComplete(arg1,arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  if (SWIG_IsTmpObj(res2)) {
    if (--resc>=0) *resv++ = SWIG_From_int((*arg2));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    if (--resc>=0) *resv++ = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_HelicsIterationResult, new_flags);
  }
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsFederateGetName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetName" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (char *)helicsFederateGetName(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateSetTimeProperty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsTime arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateSetTimeProperty",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetTimeProperty" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetTimeProperty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateSetTimeProperty" "', argument " "3"" of type '" "HelicsTime""'");
  } 
  arg3 = static_cast< HelicsTime >(val3);
  helicsFederateSetTimeProperty(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateSetFlagOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsBool arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateSetFlagOption",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetFlagOption" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetFlagOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateSetFlagOption" "', argument " "3"" of type '" "HelicsBool""'");
  } 
  arg3 = static_cast< HelicsBool >(val3);
  helicsFederateSetFlagOption(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateSetSeparator(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  char val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateSetSeparator",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetSeparator" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetSeparator" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  helicsFederateSetSeparator(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateSetIntegerProperty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateSetIntegerProperty",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetIntegerProperty" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateSetIntegerProperty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateSetIntegerProperty" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  helicsFederateSetIntegerProperty(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetTimeProperty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsTime result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetTimeProperty",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetTimeProperty" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGetTimeProperty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsTime)helicsFederateGetTimeProperty(arg1,arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetFlagOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsBool result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetFlagOption",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetFlagOption" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGetFlagOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsBool)helicsFederateGetFlagOption(arg1,arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetIntegerProperty(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  int result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetIntegerProperty",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetIntegerProperty" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGetIntegerProperty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)helicsFederateGetIntegerProperty(arg1,arg2,arg3);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetCurrentTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsTime result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateGetCurrentTime",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetCurrentTime" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsTime)helicsFederateGetCurrentTime(arg1,arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateSetGlobal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateSetGlobal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetGlobal" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateSetGlobal" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateSetGlobal" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFederateSetGlobal(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateSetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateSetTag",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetTag" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateSetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateSetTag" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFederateSetTag(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetTag",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetTag" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateGetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)helicsFederateGetTag(arg1,(char const *)arg2,arg3);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateAddDependency(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateAddDependency",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateAddDependency" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateAddDependency" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateAddDependency(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateSetLogFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateSetLogFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSetLogFile" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateSetLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateSetLogFile(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateLogErrorMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateLogErrorMessage",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateLogErrorMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateLogErrorMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateLogErrorMessage(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateLogWarningMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateLogWarningMessage",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateLogWarningMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateLogWarningMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateLogWarningMessage(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateLogInfoMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateLogInfoMessage",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateLogInfoMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateLogInfoMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateLogInfoMessage(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateLogDebugMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateLogDebugMessage",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateLogDebugMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateLogDebugMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateLogDebugMessage(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateLogLevelMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateLogLevelMessage",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateLogLevelMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateLogLevelMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateLogLevelMessage" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFederateLogLevelMessage(arg1,arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateSendCommand(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateSendCommand",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateSendCommand" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateSendCommand" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateSendCommand" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFederateSendCommand(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetCommand(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateGetCommand",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetCommand" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (char *)helicsFederateGetCommand(arg1,arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetCommandSource(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateGetCommandSource",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetCommandSource" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (char *)helicsFederateGetCommandSource(arg1,arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateWaitCommand(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateWaitCommand",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateWaitCommand" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (char *)helicsFederateWaitCommand(arg1,arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsCoreSetGlobal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCoreSetGlobal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreSetGlobal" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreSetGlobal" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreSetGlobal" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsCoreSetGlobal(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsBrokerSetGlobal(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsBrokerSetGlobal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerSetGlobal" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerSetGlobal" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsBrokerSetGlobal" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsBrokerSetGlobal(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCoreSendCommand(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCoreSendCommand",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreSendCommand" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreSendCommand" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreSendCommand" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsCoreSendCommand(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsBrokerSendCommand(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsBrokerSendCommand",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerSendCommand" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerSendCommand" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsBrokerSendCommand" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsBrokerSendCommand(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCoreSetLogFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsCoreSetLogFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreSetLogFile" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreSetLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsCoreSetLogFile(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsBrokerSetLogFile(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsBrokerSetLogFile",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerSetLogFile" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsBrokerSetLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsBrokerSetLogFile(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsBrokerSetTimeBarrier(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  HelicsTime arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsBrokerSetTimeBarrier",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerSetTimeBarrier" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsBrokerSetTimeBarrier" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  helicsBrokerSetTimeBarrier(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsBrokerClearTimeBarrier(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsBrokerClearTimeBarrier",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerClearTimeBarrier" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  helicsBrokerClearTimeBarrier(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsBrokerGlobalError(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsBroker arg1 = (HelicsBroker) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsBrokerGlobalError",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsBrokerGlobalError" "', argument " "1"" of type '" "HelicsBroker""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsBrokerGlobalError" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsBrokerGlobalError" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsBrokerGlobalError(arg1,arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCoreGlobalError(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCoreGlobalError",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreGlobalError" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsCoreGlobalError" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreGlobalError" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsCoreGlobalError(arg1,arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCreateQuery(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  HelicsQuery result;
  
  if (!SWIG_check_num_args("helicsCreateQuery",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_AsCharPtrAndSize(argv[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCreateQuery" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCreateQuery" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsQuery)helicsCreateQuery((char const *)arg1,(char const *)arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_helicsQueryExecute(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  HelicsFederate arg2 = (HelicsFederate) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsQueryExecute",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryExecute" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQueryExecute" "', argument " "2"" of type '" "HelicsFederate""'"); 
  }
  result = (char *)helicsQueryExecute(arg1,arg2,arg3);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsQueryCoreExecute(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  HelicsCore arg2 = (HelicsCore) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsQueryCoreExecute",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryCoreExecute" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQueryCoreExecute" "', argument " "2"" of type '" "HelicsCore""'"); 
  }
  result = (char *)helicsQueryCoreExecute(arg1,arg2,arg3);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsQueryBrokerExecute(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  HelicsBroker arg2 = (HelicsBroker) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsQueryBrokerExecute",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryBrokerExecute" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQueryBrokerExecute" "', argument " "2"" of type '" "HelicsBroker""'"); 
  }
  result = (char *)helicsQueryBrokerExecute(arg1,arg2,arg3);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsQueryExecuteAsync(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  HelicsFederate arg2 = (HelicsFederate) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsQueryExecuteAsync",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryExecuteAsync" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQueryExecuteAsync" "', argument " "2"" of type '" "HelicsFederate""'"); 
  }
  helicsQueryExecuteAsync(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsQueryExecuteComplete(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  char *result = 0 ;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsQueryExecuteComplete",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryExecuteComplete" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  result = (char *)helicsQueryExecuteComplete(arg1,arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsQueryIsCompleted(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsQueryIsCompleted",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryIsCompleted" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  result = (HelicsBool)helicsQueryIsCompleted(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsQuerySetTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsQuerySetTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQuerySetTarget" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQuerySetTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsQuerySetTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsQuerySetQueryString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsQuerySetQueryString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQuerySetQueryString" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQuerySetQueryString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsQuerySetQueryString(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsQuerySetOrdering(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  int32_t arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  void *argp2 ;
  int res2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsQuerySetOrdering",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQuerySetOrdering" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsQuerySetOrdering" "', argument " "2"" of type '" "int32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "helicsQuerySetOrdering" "', argument " "2"" of type '" "int32_t""'");
    } else {
      arg2 = *(reinterpret_cast< int32_t * >(argp2));
    }
  }
  helicsQuerySetOrdering(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsQueryFree(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsQuery arg1 = (HelicsQuery) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsQueryFree",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsQueryFree" "', argument " "1"" of type '" "HelicsQuery""'"); 
  }
  helicsQueryFree(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsCleanupLibrary(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsCleanupLibrary",argc,0,0,0)) {
    SWIG_fail;
  }
  (void)argv;
  helicsCleanupLibrary();
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateRegisterSubscription(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsInput result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterSubscription",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterSubscription" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterSubscription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterSubscription" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsInput)helicsFederateRegisterSubscription(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterPublication(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsDataTypes arg3 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterPublication",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterPublication" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterPublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterPublication" "', argument " "3"" of type '" "HelicsDataTypes""'");
  } 
  arg3 = static_cast< HelicsDataTypes >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterPublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsPublication)helicsFederateRegisterPublication(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterTypePublication(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterTypePublication",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterTypePublication" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterTypePublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterTypePublication" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterTypePublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsPublication)helicsFederateRegisterTypePublication(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalPublication(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsDataTypes arg3 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalPublication",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "3"" of type '" "HelicsDataTypes""'");
  } 
  arg3 = static_cast< HelicsDataTypes >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterGlobalPublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsPublication)helicsFederateRegisterGlobalPublication(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalTypePublication(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalTypePublication",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterGlobalTypePublication" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsPublication)helicsFederateRegisterGlobalTypePublication(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterInput(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsDataTypes arg3 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsInput result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterInput",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterInput" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterInput" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterInput" "', argument " "3"" of type '" "HelicsDataTypes""'");
  } 
  arg3 = static_cast< HelicsDataTypes >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterInput" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsInput)helicsFederateRegisterInput(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterTypeInput(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsInput result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterTypeInput",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterTypeInput" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterTypeInput" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterTypeInput" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterTypeInput" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsInput)helicsFederateRegisterTypeInput(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalInput(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsDataTypes arg3 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalInput",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalInput" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalInput" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFederateRegisterGlobalInput" "', argument " "3"" of type '" "HelicsDataTypes""'");
  } 
  arg3 = static_cast< HelicsDataTypes >(val3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterGlobalInput" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsPublication)helicsFederateRegisterGlobalInput(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalTypeInput(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalTypeInput",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalTypeInput" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalTypeInput" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterGlobalTypeInput" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(argv[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsFederateRegisterGlobalTypeInput" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  result = (HelicsPublication)helicsFederateRegisterGlobalTypeInput(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetPublication(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetPublication",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetPublication" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateGetPublication" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsPublication)helicsFederateGetPublication(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetPublicationByIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsPublication result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetPublicationByIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetPublicationByIndex" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGetPublicationByIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsPublication)helicsFederateGetPublicationByIndex(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetInput(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsInput result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetInput",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetInput" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateGetInput" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsInput)helicsFederateGetInput(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetInputByIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsInput result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetInputByIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetInputByIndex" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGetInputByIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsInput)helicsFederateGetInputByIndex(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetSubscription(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsInput result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetSubscription",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetSubscription" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateGetSubscription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsInput)helicsFederateGetSubscription(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateClearUpdates(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsFederateClearUpdates",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateClearUpdates" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateClearUpdates(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateRegisterFromPublicationJSON(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterFromPublicationJSON",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterFromPublicationJSON" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterFromPublicationJSON" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederateRegisterFromPublicationJSON(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederatePublishJSON(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederatePublishJSON",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederatePublishJSON" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederatePublishJSON" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFederatePublishJSON(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsPublicationIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationIsValid" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  result = (HelicsBool)helicsPublicationIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsPublicationPublishBytes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishBytes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishBytes" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationPublishBytes" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  helicsPublicationPublishBytes(arg1,(void const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishString" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationPublishString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsPublicationPublishString(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishInteger(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int64_t arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  long long val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishInteger",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishInteger" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_long_SS_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationPublishInteger" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  helicsPublicationPublishInteger(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishBoolean(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  HelicsBool arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishBoolean",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishBoolean" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationPublishBoolean" "', argument " "2"" of type '" "HelicsBool""'");
  } 
  arg2 = static_cast< HelicsBool >(val2);
  helicsPublicationPublishBoolean(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishDouble(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  double arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishDouble",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishDouble" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationPublishDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  helicsPublicationPublishDouble(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  HelicsTime arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishTime",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishTime" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationPublishTime" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  helicsPublicationPublishTime(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishChar(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  char arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  char val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishChar",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishChar" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationPublishChar" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  helicsPublicationPublishChar(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishComplex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  double arg2 ;
  double arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishComplex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishComplex" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  {
    if(mxIsComplex(argv[1]))
    {
      arg2=mxGetPr(argv[1])[0];
      arg3=mxGetPi(argv[1])[0];
    }
    else if (mxIsDouble(argv[1]))
    {
      arg3=0.0;
      arg2=mxGetPr(argv[1])[0];
    }
    else
    {
      arg2=0.0;
      arg3 = 0.0;
    }
  }
  helicsPublicationPublishComplex(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishVector" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  {
    if (!mxIsDouble(argv[1])) {
      SWIG_exception_fail(SWIG_ArgError(3), "argument must be a double array");
      return NULL;
    }
    arg3=static_cast<int>(mxGetNumberOfElements(argv[1]));
    arg2=mxGetPr(argv[1]);
  }
  helicsPublicationPublishVector(arg1,(double const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    
  }
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsPublicationPublishNamedPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsPublicationPublishNamedPoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationPublishNamedPoint" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationPublishNamedPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsPublicationPublishNamedPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  helicsPublicationPublishNamedPoint(arg1,(char const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsPublicationAddTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationAddTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationAddTarget" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationAddTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsPublicationAddTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsInputIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputIsValid" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (HelicsBool)helicsInputIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputAddTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputAddTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputAddTarget" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsInputAddTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsInputAddTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputGetByteCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsInputGetByteCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetByteCount" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (int)helicsInputGetByteCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetBytes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp5 ;
  mxArray * _out;
  
  {
    arg4=&(arg3);
  }
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsInputGetBytes",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetBytes" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  {
    arg3 = helicsInputGetByteCount(arg1) + 2;
    arg2 =  malloc(arg3);
  }
  helicsInputGetBytes(arg1,arg2,arg3,arg4,arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (--resc>=0) *resv++ = SWIG_FromCharPtrAndSize((char*)arg2,*arg4);
  }
  {
    if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsInputGetStringSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsInputGetStringSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetStringSize" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (int)helicsInputGetStringSize(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp5 ;
  mxArray * _out;
  
  {
    arg4=&(arg3);
  }
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsInputGetString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetString" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  {
    arg3=helicsInputGetStringSize(arg1)+2;
    arg2 = (char *) malloc(arg3);
  }
  helicsInputGetString(arg1,arg2,arg3,arg4,arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (--resc>=0) *resv++ = SWIG_FromCharPtrAndSize(arg2,*arg4-1);
  }
  {
    if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsInputGetInteger(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  int64_t result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsInputGetInteger",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetInteger" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = helicsInputGetInteger(arg1,arg2);
  _out = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsInputGetBoolean(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsBool result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsInputGetBoolean",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetBoolean" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (HelicsBool)helicsInputGetBoolean(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsInputGetDouble(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  double result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsInputGetDouble",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetDouble" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (double)helicsInputGetDouble(arg1,arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsInputGetTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsTime result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsInputGetTime",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetTime" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (HelicsTime)helicsInputGetTime(arg1,arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsInputGetChar(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  char result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsInputGetChar",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetChar" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char)helicsInputGetChar(arg1,arg2);
  _out = SWIG_From_char(static_cast< char >(result));
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsInputGetComplex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  double vals2[2] ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    arg2=&(vals2[0]);
    arg3=&(vals2[1]);
  }
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsInputGetComplex",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetComplex" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  helicsInputGetComplex(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    mxArray *out=mxCreateDoubleMatrix(1, 1, mxCOMPLEX);
    double *r=mxGetPr(out);
    double *i=mxGetPi(out);
    *r=*arg2;
    *i=*arg3;
    if (--resc>=0) *resv++ =out;
  }
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsInputGetVectorSize(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsInputGetVectorSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetVectorSize" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (int)helicsInputGetVectorSize(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  double *arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp5 ;
  mxArray * _out;
  
  {
    arg2=(double *)(NULL);
  }
  {
    arg4=&(arg3);
  }
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsInputGetVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetVector" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  {
    arg3=helicsInputGetVectorSize(arg1);
    arg2 = (double *) mxCalloc(arg3,sizeof(double));
  }
  helicsInputGetVector(arg1,arg2,arg3,arg4,arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    mxArray *mat=mxCreateDoubleMatrix(*arg4,1,mxREAL);
    mxSetPr(mat,arg2);
    if (--resc>=0) *resv++ = mat;
  }
  {
    //if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  {
    //if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsInputGetNamedPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  HelicsError *arg6 = (HelicsError *) 0 ;
  int res1 ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  HelicsError etemp6 ;
  mxArray * _out;
  
  {
    arg4=&(arg3);
  }
  arg5 = &temp5;
  {
    etemp6=helicsErrorInitialize();
    arg6=&etemp6;
  }
  if (!SWIG_check_num_args("helicsInputGetNamedPoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetNamedPoint" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  {
    arg3=helicsInputGetStringSize(arg1)+2;
    arg2 = (char *) malloc(arg3);
  }
  helicsInputGetNamedPoint(arg1,arg2,arg3,arg4,arg5,arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (--resc>=0) *resv++ = SWIG_FromCharPtrAndSize(arg2,*arg4-1);
  }
  if (SWIG_IsTmpObj(res5)) {
    if (--resc>=0) *resv++ = SWIG_From_double((*arg5));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    if (--resc>=0) *resv++ = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags);
  }
  {
    if (arg2) free(arg2);
  }
  {
    if (arg6->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg6);
    }
  }
  return 0;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg6->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg6);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultBytes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultBytes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultBytes" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsInputSetDefaultBytes" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  helicsInputSetDefaultBytes(arg1,(void const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultString" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsInputSetDefaultString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsInputSetDefaultString(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultInteger(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int64_t arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  long long val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultInteger",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultInteger" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_long_SS_long(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputSetDefaultInteger" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  helicsInputSetDefaultInteger(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultBoolean(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  HelicsBool arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultBoolean",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultBoolean" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputSetDefaultBoolean" "', argument " "2"" of type '" "HelicsBool""'");
  } 
  arg2 = static_cast< HelicsBool >(val2);
  helicsInputSetDefaultBoolean(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  HelicsTime arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultTime",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultTime" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputSetDefaultTime" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  helicsInputSetDefaultTime(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultChar(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  char val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultChar",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultChar" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_char(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputSetDefaultChar" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  helicsInputSetDefaultChar(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultDouble(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  double arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultDouble",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultDouble" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputSetDefaultDouble" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  helicsInputSetDefaultDouble(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultComplex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  double arg2 ;
  double arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultComplex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultComplex" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  {
    if(mxIsComplex(argv[1]))
    {
      arg2=mxGetPr(argv[1])[0];
      arg3=mxGetPi(argv[1])[0];
    }
    else if (mxIsDouble(argv[1]))
    {
      arg3=0.0;
      arg2=mxGetPr(argv[1])[0];
    }
    else
    {
      arg2=0.0;
      arg3 = 0.0;
    }
  }
  helicsInputSetDefaultComplex(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultVector(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultVector",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultVector" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  {
    if (!mxIsDouble(argv[1])) {
      SWIG_exception_fail(SWIG_ArgError(3), "argument must be a double array");
      return NULL;
    }
    arg3=static_cast<int>(mxGetNumberOfElements(argv[1]));
    arg2=mxGetPr(argv[1]);
  }
  helicsInputSetDefaultVector(arg1,(double const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    
  }
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsInputSetDefaultNamedPoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsInputSetDefaultNamedPoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetDefaultNamedPoint" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsInputSetDefaultNamedPoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsInputSetDefaultNamedPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  helicsInputSetDefaultNamedPoint(arg1,(char const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsInputGetType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetType" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsInputGetType(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetPublicationType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetPublicationType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetPublicationType" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsInputGetPublicationType(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsPublicationGetType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsPublicationGetType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetType" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  result = (char *)helicsPublicationGetType(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetName" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsInputGetName(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsSubscriptionGetTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsSubscriptionGetTarget",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsSubscriptionGetTarget" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsSubscriptionGetTarget(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsPublicationGetName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsPublicationGetName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetName" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  result = (char *)helicsPublicationGetName(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetUnits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetUnits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetUnits" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsInputGetUnits(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetInjectionUnits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetInjectionUnits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetInjectionUnits" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsInputGetInjectionUnits(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetExtractionUnits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetExtractionUnits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetExtractionUnits" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsInputGetExtractionUnits(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsPublicationGetUnits(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsPublicationGetUnits",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetUnits" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  result = (char *)helicsPublicationGetUnits(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputGetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetInfo",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetInfo" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (char *)helicsInputGetInfo(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputSetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetInfo",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetInfo" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsInputSetInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsInputSetInfo(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputGetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsInputGetTag",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetTag" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsInputGetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)helicsInputGetTag(arg1,(char const *)arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_helicsInputSetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsInputSetTag",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetTag" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsInputSetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsInputSetTag" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsInputSetTag(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsPublicationGetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsPublicationGetInfo",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetInfo" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  result = (char *)helicsPublicationGetInfo(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsPublicationSetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationSetInfo",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationSetInfo" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationSetInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsPublicationSetInfo(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsPublicationGetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsPublicationGetTag",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetTag" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationGetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)helicsPublicationGetTag(arg1,(char const *)arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_helicsPublicationSetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsPublicationSetTag",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationSetTag" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsPublicationSetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsPublicationSetTag" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsPublicationSetTag(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsInputGetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsInputGetOption",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputGetOption" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputGetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)helicsInputGetOption(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputSetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int arg2 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsInputSetOption",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetOption" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputSetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsInputSetOption" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  helicsInputSetOption(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsPublicationGetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsPublicationGetOption",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationGetOption" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationGetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)helicsPublicationGetOption(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsPublicationSetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  int arg2 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsPublicationSetOption",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationSetOption" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationSetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsPublicationSetOption" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  helicsPublicationSetOption(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsPublicationSetMinimumChange(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsPublication arg1 = (HelicsPublication) 0 ;
  double arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsPublicationSetMinimumChange",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsPublicationSetMinimumChange" "', argument " "1"" of type '" "HelicsPublication""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsPublicationSetMinimumChange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  helicsPublicationSetMinimumChange(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputSetMinimumChange(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  double arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsInputSetMinimumChange",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputSetMinimumChange" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsInputSetMinimumChange" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  helicsInputSetMinimumChange(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsInputIsUpdated(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsInputIsUpdated",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputIsUpdated" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (HelicsBool)helicsInputIsUpdated(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputLastUpdateTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsTime result;
  
  if (!SWIG_check_num_args("helicsInputLastUpdateTime",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputLastUpdateTime" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  result = (HelicsTime)helicsInputLastUpdateTime(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsInputClearUpdate(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsInput arg1 = (HelicsInput) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsInputClearUpdate",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsInputClearUpdate" "', argument " "1"" of type '" "HelicsInput""'"); 
  }
  helicsInputClearUpdate(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateGetPublicationCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateGetPublicationCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetPublicationCount" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (int)helicsFederateGetPublicationCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateGetInputCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateGetInputCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetInputCount" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (int)helicsFederateGetInputCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateRegisterEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsEndpoint result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterEndpoint" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsEndpoint)helicsFederateRegisterEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsEndpoint result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalEndpoint" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterGlobalEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsEndpoint)helicsFederateRegisterGlobalEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterTargetedEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsEndpoint result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterTargetedEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterTargetedEndpoint" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterTargetedEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterTargetedEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsEndpoint)helicsFederateRegisterTargetedEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalTargetedEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsEndpoint result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalTargetedEndpoint",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalTargetedEndpoint" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalTargetedEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterGlobalTargetedEndpoint" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsEndpoint)helicsFederateRegisterGlobalTargetedEndpoint(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsEndpoint result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetEndpoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetEndpoint" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateGetEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsEndpoint)helicsFederateGetEndpoint(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetEndpointByIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsEndpoint result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetEndpointByIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetEndpointByIndex" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGetEndpointByIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsEndpoint)helicsFederateGetEndpointByIndex(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsEndpointIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointIsValid" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (HelicsBool)helicsEndpointIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointSetDefaultDestination(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointSetDefaultDestination",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSetDefaultDestination" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSetDefaultDestination" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointSetDefaultDestination(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointGetDefaultDestination(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsEndpointGetDefaultDestination",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetDefaultDestination" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (char *)helicsEndpointGetDefaultDestination(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointSendBytes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsEndpointSendBytes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendBytes" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendBytes" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  helicsEndpointSendBytes(arg1,(void const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsEndpointSendBytesTo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsEndpointSendBytesTo",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendBytesTo" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendBytesTo" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsEndpointSendBytesTo" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  helicsEndpointSendBytesTo(arg1,(void const *)arg2,arg3,(char const *)arg4,arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsEndpointSendBytesToAt(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  HelicsTime arg5 ;
  HelicsError *arg6 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  HelicsError etemp6 ;
  mxArray * _out;
  
  {
    etemp6=helicsErrorInitialize();
    arg6=&etemp6;
  }
  if (!SWIG_check_num_args("helicsEndpointSendBytesToAt",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendBytesToAt" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendBytesToAt" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  res4 = SWIG_AsCharPtrAndSize(argv[2], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "helicsEndpointSendBytesToAt" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  ecode5 = SWIG_AsVal_double(argv[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "helicsEndpointSendBytesToAt" "', argument " "5"" of type '" "HelicsTime""'");
  } 
  arg5 = static_cast< HelicsTime >(val5);
  helicsEndpointSendBytesToAt(arg1,(void const *)arg2,arg3,(char const *)arg4,arg5,arg6);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg6->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg6);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  {
    if (arg6->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg6);
    }
  }
  return 1;
}


int _wrap_helicsEndpointSendBytesAt(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  HelicsTime arg4 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  HelicsError etemp5 ;
  mxArray * _out;
  
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsEndpointSendBytesAt",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendBytesAt" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendBytesAt" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  ecode4 = SWIG_AsVal_double(argv[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "helicsEndpointSendBytesAt" "', argument " "4"" of type '" "HelicsTime""'");
  } 
  arg4 = static_cast< HelicsTime >(val4);
  helicsEndpointSendBytesAt(arg1,(void const *)arg2,arg3,arg4,arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsEndpointSendMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  HelicsMessage arg2 = (HelicsMessage) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointSendMessage",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendMessage" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendMessage" "', argument " "2"" of type '" "HelicsMessage""'"); 
  }
  helicsEndpointSendMessage(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointSendMessageZeroCopy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  HelicsMessage arg2 = (HelicsMessage) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointSendMessageZeroCopy",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSendMessageZeroCopy" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSendMessageZeroCopy" "', argument " "2"" of type '" "HelicsMessage""'"); 
  }
  helicsEndpointSendMessageZeroCopy(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointSubscribe(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointSubscribe",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSubscribe" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSubscribe" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointSubscribe(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateHasMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsFederateHasMessage",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateHasMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsBool)helicsFederateHasMessage(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointHasMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsEndpointHasMessage",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointHasMessage" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (HelicsBool)helicsEndpointHasMessage(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederatePendingMessageCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsFederatePendingMessageCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederatePendingMessageCount" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (int)helicsFederatePendingMessageCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointPendingMessageCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsEndpointPendingMessageCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointPendingMessageCount" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (int)helicsEndpointPendingMessageCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointGetMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsMessage result;
  
  if (!SWIG_check_num_args("helicsEndpointGetMessage",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetMessage" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (HelicsMessage)helicsEndpointGetMessage(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointCreateMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsMessage result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsEndpointCreateMessage",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointCreateMessage" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (HelicsMessage)helicsEndpointCreateMessage(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsMessage result;
  
  if (!SWIG_check_num_args("helicsFederateGetMessage",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsMessage)helicsFederateGetMessage(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateCreateMessage(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsMessage result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsFederateCreateMessage",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateCreateMessage" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (HelicsMessage)helicsFederateCreateMessage(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateClearMessages(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsFederateClearMessages",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateClearMessages" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  helicsFederateClearMessages(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointGetType(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsEndpointGetType",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetType" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (char *)helicsEndpointGetType(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointGetName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsEndpointGetName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetName" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (char *)helicsEndpointGetName(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateGetEndpointCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateGetEndpointCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetEndpointCount" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (int)helicsFederateGetEndpointCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointGetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsEndpointGetInfo",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetInfo" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  result = (char *)helicsEndpointGetInfo(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointSetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointSetInfo",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSetInfo" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSetInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointSetInfo(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointGetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsEndpointGetTag",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetTag" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointGetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)helicsEndpointGetTag(arg1,(char const *)arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_helicsEndpointSetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsEndpointSetTag",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSetTag" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointSetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsEndpointSetTag" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsEndpointSetTag(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsEndpointSetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int arg2 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsEndpointSetOption",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointSetOption" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsEndpointSetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsEndpointSetOption" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  helicsEndpointSetOption(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsEndpointGetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsEndpointGetOption",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointGetOption" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsEndpointGetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)helicsEndpointGetOption(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsEndpointAddSourceTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointAddSourceTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointAddSourceTarget" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointAddSourceTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointAddSourceTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointAddDestinationTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointAddDestinationTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointAddDestinationTarget" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointAddDestinationTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointAddDestinationTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointRemoveTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointRemoveTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointRemoveTarget" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointRemoveTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointRemoveTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointAddSourceFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointAddSourceFilter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointAddSourceFilter" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointAddSourceFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointAddSourceFilter(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsEndpointAddDestinationFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsEndpoint arg1 = (HelicsEndpoint) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsEndpointAddDestinationFilter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsEndpointAddDestinationFilter" "', argument " "1"" of type '" "HelicsEndpoint""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsEndpointAddDestinationFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsEndpointAddDestinationFilter(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageGetSource(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsMessageGetSource",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetSource" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (char *)helicsMessageGetSource(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetDestination(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsMessageGetDestination",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetDestination" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (char *)helicsMessageGetDestination(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetOriginalSource(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsMessageGetOriginalSource",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetOriginalSource" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (char *)helicsMessageGetOriginalSource(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetOriginalDestination(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsMessageGetOriginalDestination",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetOriginalDestination" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (char *)helicsMessageGetOriginalDestination(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsTime result;
  
  if (!SWIG_check_num_args("helicsMessageGetTime",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetTime" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (HelicsTime)helicsMessageGetTime(arg1);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsMessageGetString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetString" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (char *)helicsMessageGetString(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetMessageID(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsMessageGetMessageID",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetMessageID" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (int)helicsMessageGetMessageID(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetFlagOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsMessageGetFlagOption",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetFlagOption" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsMessageGetFlagOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsBool)helicsMessageGetFlagOption(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetByteCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsMessageGetByteCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetByteCount" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (int)helicsMessageGetByteCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageGetBytes(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  HelicsError *arg5 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp5 ;
  mxArray * _out;
  
  {
    arg4=&(arg3);
  }
  {
    etemp5=helicsErrorInitialize();
    arg5=&etemp5;
  }
  if (!SWIG_check_num_args("helicsMessageGetBytes",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetBytes" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  {
    arg3=helicsMessageGetByteCount(arg1)+2;
    arg2 =  malloc(arg3);
  }
  helicsMessageGetBytes(arg1,arg2,arg3,arg4,arg5);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (--resc>=0) *resv++ = SWIG_FromCharPtrAndSize((char*)arg2,*arg4);
  }
  {
    if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 0;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg5->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg5);
    }
  }
  return 1;
}


int _wrap_helicsMessageGetBytesPointer(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  void *result = 0 ;
  
  if (!SWIG_check_num_args("helicsMessageGetBytesPointer",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageGetBytesPointer" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (void *)helicsMessageGetBytesPointer(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsMessageIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageIsValid" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (HelicsBool)helicsMessageIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageSetSource(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageSetSource",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetSource" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageSetSource" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsMessageSetSource(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageSetDestination(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageSetDestination",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetDestination" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageSetDestination" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsMessageSetDestination(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageSetOriginalSource(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageSetOriginalSource",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetOriginalSource" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageSetOriginalSource" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsMessageSetOriginalSource(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageSetOriginalDestination(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageSetOriginalDestination",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetOriginalDestination" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageSetOriginalDestination" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsMessageSetOriginalDestination(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageSetTime(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  HelicsTime arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  double val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageSetTime",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetTime" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsMessageSetTime" "', argument " "2"" of type '" "HelicsTime""'");
  } 
  arg2 = static_cast< HelicsTime >(val2);
  helicsMessageSetTime(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageReserve(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageReserve",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageReserve" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsMessageReserve" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  helicsMessageReserve(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageSetMessageID(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int32_t arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  void *argp2 ;
  int res2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageSetMessageID",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetMessageID" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  {
    res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_int32_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageSetMessageID" "', argument " "2"" of type '" "int32_t""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "helicsMessageSetMessageID" "', argument " "2"" of type '" "int32_t""'");
    } else {
      arg2 = *(reinterpret_cast< int32_t * >(argp2));
    }
  }
  helicsMessageSetMessageID(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageClearFlags(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsMessageClearFlags",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageClearFlags" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  helicsMessageClearFlags(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageSetFlagOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int arg2 ;
  HelicsBool arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsMessageSetFlagOption",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetFlagOption" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsMessageSetFlagOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsMessageSetFlagOption" "', argument " "3"" of type '" "HelicsBool""'");
  } 
  arg3 = static_cast< HelicsBool >(val3);
  helicsMessageSetFlagOption(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsMessageSetString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageSetString",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetString" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageSetString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsMessageSetString(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageSetData(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsMessageSetData",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageSetData" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageSetData" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  helicsMessageSetData(arg1,(void const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsMessageAppendData(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  size_t size2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsMessageAppendData",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageAppendData" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, &size2, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageAppendData" "', argument " "2"" of type '" "void const *""'");
  }  
  arg2 = reinterpret_cast< void * >(buf2);
  arg3 = static_cast< int >(size2 - 1);
  helicsMessageAppendData(arg1,(void const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsMessageCopy(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  HelicsMessage arg2 = (HelicsMessage) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsMessageCopy",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageCopy" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  res2 = SWIG_ConvertPtr(argv[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsMessageCopy" "', argument " "2"" of type '" "HelicsMessage""'"); 
  }
  helicsMessageCopy(arg1,arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsMessageClone(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  HelicsMessage result;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsMessageClone",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageClone" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  result = (HelicsMessage)helicsMessageClone(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsMessageFree(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  int res1 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("helicsMessageFree",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageFree" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  helicsMessageFree(arg1);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsMessageClear(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsMessage arg1 = (HelicsMessage) 0 ;
  HelicsError *arg2 = (HelicsError *) 0 ;
  int res1 ;
  HelicsError etemp2 ;
  mxArray * _out;
  
  {
    etemp2=helicsErrorInitialize();
    arg2=&etemp2;
  }
  if (!SWIG_check_num_args("helicsMessageClear",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsMessageClear" "', argument " "1"" of type '" "HelicsMessage""'"); 
  }
  helicsMessageClear(arg1,arg2);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 0;
fail:
  {
    if (arg2->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg2);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsFilterTypes arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterFilter",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterFilter" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRegisterFilter" "', argument " "2"" of type '" "HelicsFilterTypes""'");
  } 
  arg2 = static_cast< HelicsFilterTypes >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterFilter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsFilter)helicsFederateRegisterFilter(arg1,arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  HelicsFilterTypes arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalFilter",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalFilter" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateRegisterGlobalFilter" "', argument " "2"" of type '" "HelicsFilterTypes""'");
  } 
  arg2 = static_cast< HelicsFilterTypes >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFederateRegisterGlobalFilter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsFilter)helicsFederateRegisterGlobalFilter(arg1,arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterCloningFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterCloningFilter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterCloningFilter" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterCloningFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsFilter)helicsFederateRegisterCloningFilter(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateRegisterGlobalCloningFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateRegisterGlobalCloningFilter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateRegisterGlobalCloningFilter" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateRegisterGlobalCloningFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsFilter)helicsFederateRegisterGlobalCloningFilter(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsCoreRegisterFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  HelicsFilterTypes arg2 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsCoreRegisterFilter",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreRegisterFilter" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsCoreRegisterFilter" "', argument " "2"" of type '" "HelicsFilterTypes""'");
  } 
  arg2 = static_cast< HelicsFilterTypes >(val2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsCoreRegisterFilter" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (HelicsFilter)helicsCoreRegisterFilter(arg1,arg2,(char const *)arg3,arg4);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsCoreRegisterCloningFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsCore arg1 = (HelicsCore) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsCoreRegisterCloningFilter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsCoreRegisterCloningFilter" "', argument " "1"" of type '" "HelicsCore""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsCoreRegisterCloningFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsFilter)helicsCoreRegisterCloningFilter(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetFilterCount(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int res1 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsFederateGetFilterCount",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetFilterCount" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  result = (int)helicsFederateGetFilterCount(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFederateGetFilter(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetFilter",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetFilter" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFederateGetFilter" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (HelicsFilter)helicsFederateGetFilter(arg1,(char const *)arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFederateGetFilterByIndex(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFederate arg1 = (HelicsFederate) 0 ;
  int arg2 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  HelicsFilter result;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFederateGetFilterByIndex",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFederateGetFilterByIndex" "', argument " "1"" of type '" "HelicsFederate""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFederateGetFilterByIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HelicsFilter)helicsFederateGetFilterByIndex(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (_out) --resc, *resv++ = _out;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFilterIsValid(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  int res1 ;
  mxArray * _out;
  HelicsBool result;
  
  if (!SWIG_check_num_args("helicsFilterIsValid",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterIsValid" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  result = (HelicsBool)helicsFilterIsValid(arg1);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFilterGetName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsFilterGetName",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterGetName" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  result = (char *)helicsFilterGetName(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFilterSet(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFilterSet",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterSet" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterSet" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFilterSet" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  helicsFilterSet(arg1,(char const *)arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFilterSetString(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFilterSetString",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterSetString" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterSetString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFilterSetString" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFilterSetString(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFilterAddDestinationTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFilterAddDestinationTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterAddDestinationTarget" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterAddDestinationTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFilterAddDestinationTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFilterAddSourceTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFilterAddSourceTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterAddSourceTarget" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterAddSourceTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFilterAddSourceTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFilterAddDeliveryEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFilterAddDeliveryEndpoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterAddDeliveryEndpoint" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterAddDeliveryEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFilterAddDeliveryEndpoint(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFilterRemoveTarget(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFilterRemoveTarget",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterRemoveTarget" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterRemoveTarget" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFilterRemoveTarget(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFilterRemoveDeliveryEndpoint(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFilterRemoveDeliveryEndpoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterRemoveDeliveryEndpoint" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterRemoveDeliveryEndpoint" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFilterRemoveDeliveryEndpoint(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFilterGetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  int res1 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsFilterGetInfo",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterGetInfo" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  result = (char *)helicsFilterGetInfo(arg1);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}


int _wrap_helicsFilterSetInfo(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  HelicsError *arg3 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  HelicsError etemp3 ;
  mxArray * _out;
  
  {
    etemp3=helicsErrorInitialize();
    arg3=&etemp3;
  }
  if (!SWIG_check_num_args("helicsFilterSetInfo",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterSetInfo" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterSetInfo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  helicsFilterSetInfo(arg1,(char const *)arg2,arg3);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (arg3->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg3);
    }
  }
  return 1;
}


int _wrap_helicsFilterGetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  mxArray * _out;
  char *result = 0 ;
  
  if (!SWIG_check_num_args("helicsFilterGetTag",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterGetTag" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterGetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (char *)helicsFilterGetTag(arg1,(char const *)arg2);
  _out = SWIG_FromCharPtr((const char *)result);
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return 1;
}


int _wrap_helicsFilterSetTag(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFilterSetTag",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterSetTag" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  res2 = SWIG_AsCharPtrAndSize(argv[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "helicsFilterSetTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(argv[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "helicsFilterSetTag" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  helicsFilterSetTag(arg1,(char const *)arg2,(char const *)arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFilterSetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  int arg2 ;
  int arg3 ;
  HelicsError *arg4 = (HelicsError *) 0 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  HelicsError etemp4 ;
  mxArray * _out;
  
  {
    etemp4=helicsErrorInitialize();
    arg4=&etemp4;
  }
  if (!SWIG_check_num_args("helicsFilterSetOption",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterSetOption" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFilterSetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "helicsFilterSetOption" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  helicsFilterSetOption(arg1,arg2,arg3,arg4);
  _out = (mxArray*)0;
  if (_out) --resc, *resv++ = _out;
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 0;
fail:
  {
    if (arg4->error_code!=HELICS_OK)
    {
      throwHelicsMatlabError(arg4);
    }
  }
  return 1;
}


int _wrap_helicsFilterGetOption(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  HelicsFilter arg1 = (HelicsFilter) 0 ;
  int arg2 ;
  int res1 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("helicsFilterGetOption",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "helicsFilterGetOption" "', argument " "1"" of type '" "HelicsFilter""'"); 
  }
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "helicsFilterGetOption" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)helicsFilterGetOption(arg1,arg2);
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out) --resc, *resv++ = _out;
  return 0;
fail:
  return 1;
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_HelicsComplex = {"_p_HelicsComplex", "HelicsComplex *", 0, 0, (void*)"helics.HelicsComplex", 0};
static swig_type_info _swigt__p_HelicsCoreFlags = {"_p_HelicsCoreFlags", "enum HelicsCoreFlags *|HelicsCoreFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsCoreTypes = {"_p_HelicsCoreTypes", "enum HelicsCoreTypes *|HelicsCoreTypes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsDataTypes = {"_p_HelicsDataTypes", "enum HelicsDataTypes *|HelicsDataTypes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsError = {"_p_HelicsError", "HelicsError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsErrorTypes = {"_p_HelicsErrorTypes", "enum HelicsErrorTypes *|HelicsErrorTypes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsFederateFlags = {"_p_HelicsFederateFlags", "enum HelicsFederateFlags *|HelicsFederateFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsFederateState = {"_p_HelicsFederateState", "enum HelicsFederateState *|HelicsFederateState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsFilterTypes = {"_p_HelicsFilterTypes", "enum HelicsFilterTypes *|HelicsFilterTypes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsFlags = {"_p_HelicsFlags", "enum HelicsFlags *|HelicsFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsHandleOptions = {"_p_HelicsHandleOptions", "enum HelicsHandleOptions *|HelicsHandleOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsIterationRequest = {"_p_HelicsIterationRequest", "enum HelicsIterationRequest *|HelicsIterationRequest *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsIterationResult = {"_p_HelicsIterationResult", "enum HelicsIterationResult *|HelicsIterationResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsLogLevels = {"_p_HelicsLogLevels", "enum HelicsLogLevels *|HelicsLogLevels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsMultiInputModes = {"_p_HelicsMultiInputModes", "enum HelicsMultiInputModes *|HelicsMultiInputModes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsProperties = {"_p_HelicsProperties", "enum HelicsProperties *|HelicsProperties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HelicsSequencingModes = {"_p_HelicsSequencingModes", "enum HelicsSequencingModes *|HelicsSequencingModes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *|HelicsTime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|HelicsBool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "HelicsPublication|HelicsBroker|HelicsInput|HelicsCore|HelicsFederateInfo|HelicsFilter|HelicsFederate|HelicsEndpoint|HelicsMessage|void *|HelicsQuery", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_HelicsComplex,
  &_swigt__p_HelicsCoreFlags,
  &_swigt__p_HelicsCoreTypes,
  &_swigt__p_HelicsDataTypes,
  &_swigt__p_HelicsError,
  &_swigt__p_HelicsErrorTypes,
  &_swigt__p_HelicsFederateFlags,
  &_swigt__p_HelicsFederateState,
  &_swigt__p_HelicsFilterTypes,
  &_swigt__p_HelicsFlags,
  &_swigt__p_HelicsHandleOptions,
  &_swigt__p_HelicsIterationRequest,
  &_swigt__p_HelicsIterationResult,
  &_swigt__p_HelicsLogLevels,
  &_swigt__p_HelicsMultiInputModes,
  &_swigt__p_HelicsProperties,
  &_swigt__p_HelicsSequencingModes,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_int32_t,
  &_swigt__p_p_char,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_HelicsComplex[] = {  {&_swigt__p_HelicsComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsCoreFlags[] = {  {&_swigt__p_HelicsCoreFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsCoreTypes[] = {  {&_swigt__p_HelicsCoreTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsDataTypes[] = {  {&_swigt__p_HelicsDataTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsError[] = {  {&_swigt__p_HelicsError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsErrorTypes[] = {  {&_swigt__p_HelicsErrorTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsFederateFlags[] = {  {&_swigt__p_HelicsFederateFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsFederateState[] = {  {&_swigt__p_HelicsFederateState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsFilterTypes[] = {  {&_swigt__p_HelicsFilterTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsFlags[] = {  {&_swigt__p_HelicsFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsHandleOptions[] = {  {&_swigt__p_HelicsHandleOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsIterationRequest[] = {  {&_swigt__p_HelicsIterationRequest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsIterationResult[] = {  {&_swigt__p_HelicsIterationResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsLogLevels[] = {  {&_swigt__p_HelicsLogLevels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsMultiInputModes[] = {  {&_swigt__p_HelicsMultiInputModes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsProperties[] = {  {&_swigt__p_HelicsProperties, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HelicsSequencingModes[] = {  {&_swigt__p_HelicsSequencingModes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_HelicsComplex,
  _swigc__p_HelicsCoreFlags,
  _swigc__p_HelicsCoreTypes,
  _swigc__p_HelicsDataTypes,
  _swigc__p_HelicsError,
  _swigc__p_HelicsErrorTypes,
  _swigc__p_HelicsFederateFlags,
  _swigc__p_HelicsFederateState,
  _swigc__p_HelicsFilterTypes,
  _swigc__p_HelicsFlags,
  _swigc__p_HelicsHandleOptions,
  _swigc__p_HelicsIterationRequest,
  _swigc__p_HelicsIterationResult,
  _swigc__p_HelicsLogLevels,
  _swigc__p_HelicsMultiInputModes,
  _swigc__p_HelicsProperties,
  _swigc__p_HelicsSequencingModes,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_int32_t,
  _swigc__p_p_char,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


void SWIG_Matlab_LoadModule() {
  /* Only call once */
  static int moduleIsLoaded = 0;
  if (moduleIsLoaded) return;
  moduleIsLoaded = 1;

  /* Prevent unloading this file until MATLAB exits */
  mexLock();

  /* Exit function (called when unloaded) */
  mexAtExit(SWIG_Matlab_ExitFcn);

  /* Load dependent modules and initialize */

SWIG_InitializeModule(0);

}


SWIGINTERN const char* SwigConstantName(int con_id) {
  switch (con_id) {
  case 0: return "HELICS_CORE_TYPE_DEFAULT";
  case 1: return "HELICS_CORE_TYPE_ZMQ";
  case 2: return "HELICS_CORE_TYPE_MPI";
  case 3: return "HELICS_CORE_TYPE_TEST";
  case 4: return "HELICS_CORE_TYPE_INTERPROCESS";
  case 5: return "HELICS_CORE_TYPE_IPC";
  case 6: return "HELICS_CORE_TYPE_TCP";
  case 7: return "HELICS_CORE_TYPE_UDP";
  case 8: return "HELICS_CORE_TYPE_ZMQ_SS";
  case 9: return "HELICS_CORE_TYPE_NNG";
  case 10: return "HELICS_CORE_TYPE_TCP_SS";
  case 11: return "HELICS_CORE_TYPE_HTTP";
  case 12: return "HELICS_CORE_TYPE_WEBSOCKET";
  case 13: return "HELICS_CORE_TYPE_INPROC";
  case 14: return "HELICS_CORE_TYPE_NULL";
  case 15: return "HELICS_DATA_TYPE_STRING";
  case 16: return "HELICS_DATA_TYPE_DOUBLE";
  case 17: return "HELICS_DATA_TYPE_INT";
  case 18: return "HELICS_DATA_TYPE_COMPLEX";
  case 19: return "HELICS_DATA_TYPE_VECTOR";
  case 20: return "HELICS_DATA_TYPE_COMPLEX_VECTOR";
  case 21: return "HELICS_DATA_TYPE_NAMED_POINT";
  case 22: return "HELICS_DATA_TYPE_BOOLEAN";
  case 23: return "HELICS_DATA_TYPE_TIME";
  case 24: return "HELICS_DATA_TYPE_RAW";
  case 25: return "HELICS_DATA_TYPE_MULTI";
  case 26: return "HELICS_DATA_TYPE_ANY";
  case 27: return "HELICS_FLAG_OBSERVER";
  case 28: return "HELICS_FLAG_UNINTERRUPTIBLE";
  case 29: return "HELICS_FLAG_INTERRUPTIBLE";
  case 30: return "HELICS_FLAG_SOURCE_ONLY";
  case 31: return "HELICS_FLAG_ONLY_TRANSMIT_ON_CHANGE";
  case 32: return "HELICS_FLAG_ONLY_UPDATE_ON_CHANGE";
  case 33: return "HELICS_FLAG_WAIT_FOR_CURRENT_TIME_UPDATE";
  case 34: return "HELICS_FLAG_RESTRICTIVE_TIME_POLICY";
  case 35: return "HELICS_FLAG_ROLLBACK";
  case 36: return "HELICS_FLAG_FORWARD_COMPUTE";
  case 37: return "HELICS_FLAG_REALTIME";
  case 38: return "HELICS_FLAG_SINGLE_THREAD_FEDERATE";
  case 39: return "HELICS_FLAG_IGNORE_TIME_MISMATCH_WARNINGS";
  case 40: return "HELICS_FLAG_STRICT_CONFIG_CHECKING";
  case 41: return "HELICS_FLAG_EVENT_TRIGGERED";
  case 42: return "HELICS_FLAG_DELAY_INIT_ENTRY";
  case 43: return "HELICS_FLAG_ENABLE_INIT_ENTRY";
  case 44: return "HELICS_FLAG_SLOW_RESPONDING";
  case 45: return "HELICS_FLAG_DEBUGGING";
  case 46: return "HELICS_FLAG_TERMINATE_ON_ERROR";
  case 47: return "HELICS_FLAG_FORCE_LOGGING_FLUSH";
  case 48: return "HELICS_FLAG_DUMPLOG";
  case 49: return "HELICS_LOG_LEVEL_NO_PRINT";
  case 50: return "HELICS_LOG_LEVEL_ERROR";
  case 51: return "HELICS_LOG_LEVEL_WARNING";
  case 52: return "HELICS_LOG_LEVEL_SUMMARY";
  case 53: return "HELICS_LOG_LEVEL_CONNECTIONS";
  case 54: return "HELICS_LOG_LEVEL_INTERFACES";
  case 55: return "HELICS_LOG_LEVEL_TIMING";
  case 56: return "HELICS_LOG_LEVEL_DATA";
  case 57: return "HELICS_LOG_LEVEL_DEBUG";
  case 58: return "HELICS_LOG_LEVEL_TRACE";
  case 59: return "HELICS_ERROR_FATAL";
  case 60: return "HELICS_ERROR_EXTERNAL_TYPE";
  case 61: return "HELICS_ERROR_OTHER";
  case 62: return "HELICS_ERROR_USER_ABORT";
  case 63: return "HELICS_ERROR_INSUFFICIENT_SPACE";
  case 64: return "HELICS_ERROR_EXECUTION_FAILURE";
  case 65: return "HELICS_ERROR_INVALID_FUNCTION_CALL";
  case 66: return "HELICS_ERROR_INVALID_STATE_TRANSITION";
  case 67: return "HELICS_WARNING";
  case 68: return "HELICS_ERROR_SYSTEM_FAILURE";
  case 69: return "HELICS_ERROR_DISCARD";
  case 70: return "HELICS_ERROR_INVALID_ARGUMENT";
  case 71: return "HELICS_ERROR_INVALID_OBJECT";
  case 72: return "HELICS_ERROR_CONNECTION_FAILURE";
  case 73: return "HELICS_ERROR_REGISTRATION_FAILURE";
  case 74: return "HELICS_OK";
  case 75: return "HELICS_PROPERTY_TIME_DELTA";
  case 76: return "HELICS_PROPERTY_TIME_PERIOD";
  case 77: return "HELICS_PROPERTY_TIME_OFFSET";
  case 78: return "HELICS_PROPERTY_TIME_RT_LAG";
  case 79: return "HELICS_PROPERTY_TIME_RT_LEAD";
  case 80: return "HELICS_PROPERTY_TIME_RT_TOLERANCE";
  case 81: return "HELICS_PROPERTY_TIME_INPUT_DELAY";
  case 82: return "HELICS_PROPERTY_TIME_OUTPUT_DELAY";
  case 83: return "HELICS_PROPERTY_INT_MAX_ITERATIONS";
  case 84: return "HELICS_PROPERTY_INT_LOG_LEVEL";
  case 85: return "HELICS_PROPERTY_INT_FILE_LOG_LEVEL";
  case 86: return "HELICS_PROPERTY_INT_CONSOLE_LOG_LEVEL";
  case 87: return "HELICS_MULTI_INPUT_NO_OP";
  case 88: return "HELICS_MULTI_INPUT_VECTORIZE_OPERATION";
  case 89: return "HELICS_MULTI_INPUT_AND_OPERATION";
  case 90: return "HELICS_MULTI_INPUT_OR_OPERATION";
  case 91: return "HELICS_MULTI_INPUT_SUM_OPERATION";
  case 92: return "HELICS_MULTI_INPUT_DIFF_OPERATION";
  case 93: return "HELICS_MULTI_INPUT_MAX_OPERATION";
  case 94: return "HELICS_MULTI_INPUT_MIN_OPERATION";
  case 95: return "HELICS_MULTI_INPUT_AVERAGE_OPERATION";
  case 96: return "HELICS_HANDLE_OPTION_CONNECTION_REQUIRED";
  case 97: return "HELICS_HANDLE_OPTION_CONNECTION_OPTIONAL";
  case 98: return "HELICS_HANDLE_OPTION_SINGLE_CONNECTION_ONLY";
  case 99: return "HELICS_HANDLE_OPTION_MULTIPLE_CONNECTIONS_ALLOWED";
  case 100: return "HELICS_HANDLE_OPTION_BUFFER_DATA";
  case 101: return "HELICS_HANDLE_OPTION_STRICT_TYPE_CHECKING";
  case 102: return "HELICS_HANDLE_OPTION_IGNORE_UNIT_MISMATCH";
  case 103: return "HELICS_HANDLE_OPTION_ONLY_TRANSMIT_ON_CHANGE";
  case 104: return "HELICS_HANDLE_OPTION_ONLY_UPDATE_ON_CHANGE";
  case 105: return "HELICS_HANDLE_OPTION_IGNORE_INTERRUPTS";
  case 106: return "HELICS_HANDLE_OPTION_MULTI_INPUT_HANDLING_METHOD";
  case 107: return "HELICS_HANDLE_OPTION_INPUT_PRIORITY_LOCATION";
  case 108: return "HELICS_HANDLE_OPTION_CLEAR_PRIORITY_LIST";
  case 109: return "HELICS_HANDLE_OPTION_CONNECTIONS";
  case 110: return "HELICS_FILTER_TYPE_CUSTOM";
  case 111: return "HELICS_FILTER_TYPE_DELAY";
  case 112: return "HELICS_FILTER_TYPE_RANDOM_DELAY";
  case 113: return "HELICS_FILTER_TYPE_RANDOM_DROP";
  case 114: return "HELICS_FILTER_TYPE_REROUTE";
  case 115: return "HELICS_FILTER_TYPE_CLONE";
  case 116: return "HELICS_FILTER_TYPE_FIREWALL";
  case 117: return "HELICS_SEQUENCING_MODE_FAST";
  case 118: return "HELICS_SEQUENCING_MODE_ORDERED";
  case 119: return "HELICS_ITERATION_REQUEST_NO_ITERATION";
  case 120: return "HELICS_ITERATION_REQUEST_FORCE_ITERATION";
  case 121: return "HELICS_ITERATION_REQUEST_ITERATE_IF_NEEDED";
  case 122: return "HELICS_ITERATION_RESULT_NEXT_STEP";
  case 123: return "HELICS_ITERATION_RESULT_ERROR";
  case 124: return "HELICS_ITERATION_RESULT_HALTED";
  case 125: return "HELICS_ITERATION_RESULT_ITERATING";
  case 126: return "HELICS_STATE_STARTUP";
  case 127: return "HELICS_STATE_INITIALIZATION";
  case 128: return "HELICS_STATE_EXECUTION";
  case 129: return "HELICS_STATE_FINALIZE";
  case 130: return "HELICS_STATE_ERROR";
  case 131: return "HELICS_STATE_PENDING_INIT";
  case 132: return "HELICS_STATE_PENDING_EXEC";
  case 133: return "HELICS_STATE_PENDING_TIME";
  case 134: return "HELICS_STATE_PENDING_ITERATIVE_TIME";
  case 135: return "HELICS_STATE_PENDING_FINALIZE";
  case 136: return "HELICS_STATE_FINISHED";
  default: return 0;
  }
}

SWIGINTERN int swigConstantName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the constant ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv);
  const char* s = SwigConstantName(con_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such constant ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

SWIGINTERN int swigConstant(int SWIGUNUSEDPARM(resc), mxArray *resv[], int argc, mxArray *argv[]) {
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
    return 1;
  }
  int con_id = (int)mxGetScalar(*argv++);
  switch (con_id) {
  case 0: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_DEFAULT",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_DEFAULT)));; break;
  case 1: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_ZMQ",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_ZMQ)));; break;
  case 2: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_MPI",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_MPI)));; break;
  case 3: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_TEST",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_TEST)));; break;
  case 4: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_INTERPROCESS",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_INTERPROCESS)));; break;
  case 5: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_IPC",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_IPC)));; break;
  case 6: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_TCP",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_TCP)));; break;
  case 7: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_UDP",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_UDP)));; break;
  case 8: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_ZMQ_SS",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_ZMQ_SS)));; break;
  case 9: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_NNG",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_NNG)));; break;
  case 10: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_TCP_SS",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_TCP_SS)));; break;
  case 11: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_HTTP",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_HTTP)));; break;
  case 12: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_WEBSOCKET",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_WEBSOCKET)));; break;
  case 13: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_INPROC",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_INPROC)));; break;
  case 14: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_CORE_TYPE_NULL",SWIG_From_int(static_cast< int >(HELICS_CORE_TYPE_NULL)));; break;
  case 15: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_STRING",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_STRING)));; break;
  case 16: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_DOUBLE",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_DOUBLE)));; break;
  case 17: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_INT",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_INT)));; break;
  case 18: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_COMPLEX",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_COMPLEX)));; break;
  case 19: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_VECTOR",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_VECTOR)));; break;
  case 20: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_COMPLEX_VECTOR",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_COMPLEX_VECTOR)));; break;
  case 21: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_NAMED_POINT",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_NAMED_POINT)));; break;
  case 22: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_BOOLEAN",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_BOOLEAN)));; break;
  case 23: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_TIME",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_TIME)));; break;
  case 24: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_RAW",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_RAW)));; break;
  case 25: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_MULTI",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_MULTI)));; break;
  case 26: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_DATA_TYPE_ANY",SWIG_From_int(static_cast< int >(HELICS_DATA_TYPE_ANY)));; break;
  case 27: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_OBSERVER",SWIG_From_int(static_cast< int >(HELICS_FLAG_OBSERVER)));; break;
  case 28: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_UNINTERRUPTIBLE",SWIG_From_int(static_cast< int >(HELICS_FLAG_UNINTERRUPTIBLE)));; break;
  case 29: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_INTERRUPTIBLE",SWIG_From_int(static_cast< int >(HELICS_FLAG_INTERRUPTIBLE)));; break;
  case 30: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_SOURCE_ONLY",SWIG_From_int(static_cast< int >(HELICS_FLAG_SOURCE_ONLY)));; break;
  case 31: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_ONLY_TRANSMIT_ON_CHANGE",SWIG_From_int(static_cast< int >(HELICS_FLAG_ONLY_TRANSMIT_ON_CHANGE)));; break;
  case 32: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_ONLY_UPDATE_ON_CHANGE",SWIG_From_int(static_cast< int >(HELICS_FLAG_ONLY_UPDATE_ON_CHANGE)));; break;
  case 33: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_WAIT_FOR_CURRENT_TIME_UPDATE",SWIG_From_int(static_cast< int >(HELICS_FLAG_WAIT_FOR_CURRENT_TIME_UPDATE)));; break;
  case 34: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_RESTRICTIVE_TIME_POLICY",SWIG_From_int(static_cast< int >(HELICS_FLAG_RESTRICTIVE_TIME_POLICY)));; break;
  case 35: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_ROLLBACK",SWIG_From_int(static_cast< int >(HELICS_FLAG_ROLLBACK)));; break;
  case 36: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_FORWARD_COMPUTE",SWIG_From_int(static_cast< int >(HELICS_FLAG_FORWARD_COMPUTE)));; break;
  case 37: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_REALTIME",SWIG_From_int(static_cast< int >(HELICS_FLAG_REALTIME)));; break;
  case 38: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_SINGLE_THREAD_FEDERATE",SWIG_From_int(static_cast< int >(HELICS_FLAG_SINGLE_THREAD_FEDERATE)));; break;
  case 39: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_IGNORE_TIME_MISMATCH_WARNINGS",SWIG_From_int(static_cast< int >(HELICS_FLAG_IGNORE_TIME_MISMATCH_WARNINGS)));; break;
  case 40: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_STRICT_CONFIG_CHECKING",SWIG_From_int(static_cast< int >(HELICS_FLAG_STRICT_CONFIG_CHECKING)));; break;
  case 41: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_EVENT_TRIGGERED",SWIG_From_int(static_cast< int >(HELICS_FLAG_EVENT_TRIGGERED)));; break;
  case 42: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_DELAY_INIT_ENTRY",SWIG_From_int(static_cast< int >(HELICS_FLAG_DELAY_INIT_ENTRY)));; break;
  case 43: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_ENABLE_INIT_ENTRY",SWIG_From_int(static_cast< int >(HELICS_FLAG_ENABLE_INIT_ENTRY)));; break;
  case 44: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_SLOW_RESPONDING",SWIG_From_int(static_cast< int >(HELICS_FLAG_SLOW_RESPONDING)));; break;
  case 45: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_DEBUGGING",SWIG_From_int(static_cast< int >(HELICS_FLAG_DEBUGGING)));; break;
  case 46: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_TERMINATE_ON_ERROR",SWIG_From_int(static_cast< int >(HELICS_FLAG_TERMINATE_ON_ERROR)));; break;
  case 47: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_FORCE_LOGGING_FLUSH",SWIG_From_int(static_cast< int >(HELICS_FLAG_FORCE_LOGGING_FLUSH)));; break;
  case 48: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FLAG_DUMPLOG",SWIG_From_int(static_cast< int >(HELICS_FLAG_DUMPLOG)));; break;
  case 49: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_NO_PRINT",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_NO_PRINT)));; break;
  case 50: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_ERROR",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_ERROR)));; break;
  case 51: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_WARNING",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_WARNING)));; break;
  case 52: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_SUMMARY",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_SUMMARY)));; break;
  case 53: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_CONNECTIONS",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_CONNECTIONS)));; break;
  case 54: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_INTERFACES",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_INTERFACES)));; break;
  case 55: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_TIMING",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_TIMING)));; break;
  case 56: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_DATA",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_DATA)));; break;
  case 57: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_DEBUG",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_DEBUG)));; break;
  case 58: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_LOG_LEVEL_TRACE",SWIG_From_int(static_cast< int >(HELICS_LOG_LEVEL_TRACE)));; break;
  case 59: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_FATAL",SWIG_From_int(static_cast< int >(HELICS_ERROR_FATAL)));; break;
  case 60: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_EXTERNAL_TYPE",SWIG_From_int(static_cast< int >(HELICS_ERROR_EXTERNAL_TYPE)));; break;
  case 61: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_OTHER",SWIG_From_int(static_cast< int >(HELICS_ERROR_OTHER)));; break;
  case 62: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_USER_ABORT",SWIG_From_int(static_cast< int >(HELICS_ERROR_USER_ABORT)));; break;
  case 63: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_INSUFFICIENT_SPACE",SWIG_From_int(static_cast< int >(HELICS_ERROR_INSUFFICIENT_SPACE)));; break;
  case 64: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_EXECUTION_FAILURE",SWIG_From_int(static_cast< int >(HELICS_ERROR_EXECUTION_FAILURE)));; break;
  case 65: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_INVALID_FUNCTION_CALL",SWIG_From_int(static_cast< int >(HELICS_ERROR_INVALID_FUNCTION_CALL)));; break;
  case 66: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_INVALID_STATE_TRANSITION",SWIG_From_int(static_cast< int >(HELICS_ERROR_INVALID_STATE_TRANSITION)));; break;
  case 67: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_WARNING",SWIG_From_int(static_cast< int >(HELICS_WARNING)));; break;
  case 68: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_SYSTEM_FAILURE",SWIG_From_int(static_cast< int >(HELICS_ERROR_SYSTEM_FAILURE)));; break;
  case 69: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_DISCARD",SWIG_From_int(static_cast< int >(HELICS_ERROR_DISCARD)));; break;
  case 70: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_INVALID_ARGUMENT",SWIG_From_int(static_cast< int >(HELICS_ERROR_INVALID_ARGUMENT)));; break;
  case 71: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_INVALID_OBJECT",SWIG_From_int(static_cast< int >(HELICS_ERROR_INVALID_OBJECT)));; break;
  case 72: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_CONNECTION_FAILURE",SWIG_From_int(static_cast< int >(HELICS_ERROR_CONNECTION_FAILURE)));; break;
  case 73: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ERROR_REGISTRATION_FAILURE",SWIG_From_int(static_cast< int >(HELICS_ERROR_REGISTRATION_FAILURE)));; break;
  case 74: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_OK",SWIG_From_int(static_cast< int >(HELICS_OK)));; break;
  case 75: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_DELTA",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_DELTA)));; break;
  case 76: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_PERIOD",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_PERIOD)));; break;
  case 77: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_OFFSET",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_OFFSET)));; break;
  case 78: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_RT_LAG",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_RT_LAG)));; break;
  case 79: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_RT_LEAD",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_RT_LEAD)));; break;
  case 80: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_RT_TOLERANCE",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_RT_TOLERANCE)));; break;
  case 81: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_INPUT_DELAY",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_INPUT_DELAY)));; break;
  case 82: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_TIME_OUTPUT_DELAY",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_TIME_OUTPUT_DELAY)));; break;
  case 83: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_INT_MAX_ITERATIONS",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_INT_MAX_ITERATIONS)));; break;
  case 84: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_INT_LOG_LEVEL",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_INT_LOG_LEVEL)));; break;
  case 85: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_INT_FILE_LOG_LEVEL",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_INT_FILE_LOG_LEVEL)));; break;
  case 86: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_PROPERTY_INT_CONSOLE_LOG_LEVEL",SWIG_From_int(static_cast< int >(HELICS_PROPERTY_INT_CONSOLE_LOG_LEVEL)));; break;
  case 87: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_NO_OP",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_NO_OP)));; break;
  case 88: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_VECTORIZE_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_VECTORIZE_OPERATION)));; break;
  case 89: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_AND_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_AND_OPERATION)));; break;
  case 90: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_OR_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_OR_OPERATION)));; break;
  case 91: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_SUM_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_SUM_OPERATION)));; break;
  case 92: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_DIFF_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_DIFF_OPERATION)));; break;
  case 93: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_MAX_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_MAX_OPERATION)));; break;
  case 94: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_MIN_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_MIN_OPERATION)));; break;
  case 95: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_MULTI_INPUT_AVERAGE_OPERATION",SWIG_From_int(static_cast< int >(HELICS_MULTI_INPUT_AVERAGE_OPERATION)));; break;
  case 96: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_CONNECTION_REQUIRED",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_CONNECTION_REQUIRED)));; break;
  case 97: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_CONNECTION_OPTIONAL",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_CONNECTION_OPTIONAL)));; break;
  case 98: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_SINGLE_CONNECTION_ONLY",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_SINGLE_CONNECTION_ONLY)));; break;
  case 99: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_MULTIPLE_CONNECTIONS_ALLOWED",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_MULTIPLE_CONNECTIONS_ALLOWED)));; break;
  case 100: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_BUFFER_DATA",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_BUFFER_DATA)));; break;
  case 101: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_STRICT_TYPE_CHECKING",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_STRICT_TYPE_CHECKING)));; break;
  case 102: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_IGNORE_UNIT_MISMATCH",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_IGNORE_UNIT_MISMATCH)));; break;
  case 103: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_ONLY_TRANSMIT_ON_CHANGE",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_ONLY_TRANSMIT_ON_CHANGE)));; break;
  case 104: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_ONLY_UPDATE_ON_CHANGE",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_ONLY_UPDATE_ON_CHANGE)));; break;
  case 105: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_IGNORE_INTERRUPTS",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_IGNORE_INTERRUPTS)));; break;
  case 106: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_MULTI_INPUT_HANDLING_METHOD",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_MULTI_INPUT_HANDLING_METHOD)));; break;
  case 107: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_INPUT_PRIORITY_LOCATION",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_INPUT_PRIORITY_LOCATION)));; break;
  case 108: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_CLEAR_PRIORITY_LIST",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_CLEAR_PRIORITY_LIST)));; break;
  case 109: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_HANDLE_OPTION_CONNECTIONS",SWIG_From_int(static_cast< int >(HELICS_HANDLE_OPTION_CONNECTIONS)));; break;
  case 110: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FILTER_TYPE_CUSTOM",SWIG_From_int(static_cast< int >(HELICS_FILTER_TYPE_CUSTOM)));; break;
  case 111: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FILTER_TYPE_DELAY",SWIG_From_int(static_cast< int >(HELICS_FILTER_TYPE_DELAY)));; break;
  case 112: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FILTER_TYPE_RANDOM_DELAY",SWIG_From_int(static_cast< int >(HELICS_FILTER_TYPE_RANDOM_DELAY)));; break;
  case 113: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FILTER_TYPE_RANDOM_DROP",SWIG_From_int(static_cast< int >(HELICS_FILTER_TYPE_RANDOM_DROP)));; break;
  case 114: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FILTER_TYPE_REROUTE",SWIG_From_int(static_cast< int >(HELICS_FILTER_TYPE_REROUTE)));; break;
  case 115: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FILTER_TYPE_CLONE",SWIG_From_int(static_cast< int >(HELICS_FILTER_TYPE_CLONE)));; break;
  case 116: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_FILTER_TYPE_FIREWALL",SWIG_From_int(static_cast< int >(HELICS_FILTER_TYPE_FIREWALL)));; break;
  case 117: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_SEQUENCING_MODE_FAST",SWIG_From_int(static_cast< int >(HELICS_SEQUENCING_MODE_FAST)));; break;
  case 118: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_SEQUENCING_MODE_ORDERED",SWIG_From_int(static_cast< int >(HELICS_SEQUENCING_MODE_ORDERED)));; break;
  case 119: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ITERATION_REQUEST_NO_ITERATION",SWIG_From_int(static_cast< int >(HELICS_ITERATION_REQUEST_NO_ITERATION)));; break;
  case 120: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ITERATION_REQUEST_FORCE_ITERATION",SWIG_From_int(static_cast< int >(HELICS_ITERATION_REQUEST_FORCE_ITERATION)));; break;
  case 121: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ITERATION_REQUEST_ITERATE_IF_NEEDED",SWIG_From_int(static_cast< int >(HELICS_ITERATION_REQUEST_ITERATE_IF_NEEDED)));; break;
  case 122: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ITERATION_RESULT_NEXT_STEP",SWIG_From_int(static_cast< int >(HELICS_ITERATION_RESULT_NEXT_STEP)));; break;
  case 123: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ITERATION_RESULT_ERROR",SWIG_From_int(static_cast< int >(HELICS_ITERATION_RESULT_ERROR)));; break;
  case 124: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ITERATION_RESULT_HALTED",SWIG_From_int(static_cast< int >(HELICS_ITERATION_RESULT_HALTED)));; break;
  case 125: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_ITERATION_RESULT_ITERATING",SWIG_From_int(static_cast< int >(HELICS_ITERATION_RESULT_ITERATING)));; break;
  case 126: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_STARTUP",SWIG_From_int(static_cast< int >(HELICS_STATE_STARTUP)));; break;
  case 127: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_INITIALIZATION",SWIG_From_int(static_cast< int >(HELICS_STATE_INITIALIZATION)));; break;
  case 128: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_EXECUTION",SWIG_From_int(static_cast< int >(HELICS_STATE_EXECUTION)));; break;
  case 129: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_FINALIZE",SWIG_From_int(static_cast< int >(HELICS_STATE_FINALIZE)));; break;
  case 130: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_ERROR",SWIG_From_int(static_cast< int >(HELICS_STATE_ERROR)));; break;
  case 131: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_PENDING_INIT",SWIG_From_int(static_cast< int >(HELICS_STATE_PENDING_INIT)));; break;
  case 132: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_PENDING_EXEC",SWIG_From_int(static_cast< int >(HELICS_STATE_PENDING_EXEC)));; break;
  case 133: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_PENDING_TIME",SWIG_From_int(static_cast< int >(HELICS_STATE_PENDING_TIME)));; break;
  case 134: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_PENDING_ITERATIVE_TIME",SWIG_From_int(static_cast< int >(HELICS_STATE_PENDING_ITERATIVE_TIME)));; break;
  case 135: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_PENDING_FINALIZE",SWIG_From_int(static_cast< int >(HELICS_STATE_PENDING_FINALIZE)));; break;
  case 136: *resv = SWIG_Matlab_SetConstant(module_ns,"HELICS_STATE_FINISHED",SWIG_From_int(static_cast< int >(HELICS_STATE_FINISHED)));; break;
  default:
    SWIG_Error(SWIG_RuntimeError, "No such constant.");
    return 1;
  }
  return 0;
}

SWIGINTERN const char* SwigFunctionName(int fcn_id) {
  switch(fcn_id) {
  case 0: return "swigConstant";
  case 1: return "swigFunctionName";
  case 2: return "swigConstantName";
  case 3: return "swigThis";
  case 4: return "swigTouch";
  case 5: return "HELICS_INVALID_OPTION_INDEX_get";
  case 6: return "HELICS_TIME_ZERO_get";
  case 7: return "HELICS_TIME_EPSILON_get";
  case 8: return "HELICS_TIME_INVALID_get";
  case 9: return "HELICS_TIME_MAXTIME_get";
  case 10: return "HELICS_TRUE_get";
  case 11: return "HELICS_FALSE_get";
  case 12: return "HelicsComplex_real_get";
  case 13: return "HelicsComplex_real_set";
  case 14: return "HelicsComplex_imag_get";
  case 15: return "HelicsComplex_imag_set";
  case 16: return "new_HelicsComplex";
  case 17: return "delete_HelicsComplex";
  case 18: return "_wrap_helicsGetVersion";
  case 19: return "_wrap_helicsGetBuildFlags";
  case 20: return "_wrap_helicsGetCompilerVersion";
  case 21: return "_wrap_helicsLoadSignalHandler";
  case 22: return "_wrap_helicsClearSignalHandler";
  case 23: return "_wrap_helicsAbort";
  case 24: return "_wrap_helicsIsCoreTypeAvailable";
  case 25: return "_wrap_helicsCreateCore";
  case 26: return "_wrap_helicsCreateCoreFromArgs";
  case 27: return "_wrap_helicsCoreClone";
  case 28: return "_wrap_helicsCoreIsValid";
  case 29: return "_wrap_helicsCreateBroker";
  case 30: return "_wrap_helicsCreateBrokerFromArgs";
  case 31: return "_wrap_helicsBrokerClone";
  case 32: return "_wrap_helicsBrokerIsValid";
  case 33: return "_wrap_helicsBrokerIsConnected";
  case 34: return "_wrap_helicsBrokerDataLink";
  case 35: return "_wrap_helicsBrokerAddSourceFilterToEndpoint";
  case 36: return "_wrap_helicsBrokerAddDestinationFilterToEndpoint";
  case 37: return "_wrap_helicsBrokerMakeConnections";
  case 38: return "_wrap_helicsCoreWaitForDisconnect";
  case 39: return "_wrap_helicsBrokerWaitForDisconnect";
  case 40: return "_wrap_helicsCoreIsConnected";
  case 41: return "_wrap_helicsCoreDataLink";
  case 42: return "_wrap_helicsCoreAddSourceFilterToEndpoint";
  case 43: return "_wrap_helicsCoreAddDestinationFilterToEndpoint";
  case 44: return "_wrap_helicsCoreMakeConnections";
  case 45: return "_wrap_helicsBrokerGetIdentifier";
  case 46: return "_wrap_helicsCoreGetIdentifier";
  case 47: return "_wrap_helicsBrokerGetAddress";
  case 48: return "_wrap_helicsCoreGetAddress";
  case 49: return "_wrap_helicsCoreSetReadyToInit";
  case 50: return "_wrap_helicsCoreConnect";
  case 51: return "_wrap_helicsCoreDisconnect";
  case 52: return "_wrap_helicsGetFederateByName";
  case 53: return "_wrap_helicsBrokerDisconnect";
  case 54: return "_wrap_helicsFederateDestroy";
  case 55: return "_wrap_helicsBrokerDestroy";
  case 56: return "_wrap_helicsCoreDestroy";
  case 57: return "_wrap_helicsCoreFree";
  case 58: return "_wrap_helicsBrokerFree";
  case 59: return "_wrap_helicsCreateValueFederate";
  case 60: return "_wrap_helicsCreateValueFederateFromConfig";
  case 61: return "_wrap_helicsCreateMessageFederate";
  case 62: return "_wrap_helicsCreateMessageFederateFromConfig";
  case 63: return "_wrap_helicsCreateCombinationFederate";
  case 64: return "_wrap_helicsCreateCombinationFederateFromConfig";
  case 65: return "_wrap_helicsFederateClone";
  case 66: return "_wrap_helicsCreateFederateInfo";
  case 67: return "_wrap_helicsFederateInfoClone";
  case 68: return "_wrap_helicsFederateInfoLoadFromArgs";
  case 69: return "_wrap_helicsFederateInfoFree";
  case 70: return "_wrap_helicsFederateIsValid";
  case 71: return "_wrap_helicsFederateInfoSetCoreName";
  case 72: return "_wrap_helicsFederateInfoSetCoreInitString";
  case 73: return "_wrap_helicsFederateInfoSetBrokerInitString";
  case 74: return "_wrap_helicsFederateInfoSetCoreType";
  case 75: return "_wrap_helicsFederateInfoSetCoreTypeFromString";
  case 76: return "_wrap_helicsFederateInfoSetBroker";
  case 77: return "_wrap_helicsFederateInfoSetBrokerKey";
  case 78: return "_wrap_helicsFederateInfoSetBrokerPort";
  case 79: return "_wrap_helicsFederateInfoSetLocalPort";
  case 80: return "_wrap_helicsGetPropertyIndex";
  case 81: return "_wrap_helicsGetFlagIndex";
  case 82: return "_wrap_helicsGetOptionIndex";
  case 83: return "_wrap_helicsGetOptionValue";
  case 84: return "_wrap_helicsFederateInfoSetFlagOption";
  case 85: return "_wrap_helicsFederateInfoSetSeparator";
  case 86: return "_wrap_helicsFederateInfoSetTimeProperty";
  case 87: return "_wrap_helicsFederateInfoSetIntegerProperty";
  case 88: return "_wrap_helicsFederateRegisterInterfaces";
  case 89: return "_wrap_helicsFederateGlobalError";
  case 90: return "_wrap_helicsFederateLocalError";
  case 91: return "_wrap_helicsFederateFinalize";
  case 92: return "_wrap_helicsFederateFinalizeAsync";
  case 93: return "_wrap_helicsFederateFinalizeComplete";
  case 94: return "_wrap_helicsFederateDisconnect";
  case 95: return "_wrap_helicsFederateDisconnectAsync";
  case 96: return "_wrap_helicsFederateDisconnectComplete";
  case 97: return "_wrap_helicsFederateFree";
  case 98: return "_wrap_helicsCloseLibrary";
  case 99: return "_wrap_helicsFederateEnterInitializingMode";
  case 100: return "_wrap_helicsFederateEnterInitializingModeAsync";
  case 101: return "_wrap_helicsFederateIsAsyncOperationCompleted";
  case 102: return "_wrap_helicsFederateEnterInitializingModeComplete";
  case 103: return "_wrap_helicsFederateEnterExecutingMode";
  case 104: return "_wrap_helicsFederateEnterExecutingModeAsync";
  case 105: return "_wrap_helicsFederateEnterExecutingModeComplete";
  case 106: return "_wrap_helicsFederateEnterExecutingModeIterative";
  case 107: return "_wrap_helicsFederateEnterExecutingModeIterativeAsync";
  case 108: return "_wrap_helicsFederateEnterExecutingModeIterativeComplete";
  case 109: return "_wrap_helicsFederateGetState";
  case 110: return "_wrap_helicsFederateGetCore";
  case 111: return "_wrap_helicsFederateRequestTime";
  case 112: return "_wrap_helicsFederateRequestTimeAdvance";
  case 113: return "_wrap_helicsFederateRequestNextStep";
  case 114: return "_wrap_helicsFederateRequestTimeIterative";
  case 115: return "_wrap_helicsFederateRequestTimeAsync";
  case 116: return "_wrap_helicsFederateRequestTimeComplete";
  case 117: return "_wrap_helicsFederateRequestTimeIterativeAsync";
  case 118: return "_wrap_helicsFederateRequestTimeIterativeComplete";
  case 119: return "_wrap_helicsFederateGetName";
  case 120: return "_wrap_helicsFederateSetTimeProperty";
  case 121: return "_wrap_helicsFederateSetFlagOption";
  case 122: return "_wrap_helicsFederateSetSeparator";
  case 123: return "_wrap_helicsFederateSetIntegerProperty";
  case 124: return "_wrap_helicsFederateGetTimeProperty";
  case 125: return "_wrap_helicsFederateGetFlagOption";
  case 126: return "_wrap_helicsFederateGetIntegerProperty";
  case 127: return "_wrap_helicsFederateGetCurrentTime";
  case 128: return "_wrap_helicsFederateSetGlobal";
  case 129: return "_wrap_helicsFederateSetTag";
  case 130: return "_wrap_helicsFederateGetTag";
  case 131: return "_wrap_helicsFederateAddDependency";
  case 132: return "_wrap_helicsFederateSetLogFile";
  case 133: return "_wrap_helicsFederateLogErrorMessage";
  case 134: return "_wrap_helicsFederateLogWarningMessage";
  case 135: return "_wrap_helicsFederateLogInfoMessage";
  case 136: return "_wrap_helicsFederateLogDebugMessage";
  case 137: return "_wrap_helicsFederateLogLevelMessage";
  case 138: return "_wrap_helicsFederateSendCommand";
  case 139: return "_wrap_helicsFederateGetCommand";
  case 140: return "_wrap_helicsFederateGetCommandSource";
  case 141: return "_wrap_helicsFederateWaitCommand";
  case 142: return "_wrap_helicsCoreSetGlobal";
  case 143: return "_wrap_helicsBrokerSetGlobal";
  case 144: return "_wrap_helicsCoreSendCommand";
  case 145: return "_wrap_helicsBrokerSendCommand";
  case 146: return "_wrap_helicsCoreSetLogFile";
  case 147: return "_wrap_helicsBrokerSetLogFile";
  case 148: return "_wrap_helicsBrokerSetTimeBarrier";
  case 149: return "_wrap_helicsBrokerClearTimeBarrier";
  case 150: return "_wrap_helicsBrokerGlobalError";
  case 151: return "_wrap_helicsCoreGlobalError";
  case 152: return "_wrap_helicsCreateQuery";
  case 153: return "_wrap_helicsQueryExecute";
  case 154: return "_wrap_helicsQueryCoreExecute";
  case 155: return "_wrap_helicsQueryBrokerExecute";
  case 156: return "_wrap_helicsQueryExecuteAsync";
  case 157: return "_wrap_helicsQueryExecuteComplete";
  case 158: return "_wrap_helicsQueryIsCompleted";
  case 159: return "_wrap_helicsQuerySetTarget";
  case 160: return "_wrap_helicsQuerySetQueryString";
  case 161: return "_wrap_helicsQuerySetOrdering";
  case 162: return "_wrap_helicsQueryFree";
  case 163: return "_wrap_helicsCleanupLibrary";
  case 164: return "_wrap_helicsFederateRegisterSubscription";
  case 165: return "_wrap_helicsFederateRegisterPublication";
  case 166: return "_wrap_helicsFederateRegisterTypePublication";
  case 167: return "_wrap_helicsFederateRegisterGlobalPublication";
  case 168: return "_wrap_helicsFederateRegisterGlobalTypePublication";
  case 169: return "_wrap_helicsFederateRegisterInput";
  case 170: return "_wrap_helicsFederateRegisterTypeInput";
  case 171: return "_wrap_helicsFederateRegisterGlobalInput";
  case 172: return "_wrap_helicsFederateRegisterGlobalTypeInput";
  case 173: return "_wrap_helicsFederateGetPublication";
  case 174: return "_wrap_helicsFederateGetPublicationByIndex";
  case 175: return "_wrap_helicsFederateGetInput";
  case 176: return "_wrap_helicsFederateGetInputByIndex";
  case 177: return "_wrap_helicsFederateGetSubscription";
  case 178: return "_wrap_helicsFederateClearUpdates";
  case 179: return "_wrap_helicsFederateRegisterFromPublicationJSON";
  case 180: return "_wrap_helicsFederatePublishJSON";
  case 181: return "_wrap_helicsPublicationIsValid";
  case 182: return "_wrap_helicsPublicationPublishBytes";
  case 183: return "_wrap_helicsPublicationPublishString";
  case 184: return "_wrap_helicsPublicationPublishInteger";
  case 185: return "_wrap_helicsPublicationPublishBoolean";
  case 186: return "_wrap_helicsPublicationPublishDouble";
  case 187: return "_wrap_helicsPublicationPublishTime";
  case 188: return "_wrap_helicsPublicationPublishChar";
  case 189: return "_wrap_helicsPublicationPublishComplex";
  case 190: return "_wrap_helicsPublicationPublishVector";
  case 191: return "_wrap_helicsPublicationPublishNamedPoint";
  case 192: return "_wrap_helicsPublicationAddTarget";
  case 193: return "_wrap_helicsInputIsValid";
  case 194: return "_wrap_helicsInputAddTarget";
  case 195: return "_wrap_helicsInputGetByteCount";
  case 196: return "_wrap_helicsInputGetBytes";
  case 197: return "_wrap_helicsInputGetStringSize";
  case 198: return "_wrap_helicsInputGetString";
  case 199: return "_wrap_helicsInputGetInteger";
  case 200: return "_wrap_helicsInputGetBoolean";
  case 201: return "_wrap_helicsInputGetDouble";
  case 202: return "_wrap_helicsInputGetTime";
  case 203: return "_wrap_helicsInputGetChar";
  case 204: return "_wrap_helicsInputGetComplex";
  case 205: return "_wrap_helicsInputGetVectorSize";
  case 206: return "_wrap_helicsInputGetVector";
  case 207: return "_wrap_helicsInputGetNamedPoint";
  case 208: return "_wrap_helicsInputSetDefaultBytes";
  case 209: return "_wrap_helicsInputSetDefaultString";
  case 210: return "_wrap_helicsInputSetDefaultInteger";
  case 211: return "_wrap_helicsInputSetDefaultBoolean";
  case 212: return "_wrap_helicsInputSetDefaultTime";
  case 213: return "_wrap_helicsInputSetDefaultChar";
  case 214: return "_wrap_helicsInputSetDefaultDouble";
  case 215: return "_wrap_helicsInputSetDefaultComplex";
  case 216: return "_wrap_helicsInputSetDefaultVector";
  case 217: return "_wrap_helicsInputSetDefaultNamedPoint";
  case 218: return "_wrap_helicsInputGetType";
  case 219: return "_wrap_helicsInputGetPublicationType";
  case 220: return "_wrap_helicsPublicationGetType";
  case 221: return "_wrap_helicsInputGetName";
  case 222: return "_wrap_helicsSubscriptionGetTarget";
  case 223: return "_wrap_helicsPublicationGetName";
  case 224: return "_wrap_helicsInputGetUnits";
  case 225: return "_wrap_helicsInputGetInjectionUnits";
  case 226: return "_wrap_helicsInputGetExtractionUnits";
  case 227: return "_wrap_helicsPublicationGetUnits";
  case 228: return "_wrap_helicsInputGetInfo";
  case 229: return "_wrap_helicsInputSetInfo";
  case 230: return "_wrap_helicsInputGetTag";
  case 231: return "_wrap_helicsInputSetTag";
  case 232: return "_wrap_helicsPublicationGetInfo";
  case 233: return "_wrap_helicsPublicationSetInfo";
  case 234: return "_wrap_helicsPublicationGetTag";
  case 235: return "_wrap_helicsPublicationSetTag";
  case 236: return "_wrap_helicsInputGetOption";
  case 237: return "_wrap_helicsInputSetOption";
  case 238: return "_wrap_helicsPublicationGetOption";
  case 239: return "_wrap_helicsPublicationSetOption";
  case 240: return "_wrap_helicsPublicationSetMinimumChange";
  case 241: return "_wrap_helicsInputSetMinimumChange";
  case 242: return "_wrap_helicsInputIsUpdated";
  case 243: return "_wrap_helicsInputLastUpdateTime";
  case 244: return "_wrap_helicsInputClearUpdate";
  case 245: return "_wrap_helicsFederateGetPublicationCount";
  case 246: return "_wrap_helicsFederateGetInputCount";
  case 247: return "_wrap_helicsFederateRegisterEndpoint";
  case 248: return "_wrap_helicsFederateRegisterGlobalEndpoint";
  case 249: return "_wrap_helicsFederateRegisterTargetedEndpoint";
  case 250: return "_wrap_helicsFederateRegisterGlobalTargetedEndpoint";
  case 251: return "_wrap_helicsFederateGetEndpoint";
  case 252: return "_wrap_helicsFederateGetEndpointByIndex";
  case 253: return "_wrap_helicsEndpointIsValid";
  case 254: return "_wrap_helicsEndpointSetDefaultDestination";
  case 255: return "_wrap_helicsEndpointGetDefaultDestination";
  case 256: return "_wrap_helicsEndpointSendBytes";
  case 257: return "_wrap_helicsEndpointSendBytesTo";
  case 258: return "_wrap_helicsEndpointSendBytesToAt";
  case 259: return "_wrap_helicsEndpointSendBytesAt";
  case 260: return "_wrap_helicsEndpointSendMessage";
  case 261: return "_wrap_helicsEndpointSendMessageZeroCopy";
  case 262: return "_wrap_helicsEndpointSubscribe";
  case 263: return "_wrap_helicsFederateHasMessage";
  case 264: return "_wrap_helicsEndpointHasMessage";
  case 265: return "_wrap_helicsFederatePendingMessageCount";
  case 266: return "_wrap_helicsEndpointPendingMessageCount";
  case 267: return "_wrap_helicsEndpointGetMessage";
  case 268: return "_wrap_helicsEndpointCreateMessage";
  case 269: return "_wrap_helicsFederateGetMessage";
  case 270: return "_wrap_helicsFederateCreateMessage";
  case 271: return "_wrap_helicsFederateClearMessages";
  case 272: return "_wrap_helicsEndpointGetType";
  case 273: return "_wrap_helicsEndpointGetName";
  case 274: return "_wrap_helicsFederateGetEndpointCount";
  case 275: return "_wrap_helicsEndpointGetInfo";
  case 276: return "_wrap_helicsEndpointSetInfo";
  case 277: return "_wrap_helicsEndpointGetTag";
  case 278: return "_wrap_helicsEndpointSetTag";
  case 279: return "_wrap_helicsEndpointSetOption";
  case 280: return "_wrap_helicsEndpointGetOption";
  case 281: return "_wrap_helicsEndpointAddSourceTarget";
  case 282: return "_wrap_helicsEndpointAddDestinationTarget";
  case 283: return "_wrap_helicsEndpointRemoveTarget";
  case 284: return "_wrap_helicsEndpointAddSourceFilter";
  case 285: return "_wrap_helicsEndpointAddDestinationFilter";
  case 286: return "_wrap_helicsMessageGetSource";
  case 287: return "_wrap_helicsMessageGetDestination";
  case 288: return "_wrap_helicsMessageGetOriginalSource";
  case 289: return "_wrap_helicsMessageGetOriginalDestination";
  case 290: return "_wrap_helicsMessageGetTime";
  case 291: return "_wrap_helicsMessageGetString";
  case 292: return "_wrap_helicsMessageGetMessageID";
  case 293: return "_wrap_helicsMessageGetFlagOption";
  case 294: return "_wrap_helicsMessageGetByteCount";
  case 295: return "_wrap_helicsMessageGetBytes";
  case 296: return "_wrap_helicsMessageGetBytesPointer";
  case 297: return "_wrap_helicsMessageIsValid";
  case 298: return "_wrap_helicsMessageSetSource";
  case 299: return "_wrap_helicsMessageSetDestination";
  case 300: return "_wrap_helicsMessageSetOriginalSource";
  case 301: return "_wrap_helicsMessageSetOriginalDestination";
  case 302: return "_wrap_helicsMessageSetTime";
  case 303: return "_wrap_helicsMessageReserve";
  case 304: return "_wrap_helicsMessageSetMessageID";
  case 305: return "_wrap_helicsMessageClearFlags";
  case 306: return "_wrap_helicsMessageSetFlagOption";
  case 307: return "_wrap_helicsMessageSetString";
  case 308: return "_wrap_helicsMessageSetData";
  case 309: return "_wrap_helicsMessageAppendData";
  case 310: return "_wrap_helicsMessageCopy";
  case 311: return "_wrap_helicsMessageClone";
  case 312: return "_wrap_helicsMessageFree";
  case 313: return "_wrap_helicsMessageClear";
  case 314: return "_wrap_helicsFederateRegisterFilter";
  case 315: return "_wrap_helicsFederateRegisterGlobalFilter";
  case 316: return "_wrap_helicsFederateRegisterCloningFilter";
  case 317: return "_wrap_helicsFederateRegisterGlobalCloningFilter";
  case 318: return "_wrap_helicsCoreRegisterFilter";
  case 319: return "_wrap_helicsCoreRegisterCloningFilter";
  case 320: return "_wrap_helicsFederateGetFilterCount";
  case 321: return "_wrap_helicsFederateGetFilter";
  case 322: return "_wrap_helicsFederateGetFilterByIndex";
  case 323: return "_wrap_helicsFilterIsValid";
  case 324: return "_wrap_helicsFilterGetName";
  case 325: return "_wrap_helicsFilterSet";
  case 326: return "_wrap_helicsFilterSetString";
  case 327: return "_wrap_helicsFilterAddDestinationTarget";
  case 328: return "_wrap_helicsFilterAddSourceTarget";
  case 329: return "_wrap_helicsFilterAddDeliveryEndpoint";
  case 330: return "_wrap_helicsFilterRemoveTarget";
  case 331: return "_wrap_helicsFilterRemoveDeliveryEndpoint";
  case 332: return "_wrap_helicsFilterGetInfo";
  case 333: return "_wrap_helicsFilterSetInfo";
  case 334: return "_wrap_helicsFilterGetTag";
  case 335: return "_wrap_helicsFilterSetTag";
  case 336: return "_wrap_helicsFilterSetOption";
  case 337: return "_wrap_helicsFilterGetOption";
  default: return 0;
  }
}

SWIGINTERN int swigFunctionName(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1) {
    SWIG_Error(SWIG_RuntimeError, "This mex file should only be called from inside the .m files generated by SWIG. The input should be the function ID.");
    return 1;
  }
  if (resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "The function should have one output.");
    return 1;
  }
  int fcn_id = (int)mxGetScalar(*argv);
  const char* s = SwigFunctionName(fcn_id);
  if (s==0) {
    SWIG_Error(SWIG_RuntimeError, "No such function ID.");
    return 1;
  }
  *resv = mxCreateString(s);
  return 0;
}

SWIGINTERN int swigThis(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc!=1 || resc!=1) {
    SWIG_Error(SWIG_RuntimeError, "swigThis should have one input and one output.");
    return 1;
  }
  SwigPtr* swig_ptr = SWIG_Matlab_getSwigPtr(argv[0]);
  if (!swig_ptr) {
    SWIG_Error(SWIG_RuntimeError, "The argument should be a SWIG class.");
    return 1;
  }
  resv[0] = mxCreateNumericMatrix(1, 1, mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(resv[0]) = (uint64_T)swig_ptr->ptr;
  return 0;
}

SWIGINTERN int swigTouch(int resc, mxArray** SWIGUNUSEDPARM(resv), int argc, mxArray** SWIGUNUSEDPARM(argv)) {
  if (argc!=0 || resc!=0) {
    SWIG_Error(SWIG_RuntimeError, "swigTouch should have no inputs or outputs.");
    return 1;
  }
  return 0;
}

extern "C"
void mexFunction(int resc, mxArray *resv[], int argc, const mxArray *argv[]) {
  /* Initialize module if first call */
  SWIG_Matlab_LoadModule();

  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    mexErrMsgTxt("This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
  int fcn_id = (int)mxGetScalar(*argv++);
  int flag=0;
  switch (fcn_id) {
  case 0: flag=swigConstant(resc,resv,argc,(mxArray**)(argv)); break;
  case 1: flag=swigFunctionName(resc,resv,argc,(mxArray**)(argv)); break;
  case 2: flag=swigConstantName(resc,resv,argc,(mxArray**)(argv)); break;
  case 3: flag=swigThis(resc,resv,argc,(mxArray**)(argv)); break;
  case 4: flag=swigTouch(resc,resv,argc,(mxArray**)(argv)); break;
  case 5: flag=_wrap_HELICS_INVALID_OPTION_INDEX_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 6: flag=_wrap_HELICS_TIME_ZERO_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 7: flag=_wrap_HELICS_TIME_EPSILON_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 8: flag=_wrap_HELICS_TIME_INVALID_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 9: flag=_wrap_HELICS_TIME_MAXTIME_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 10: flag=_wrap_HELICS_TRUE_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 11: flag=_wrap_HELICS_FALSE_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 12: flag=_wrap_HelicsComplex_real_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 13: flag=_wrap_HelicsComplex_real_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 14: flag=_wrap_HelicsComplex_imag_get(resc,resv,argc,(mxArray**)(argv)); break;
  case 15: flag=_wrap_HelicsComplex_imag_set(resc,resv,argc,(mxArray**)(argv)); break;
  case 16: flag=_wrap_new_HelicsComplex(resc,resv,argc,(mxArray**)(argv)); break;
  case 17: flag=_wrap_delete_HelicsComplex(resc,resv,argc,(mxArray**)(argv)); break;
  case 18: flag=_wrap_helicsGetVersion(resc,resv,argc,(mxArray**)(argv)); break;
  case 19: flag=_wrap_helicsGetBuildFlags(resc,resv,argc,(mxArray**)(argv)); break;
  case 20: flag=_wrap_helicsGetCompilerVersion(resc,resv,argc,(mxArray**)(argv)); break;
  case 21: flag=_wrap_helicsLoadSignalHandler(resc,resv,argc,(mxArray**)(argv)); break;
  case 22: flag=_wrap_helicsClearSignalHandler(resc,resv,argc,(mxArray**)(argv)); break;
  case 23: flag=_wrap_helicsAbort(resc,resv,argc,(mxArray**)(argv)); break;
  case 24: flag=_wrap_helicsIsCoreTypeAvailable(resc,resv,argc,(mxArray**)(argv)); break;
  case 25: flag=_wrap_helicsCreateCore(resc,resv,argc,(mxArray**)(argv)); break;
  case 26: flag=_wrap_helicsCreateCoreFromArgs(resc,resv,argc,(mxArray**)(argv)); break;
  case 27: flag=_wrap_helicsCoreClone(resc,resv,argc,(mxArray**)(argv)); break;
  case 28: flag=_wrap_helicsCoreIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 29: flag=_wrap_helicsCreateBroker(resc,resv,argc,(mxArray**)(argv)); break;
  case 30: flag=_wrap_helicsCreateBrokerFromArgs(resc,resv,argc,(mxArray**)(argv)); break;
  case 31: flag=_wrap_helicsBrokerClone(resc,resv,argc,(mxArray**)(argv)); break;
  case 32: flag=_wrap_helicsBrokerIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 33: flag=_wrap_helicsBrokerIsConnected(resc,resv,argc,(mxArray**)(argv)); break;
  case 34: flag=_wrap_helicsBrokerDataLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 35: flag=_wrap_helicsBrokerAddSourceFilterToEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 36: flag=_wrap_helicsBrokerAddDestinationFilterToEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 37: flag=_wrap_helicsBrokerMakeConnections(resc,resv,argc,(mxArray**)(argv)); break;
  case 38: flag=_wrap_helicsCoreWaitForDisconnect(resc,resv,argc,(mxArray**)(argv)); break;
  case 39: flag=_wrap_helicsBrokerWaitForDisconnect(resc,resv,argc,(mxArray**)(argv)); break;
  case 40: flag=_wrap_helicsCoreIsConnected(resc,resv,argc,(mxArray**)(argv)); break;
  case 41: flag=_wrap_helicsCoreDataLink(resc,resv,argc,(mxArray**)(argv)); break;
  case 42: flag=_wrap_helicsCoreAddSourceFilterToEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 43: flag=_wrap_helicsCoreAddDestinationFilterToEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 44: flag=_wrap_helicsCoreMakeConnections(resc,resv,argc,(mxArray**)(argv)); break;
  case 45: flag=_wrap_helicsBrokerGetIdentifier(resc,resv,argc,(mxArray**)(argv)); break;
  case 46: flag=_wrap_helicsCoreGetIdentifier(resc,resv,argc,(mxArray**)(argv)); break;
  case 47: flag=_wrap_helicsBrokerGetAddress(resc,resv,argc,(mxArray**)(argv)); break;
  case 48: flag=_wrap_helicsCoreGetAddress(resc,resv,argc,(mxArray**)(argv)); break;
  case 49: flag=_wrap_helicsCoreSetReadyToInit(resc,resv,argc,(mxArray**)(argv)); break;
  case 50: flag=_wrap_helicsCoreConnect(resc,resv,argc,(mxArray**)(argv)); break;
  case 51: flag=_wrap_helicsCoreDisconnect(resc,resv,argc,(mxArray**)(argv)); break;
  case 52: flag=_wrap_helicsGetFederateByName(resc,resv,argc,(mxArray**)(argv)); break;
  case 53: flag=_wrap_helicsBrokerDisconnect(resc,resv,argc,(mxArray**)(argv)); break;
  case 54: flag=_wrap_helicsFederateDestroy(resc,resv,argc,(mxArray**)(argv)); break;
  case 55: flag=_wrap_helicsBrokerDestroy(resc,resv,argc,(mxArray**)(argv)); break;
  case 56: flag=_wrap_helicsCoreDestroy(resc,resv,argc,(mxArray**)(argv)); break;
  case 57: flag=_wrap_helicsCoreFree(resc,resv,argc,(mxArray**)(argv)); break;
  case 58: flag=_wrap_helicsBrokerFree(resc,resv,argc,(mxArray**)(argv)); break;
  case 59: flag=_wrap_helicsCreateValueFederate(resc,resv,argc,(mxArray**)(argv)); break;
  case 60: flag=_wrap_helicsCreateValueFederateFromConfig(resc,resv,argc,(mxArray**)(argv)); break;
  case 61: flag=_wrap_helicsCreateMessageFederate(resc,resv,argc,(mxArray**)(argv)); break;
  case 62: flag=_wrap_helicsCreateMessageFederateFromConfig(resc,resv,argc,(mxArray**)(argv)); break;
  case 63: flag=_wrap_helicsCreateCombinationFederate(resc,resv,argc,(mxArray**)(argv)); break;
  case 64: flag=_wrap_helicsCreateCombinationFederateFromConfig(resc,resv,argc,(mxArray**)(argv)); break;
  case 65: flag=_wrap_helicsFederateClone(resc,resv,argc,(mxArray**)(argv)); break;
  case 66: flag=_wrap_helicsCreateFederateInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 67: flag=_wrap_helicsFederateInfoClone(resc,resv,argc,(mxArray**)(argv)); break;
  case 68: flag=_wrap_helicsFederateInfoLoadFromArgs(resc,resv,argc,(mxArray**)(argv)); break;
  case 69: flag=_wrap_helicsFederateInfoFree(resc,resv,argc,(mxArray**)(argv)); break;
  case 70: flag=_wrap_helicsFederateIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 71: flag=_wrap_helicsFederateInfoSetCoreName(resc,resv,argc,(mxArray**)(argv)); break;
  case 72: flag=_wrap_helicsFederateInfoSetCoreInitString(resc,resv,argc,(mxArray**)(argv)); break;
  case 73: flag=_wrap_helicsFederateInfoSetBrokerInitString(resc,resv,argc,(mxArray**)(argv)); break;
  case 74: flag=_wrap_helicsFederateInfoSetCoreType(resc,resv,argc,(mxArray**)(argv)); break;
  case 75: flag=_wrap_helicsFederateInfoSetCoreTypeFromString(resc,resv,argc,(mxArray**)(argv)); break;
  case 76: flag=_wrap_helicsFederateInfoSetBroker(resc,resv,argc,(mxArray**)(argv)); break;
  case 77: flag=_wrap_helicsFederateInfoSetBrokerKey(resc,resv,argc,(mxArray**)(argv)); break;
  case 78: flag=_wrap_helicsFederateInfoSetBrokerPort(resc,resv,argc,(mxArray**)(argv)); break;
  case 79: flag=_wrap_helicsFederateInfoSetLocalPort(resc,resv,argc,(mxArray**)(argv)); break;
  case 80: flag=_wrap_helicsGetPropertyIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 81: flag=_wrap_helicsGetFlagIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 82: flag=_wrap_helicsGetOptionIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 83: flag=_wrap_helicsGetOptionValue(resc,resv,argc,(mxArray**)(argv)); break;
  case 84: flag=_wrap_helicsFederateInfoSetFlagOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 85: flag=_wrap_helicsFederateInfoSetSeparator(resc,resv,argc,(mxArray**)(argv)); break;
  case 86: flag=_wrap_helicsFederateInfoSetTimeProperty(resc,resv,argc,(mxArray**)(argv)); break;
  case 87: flag=_wrap_helicsFederateInfoSetIntegerProperty(resc,resv,argc,(mxArray**)(argv)); break;
  case 88: flag=_wrap_helicsFederateRegisterInterfaces(resc,resv,argc,(mxArray**)(argv)); break;
  case 89: flag=_wrap_helicsFederateGlobalError(resc,resv,argc,(mxArray**)(argv)); break;
  case 90: flag=_wrap_helicsFederateLocalError(resc,resv,argc,(mxArray**)(argv)); break;
  case 91: flag=_wrap_helicsFederateFinalize(resc,resv,argc,(mxArray**)(argv)); break;
  case 92: flag=_wrap_helicsFederateFinalizeAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 93: flag=_wrap_helicsFederateFinalizeComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 94: flag=_wrap_helicsFederateDisconnect(resc,resv,argc,(mxArray**)(argv)); break;
  case 95: flag=_wrap_helicsFederateDisconnectAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 96: flag=_wrap_helicsFederateDisconnectComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 97: flag=_wrap_helicsFederateFree(resc,resv,argc,(mxArray**)(argv)); break;
  case 98: flag=_wrap_helicsCloseLibrary(resc,resv,argc,(mxArray**)(argv)); break;
  case 99: flag=_wrap_helicsFederateEnterInitializingMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 100: flag=_wrap_helicsFederateEnterInitializingModeAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 101: flag=_wrap_helicsFederateIsAsyncOperationCompleted(resc,resv,argc,(mxArray**)(argv)); break;
  case 102: flag=_wrap_helicsFederateEnterInitializingModeComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 103: flag=_wrap_helicsFederateEnterExecutingMode(resc,resv,argc,(mxArray**)(argv)); break;
  case 104: flag=_wrap_helicsFederateEnterExecutingModeAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 105: flag=_wrap_helicsFederateEnterExecutingModeComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 106: flag=_wrap_helicsFederateEnterExecutingModeIterative(resc,resv,argc,(mxArray**)(argv)); break;
  case 107: flag=_wrap_helicsFederateEnterExecutingModeIterativeAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 108: flag=_wrap_helicsFederateEnterExecutingModeIterativeComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 109: flag=_wrap_helicsFederateGetState(resc,resv,argc,(mxArray**)(argv)); break;
  case 110: flag=_wrap_helicsFederateGetCore(resc,resv,argc,(mxArray**)(argv)); break;
  case 111: flag=_wrap_helicsFederateRequestTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 112: flag=_wrap_helicsFederateRequestTimeAdvance(resc,resv,argc,(mxArray**)(argv)); break;
  case 113: flag=_wrap_helicsFederateRequestNextStep(resc,resv,argc,(mxArray**)(argv)); break;
  case 114: flag=_wrap_helicsFederateRequestTimeIterative(resc,resv,argc,(mxArray**)(argv)); break;
  case 115: flag=_wrap_helicsFederateRequestTimeAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 116: flag=_wrap_helicsFederateRequestTimeComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 117: flag=_wrap_helicsFederateRequestTimeIterativeAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 118: flag=_wrap_helicsFederateRequestTimeIterativeComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 119: flag=_wrap_helicsFederateGetName(resc,resv,argc,(mxArray**)(argv)); break;
  case 120: flag=_wrap_helicsFederateSetTimeProperty(resc,resv,argc,(mxArray**)(argv)); break;
  case 121: flag=_wrap_helicsFederateSetFlagOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 122: flag=_wrap_helicsFederateSetSeparator(resc,resv,argc,(mxArray**)(argv)); break;
  case 123: flag=_wrap_helicsFederateSetIntegerProperty(resc,resv,argc,(mxArray**)(argv)); break;
  case 124: flag=_wrap_helicsFederateGetTimeProperty(resc,resv,argc,(mxArray**)(argv)); break;
  case 125: flag=_wrap_helicsFederateGetFlagOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 126: flag=_wrap_helicsFederateGetIntegerProperty(resc,resv,argc,(mxArray**)(argv)); break;
  case 127: flag=_wrap_helicsFederateGetCurrentTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 128: flag=_wrap_helicsFederateSetGlobal(resc,resv,argc,(mxArray**)(argv)); break;
  case 129: flag=_wrap_helicsFederateSetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 130: flag=_wrap_helicsFederateGetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 131: flag=_wrap_helicsFederateAddDependency(resc,resv,argc,(mxArray**)(argv)); break;
  case 132: flag=_wrap_helicsFederateSetLogFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 133: flag=_wrap_helicsFederateLogErrorMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 134: flag=_wrap_helicsFederateLogWarningMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 135: flag=_wrap_helicsFederateLogInfoMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 136: flag=_wrap_helicsFederateLogDebugMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 137: flag=_wrap_helicsFederateLogLevelMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 138: flag=_wrap_helicsFederateSendCommand(resc,resv,argc,(mxArray**)(argv)); break;
  case 139: flag=_wrap_helicsFederateGetCommand(resc,resv,argc,(mxArray**)(argv)); break;
  case 140: flag=_wrap_helicsFederateGetCommandSource(resc,resv,argc,(mxArray**)(argv)); break;
  case 141: flag=_wrap_helicsFederateWaitCommand(resc,resv,argc,(mxArray**)(argv)); break;
  case 142: flag=_wrap_helicsCoreSetGlobal(resc,resv,argc,(mxArray**)(argv)); break;
  case 143: flag=_wrap_helicsBrokerSetGlobal(resc,resv,argc,(mxArray**)(argv)); break;
  case 144: flag=_wrap_helicsCoreSendCommand(resc,resv,argc,(mxArray**)(argv)); break;
  case 145: flag=_wrap_helicsBrokerSendCommand(resc,resv,argc,(mxArray**)(argv)); break;
  case 146: flag=_wrap_helicsCoreSetLogFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 147: flag=_wrap_helicsBrokerSetLogFile(resc,resv,argc,(mxArray**)(argv)); break;
  case 148: flag=_wrap_helicsBrokerSetTimeBarrier(resc,resv,argc,(mxArray**)(argv)); break;
  case 149: flag=_wrap_helicsBrokerClearTimeBarrier(resc,resv,argc,(mxArray**)(argv)); break;
  case 150: flag=_wrap_helicsBrokerGlobalError(resc,resv,argc,(mxArray**)(argv)); break;
  case 151: flag=_wrap_helicsCoreGlobalError(resc,resv,argc,(mxArray**)(argv)); break;
  case 152: flag=_wrap_helicsCreateQuery(resc,resv,argc,(mxArray**)(argv)); break;
  case 153: flag=_wrap_helicsQueryExecute(resc,resv,argc,(mxArray**)(argv)); break;
  case 154: flag=_wrap_helicsQueryCoreExecute(resc,resv,argc,(mxArray**)(argv)); break;
  case 155: flag=_wrap_helicsQueryBrokerExecute(resc,resv,argc,(mxArray**)(argv)); break;
  case 156: flag=_wrap_helicsQueryExecuteAsync(resc,resv,argc,(mxArray**)(argv)); break;
  case 157: flag=_wrap_helicsQueryExecuteComplete(resc,resv,argc,(mxArray**)(argv)); break;
  case 158: flag=_wrap_helicsQueryIsCompleted(resc,resv,argc,(mxArray**)(argv)); break;
  case 159: flag=_wrap_helicsQuerySetTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 160: flag=_wrap_helicsQuerySetQueryString(resc,resv,argc,(mxArray**)(argv)); break;
  case 161: flag=_wrap_helicsQuerySetOrdering(resc,resv,argc,(mxArray**)(argv)); break;
  case 162: flag=_wrap_helicsQueryFree(resc,resv,argc,(mxArray**)(argv)); break;
  case 163: flag=_wrap_helicsCleanupLibrary(resc,resv,argc,(mxArray**)(argv)); break;
  case 164: flag=_wrap_helicsFederateRegisterSubscription(resc,resv,argc,(mxArray**)(argv)); break;
  case 165: flag=_wrap_helicsFederateRegisterPublication(resc,resv,argc,(mxArray**)(argv)); break;
  case 166: flag=_wrap_helicsFederateRegisterTypePublication(resc,resv,argc,(mxArray**)(argv)); break;
  case 167: flag=_wrap_helicsFederateRegisterGlobalPublication(resc,resv,argc,(mxArray**)(argv)); break;
  case 168: flag=_wrap_helicsFederateRegisterGlobalTypePublication(resc,resv,argc,(mxArray**)(argv)); break;
  case 169: flag=_wrap_helicsFederateRegisterInput(resc,resv,argc,(mxArray**)(argv)); break;
  case 170: flag=_wrap_helicsFederateRegisterTypeInput(resc,resv,argc,(mxArray**)(argv)); break;
  case 171: flag=_wrap_helicsFederateRegisterGlobalInput(resc,resv,argc,(mxArray**)(argv)); break;
  case 172: flag=_wrap_helicsFederateRegisterGlobalTypeInput(resc,resv,argc,(mxArray**)(argv)); break;
  case 173: flag=_wrap_helicsFederateGetPublication(resc,resv,argc,(mxArray**)(argv)); break;
  case 174: flag=_wrap_helicsFederateGetPublicationByIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 175: flag=_wrap_helicsFederateGetInput(resc,resv,argc,(mxArray**)(argv)); break;
  case 176: flag=_wrap_helicsFederateGetInputByIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 177: flag=_wrap_helicsFederateGetSubscription(resc,resv,argc,(mxArray**)(argv)); break;
  case 178: flag=_wrap_helicsFederateClearUpdates(resc,resv,argc,(mxArray**)(argv)); break;
  case 179: flag=_wrap_helicsFederateRegisterFromPublicationJSON(resc,resv,argc,(mxArray**)(argv)); break;
  case 180: flag=_wrap_helicsFederatePublishJSON(resc,resv,argc,(mxArray**)(argv)); break;
  case 181: flag=_wrap_helicsPublicationIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 182: flag=_wrap_helicsPublicationPublishBytes(resc,resv,argc,(mxArray**)(argv)); break;
  case 183: flag=_wrap_helicsPublicationPublishString(resc,resv,argc,(mxArray**)(argv)); break;
  case 184: flag=_wrap_helicsPublicationPublishInteger(resc,resv,argc,(mxArray**)(argv)); break;
  case 185: flag=_wrap_helicsPublicationPublishBoolean(resc,resv,argc,(mxArray**)(argv)); break;
  case 186: flag=_wrap_helicsPublicationPublishDouble(resc,resv,argc,(mxArray**)(argv)); break;
  case 187: flag=_wrap_helicsPublicationPublishTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 188: flag=_wrap_helicsPublicationPublishChar(resc,resv,argc,(mxArray**)(argv)); break;
  case 189: flag=_wrap_helicsPublicationPublishComplex(resc,resv,argc,(mxArray**)(argv)); break;
  case 190: flag=_wrap_helicsPublicationPublishVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 191: flag=_wrap_helicsPublicationPublishNamedPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 192: flag=_wrap_helicsPublicationAddTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 193: flag=_wrap_helicsInputIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 194: flag=_wrap_helicsInputAddTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 195: flag=_wrap_helicsInputGetByteCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 196: flag=_wrap_helicsInputGetBytes(resc,resv,argc,(mxArray**)(argv)); break;
  case 197: flag=_wrap_helicsInputGetStringSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 198: flag=_wrap_helicsInputGetString(resc,resv,argc,(mxArray**)(argv)); break;
  case 199: flag=_wrap_helicsInputGetInteger(resc,resv,argc,(mxArray**)(argv)); break;
  case 200: flag=_wrap_helicsInputGetBoolean(resc,resv,argc,(mxArray**)(argv)); break;
  case 201: flag=_wrap_helicsInputGetDouble(resc,resv,argc,(mxArray**)(argv)); break;
  case 202: flag=_wrap_helicsInputGetTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 203: flag=_wrap_helicsInputGetChar(resc,resv,argc,(mxArray**)(argv)); break;
  case 204: flag=_wrap_helicsInputGetComplex(resc,resv,argc,(mxArray**)(argv)); break;
  case 205: flag=_wrap_helicsInputGetVectorSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 206: flag=_wrap_helicsInputGetVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 207: flag=_wrap_helicsInputGetNamedPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 208: flag=_wrap_helicsInputSetDefaultBytes(resc,resv,argc,(mxArray**)(argv)); break;
  case 209: flag=_wrap_helicsInputSetDefaultString(resc,resv,argc,(mxArray**)(argv)); break;
  case 210: flag=_wrap_helicsInputSetDefaultInteger(resc,resv,argc,(mxArray**)(argv)); break;
  case 211: flag=_wrap_helicsInputSetDefaultBoolean(resc,resv,argc,(mxArray**)(argv)); break;
  case 212: flag=_wrap_helicsInputSetDefaultTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 213: flag=_wrap_helicsInputSetDefaultChar(resc,resv,argc,(mxArray**)(argv)); break;
  case 214: flag=_wrap_helicsInputSetDefaultDouble(resc,resv,argc,(mxArray**)(argv)); break;
  case 215: flag=_wrap_helicsInputSetDefaultComplex(resc,resv,argc,(mxArray**)(argv)); break;
  case 216: flag=_wrap_helicsInputSetDefaultVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 217: flag=_wrap_helicsInputSetDefaultNamedPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 218: flag=_wrap_helicsInputGetType(resc,resv,argc,(mxArray**)(argv)); break;
  case 219: flag=_wrap_helicsInputGetPublicationType(resc,resv,argc,(mxArray**)(argv)); break;
  case 220: flag=_wrap_helicsPublicationGetType(resc,resv,argc,(mxArray**)(argv)); break;
  case 221: flag=_wrap_helicsInputGetName(resc,resv,argc,(mxArray**)(argv)); break;
  case 222: flag=_wrap_helicsSubscriptionGetTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 223: flag=_wrap_helicsPublicationGetName(resc,resv,argc,(mxArray**)(argv)); break;
  case 224: flag=_wrap_helicsInputGetUnits(resc,resv,argc,(mxArray**)(argv)); break;
  case 225: flag=_wrap_helicsInputGetInjectionUnits(resc,resv,argc,(mxArray**)(argv)); break;
  case 226: flag=_wrap_helicsInputGetExtractionUnits(resc,resv,argc,(mxArray**)(argv)); break;
  case 227: flag=_wrap_helicsPublicationGetUnits(resc,resv,argc,(mxArray**)(argv)); break;
  case 228: flag=_wrap_helicsInputGetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 229: flag=_wrap_helicsInputSetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 230: flag=_wrap_helicsInputGetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 231: flag=_wrap_helicsInputSetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 232: flag=_wrap_helicsPublicationGetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 233: flag=_wrap_helicsPublicationSetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 234: flag=_wrap_helicsPublicationGetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 235: flag=_wrap_helicsPublicationSetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 236: flag=_wrap_helicsInputGetOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 237: flag=_wrap_helicsInputSetOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 238: flag=_wrap_helicsPublicationGetOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 239: flag=_wrap_helicsPublicationSetOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 240: flag=_wrap_helicsPublicationSetMinimumChange(resc,resv,argc,(mxArray**)(argv)); break;
  case 241: flag=_wrap_helicsInputSetMinimumChange(resc,resv,argc,(mxArray**)(argv)); break;
  case 242: flag=_wrap_helicsInputIsUpdated(resc,resv,argc,(mxArray**)(argv)); break;
  case 243: flag=_wrap_helicsInputLastUpdateTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 244: flag=_wrap_helicsInputClearUpdate(resc,resv,argc,(mxArray**)(argv)); break;
  case 245: flag=_wrap_helicsFederateGetPublicationCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 246: flag=_wrap_helicsFederateGetInputCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 247: flag=_wrap_helicsFederateRegisterEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 248: flag=_wrap_helicsFederateRegisterGlobalEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 249: flag=_wrap_helicsFederateRegisterTargetedEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 250: flag=_wrap_helicsFederateRegisterGlobalTargetedEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 251: flag=_wrap_helicsFederateGetEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 252: flag=_wrap_helicsFederateGetEndpointByIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 253: flag=_wrap_helicsEndpointIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 254: flag=_wrap_helicsEndpointSetDefaultDestination(resc,resv,argc,(mxArray**)(argv)); break;
  case 255: flag=_wrap_helicsEndpointGetDefaultDestination(resc,resv,argc,(mxArray**)(argv)); break;
  case 256: flag=_wrap_helicsEndpointSendBytes(resc,resv,argc,(mxArray**)(argv)); break;
  case 257: flag=_wrap_helicsEndpointSendBytesTo(resc,resv,argc,(mxArray**)(argv)); break;
  case 258: flag=_wrap_helicsEndpointSendBytesToAt(resc,resv,argc,(mxArray**)(argv)); break;
  case 259: flag=_wrap_helicsEndpointSendBytesAt(resc,resv,argc,(mxArray**)(argv)); break;
  case 260: flag=_wrap_helicsEndpointSendMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 261: flag=_wrap_helicsEndpointSendMessageZeroCopy(resc,resv,argc,(mxArray**)(argv)); break;
  case 262: flag=_wrap_helicsEndpointSubscribe(resc,resv,argc,(mxArray**)(argv)); break;
  case 263: flag=_wrap_helicsFederateHasMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 264: flag=_wrap_helicsEndpointHasMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 265: flag=_wrap_helicsFederatePendingMessageCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 266: flag=_wrap_helicsEndpointPendingMessageCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 267: flag=_wrap_helicsEndpointGetMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 268: flag=_wrap_helicsEndpointCreateMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 269: flag=_wrap_helicsFederateGetMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 270: flag=_wrap_helicsFederateCreateMessage(resc,resv,argc,(mxArray**)(argv)); break;
  case 271: flag=_wrap_helicsFederateClearMessages(resc,resv,argc,(mxArray**)(argv)); break;
  case 272: flag=_wrap_helicsEndpointGetType(resc,resv,argc,(mxArray**)(argv)); break;
  case 273: flag=_wrap_helicsEndpointGetName(resc,resv,argc,(mxArray**)(argv)); break;
  case 274: flag=_wrap_helicsFederateGetEndpointCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 275: flag=_wrap_helicsEndpointGetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 276: flag=_wrap_helicsEndpointSetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 277: flag=_wrap_helicsEndpointGetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 278: flag=_wrap_helicsEndpointSetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 279: flag=_wrap_helicsEndpointSetOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 280: flag=_wrap_helicsEndpointGetOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 281: flag=_wrap_helicsEndpointAddSourceTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 282: flag=_wrap_helicsEndpointAddDestinationTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 283: flag=_wrap_helicsEndpointRemoveTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 284: flag=_wrap_helicsEndpointAddSourceFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 285: flag=_wrap_helicsEndpointAddDestinationFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 286: flag=_wrap_helicsMessageGetSource(resc,resv,argc,(mxArray**)(argv)); break;
  case 287: flag=_wrap_helicsMessageGetDestination(resc,resv,argc,(mxArray**)(argv)); break;
  case 288: flag=_wrap_helicsMessageGetOriginalSource(resc,resv,argc,(mxArray**)(argv)); break;
  case 289: flag=_wrap_helicsMessageGetOriginalDestination(resc,resv,argc,(mxArray**)(argv)); break;
  case 290: flag=_wrap_helicsMessageGetTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 291: flag=_wrap_helicsMessageGetString(resc,resv,argc,(mxArray**)(argv)); break;
  case 292: flag=_wrap_helicsMessageGetMessageID(resc,resv,argc,(mxArray**)(argv)); break;
  case 293: flag=_wrap_helicsMessageGetFlagOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 294: flag=_wrap_helicsMessageGetByteCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 295: flag=_wrap_helicsMessageGetBytes(resc,resv,argc,(mxArray**)(argv)); break;
  case 296: flag=_wrap_helicsMessageGetBytesPointer(resc,resv,argc,(mxArray**)(argv)); break;
  case 297: flag=_wrap_helicsMessageIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 298: flag=_wrap_helicsMessageSetSource(resc,resv,argc,(mxArray**)(argv)); break;
  case 299: flag=_wrap_helicsMessageSetDestination(resc,resv,argc,(mxArray**)(argv)); break;
  case 300: flag=_wrap_helicsMessageSetOriginalSource(resc,resv,argc,(mxArray**)(argv)); break;
  case 301: flag=_wrap_helicsMessageSetOriginalDestination(resc,resv,argc,(mxArray**)(argv)); break;
  case 302: flag=_wrap_helicsMessageSetTime(resc,resv,argc,(mxArray**)(argv)); break;
  case 303: flag=_wrap_helicsMessageReserve(resc,resv,argc,(mxArray**)(argv)); break;
  case 304: flag=_wrap_helicsMessageSetMessageID(resc,resv,argc,(mxArray**)(argv)); break;
  case 305: flag=_wrap_helicsMessageClearFlags(resc,resv,argc,(mxArray**)(argv)); break;
  case 306: flag=_wrap_helicsMessageSetFlagOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 307: flag=_wrap_helicsMessageSetString(resc,resv,argc,(mxArray**)(argv)); break;
  case 308: flag=_wrap_helicsMessageSetData(resc,resv,argc,(mxArray**)(argv)); break;
  case 309: flag=_wrap_helicsMessageAppendData(resc,resv,argc,(mxArray**)(argv)); break;
  case 310: flag=_wrap_helicsMessageCopy(resc,resv,argc,(mxArray**)(argv)); break;
  case 311: flag=_wrap_helicsMessageClone(resc,resv,argc,(mxArray**)(argv)); break;
  case 312: flag=_wrap_helicsMessageFree(resc,resv,argc,(mxArray**)(argv)); break;
  case 313: flag=_wrap_helicsMessageClear(resc,resv,argc,(mxArray**)(argv)); break;
  case 314: flag=_wrap_helicsFederateRegisterFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 315: flag=_wrap_helicsFederateRegisterGlobalFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 316: flag=_wrap_helicsFederateRegisterCloningFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 317: flag=_wrap_helicsFederateRegisterGlobalCloningFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 318: flag=_wrap_helicsCoreRegisterFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 319: flag=_wrap_helicsCoreRegisterCloningFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 320: flag=_wrap_helicsFederateGetFilterCount(resc,resv,argc,(mxArray**)(argv)); break;
  case 321: flag=_wrap_helicsFederateGetFilter(resc,resv,argc,(mxArray**)(argv)); break;
  case 322: flag=_wrap_helicsFederateGetFilterByIndex(resc,resv,argc,(mxArray**)(argv)); break;
  case 323: flag=_wrap_helicsFilterIsValid(resc,resv,argc,(mxArray**)(argv)); break;
  case 324: flag=_wrap_helicsFilterGetName(resc,resv,argc,(mxArray**)(argv)); break;
  case 325: flag=_wrap_helicsFilterSet(resc,resv,argc,(mxArray**)(argv)); break;
  case 326: flag=_wrap_helicsFilterSetString(resc,resv,argc,(mxArray**)(argv)); break;
  case 327: flag=_wrap_helicsFilterAddDestinationTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 328: flag=_wrap_helicsFilterAddSourceTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 329: flag=_wrap_helicsFilterAddDeliveryEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 330: flag=_wrap_helicsFilterRemoveTarget(resc,resv,argc,(mxArray**)(argv)); break;
  case 331: flag=_wrap_helicsFilterRemoveDeliveryEndpoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 332: flag=_wrap_helicsFilterGetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 333: flag=_wrap_helicsFilterSetInfo(resc,resv,argc,(mxArray**)(argv)); break;
  case 334: flag=_wrap_helicsFilterGetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 335: flag=_wrap_helicsFilterSetTag(resc,resv,argc,(mxArray**)(argv)); break;
  case 336: flag=_wrap_helicsFilterSetOption(resc,resv,argc,(mxArray**)(argv)); break;
  case 337: flag=_wrap_helicsFilterGetOption(resc,resv,argc,(mxArray**)(argv)); break;
  default: flag=1, SWIG_Error(SWIG_RuntimeError, "No function id %d.", fcn_id);
  }
  if (flag) {
    mexErrMsgIdAndTxt(SWIG_ErrorType(SWIG_lasterror_code), SWIG_lasterror_msg);
  }
}
