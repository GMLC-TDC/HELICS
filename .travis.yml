dist: trusty
language: cpp

cache:
  ccache: true
  directories:
    - dependencies
    - build/libs

before_cache:
  - ${TRAVIS_BUILD_DIR}/scripts/cleanup-cmake.sh

env:
  global:
    - MAKEFLAGS="-j 2"

# Create aliases for some of shared build configuration
_basic_env:
- &daily_linux
  if: type = cron
  os: linux
  compiler: gcc
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-6
        - valgrind
        - lcov
- &daily_osx
  if: type = cron
  os: osx
  compiler: clang
- &linux_base
  if: type != cron
  os: linux
  compiler: gcc
- &osx_base
  if: branch IN (master, develop)
  os: osx
  compiler: clang

jobs:
  # On weekdays, the backlog for waiting OS X builds is huge
  fast_finish: true
  allow_failures:
    - os: osx
    - name: "Clang 4 Thread Sanitizer"

  include:
    # XCode 6.4, OS X 10.10
    - <<: *osx_base
      name: "XCode 6.4 macOS 10.10"
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=64"
        - HOMEBREW_NO_AUTO_UPDATE=1
        - CI_BOOST_VERSION=1.58.0
      osx_image: xcode6.4
    # XCode 7.3, OS X 10.11
    - <<: *osx_base
      name: "XCode 7.3 macOS 10.11"
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=73"
        - HOMEBREW_NO_AUTO_UPDATE=1
      osx_image: xcode7.3

    # XCode 8gm, OS X 10.11
    - <<: *daily_osx
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=8gm"
        - HOMEBREW_NO_AUTO_UPDATE=1
      osx_image: xcode8

    - name: "XCode 8gm, macOS 10.11"
      if: branch =~ /^.*HELICS_2.*$/
      os: osx
      compiler: clang
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=8gm"
        - HOMEBREW_NO_AUTO_UPDATE=1
      osx_image: xcode8

    - <<: *linux_base
      name: "GCC 6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_SWIG=true
        - USE_MPI=mpich

    - <<: *linux_base
      name: "GCC 4.9 (No SWIG)"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-4.9 && CXX=g++-4.9"
        - USE_SWIG=false
        - CI_BOOST_VERSION=1.61.0
        - ENABLE_CPACK=true
        - INSTALL_SYSTEM_LIBRARIES=true
        - UPLOAD_BINTRAY_ARTIFACT=true

    - <<: *linux_base
      name: "Clang 3.6"
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
          packages:
            - clang-3.6
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-3.6' && CXX='clang++-3.6'"
        - CCACHE_CPP2=yes
        - USE_SWIG=true

   # ------------------------------------------------
   # Jobs for daily valgrind and code coverage tests
   # ------------------------------------------------
    # Valgrind build
    - <<: *daily_linux
      name: "GCC 6 Valgrind"
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_SWIG=true
        - RUN_VALGRIND=true
        - DISABLE_INTERFACES="Python,Java"
        - BUILD_TYPE=RelWithDebInfo
    # Code coverage build
    - <<: *daily_linux
      name: "GCC 6 Code Coverage"
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_SWIG=true 
        - TEST_TYPE=Coverage
        - BUILD_TYPE=Coverage
        - DISABLE_INTERFACES="Python,Java"
        - GCOV_TOOL=gcov-6
        - USE_MPI=mpich
        - CTEST_VERBOSE=true
    # GCC 5 build
    - <<: *daily_linux
      name: "GCC 5"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC='gcc-5' && CXX='g++-5'"
    # Clang 5 build
    - <<: *daily_linux
      name: "Clang 5"
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - libstdc++-6-dev
            - clang-5.0
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-5.0' && CXX='clang++-5.0'"
        - CCACHE_CPP2=yes
        - USE_SWIG=true
        - CXX_STANDARD=17
    # TSAN build
    - <<: *daily_linux
      name: "Clang 4 Thread Sanitizer"
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
          packages:
            - libstdc++-6-dev
            - clang-4.0
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-4.0' && CXX='clang++-4.0'"
        - CCACHE_CPP2=yes
        - CI_TEST_CONFIG="TSAN"
        - DISABLE_INTERFACES="Python,Java"
        - RUN_TSAN=true
        - USE_MPI=mpich
        - JOB_OPTION_FLAGS="-C../scripts/tsan-cache.cmake"
    # UBSAN build
    - <<: *daily_linux
      name: "Clang 4 Undefined Behavior Sanitizer"
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-4.0
          packages:
            - libstdc++-6-dev
            - clang-4.0
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-4.0' && CXX='clang++-4.0'"
        - CCACHE_CPP2=yes
        - DISABLE_INTERFACES="Python,Java"
        - RUN_UBSAN=true
        - USE_MPI=mpich
        - JOB_OPTION_FLAGS="-C../scripts/ubsan-cache.cmake"
    # XCode 8gm, OS X 10.11
    - <<: *daily_osx
      name: "XCode 8gm macOS 10.11"
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=8gm"
        - HOMEBREW_NO_AUTO_UPDATE=1
      osx_image: xcode8

branches:
  except:
    - gh-pages

before_install:
  - eval "${MATRIX_EVAL}"
  - $CXX --version

install:
  - export BOOST_USE_STATIC=true
  - source scripts/install-ci-dependencies.sh

  - SHELLNOCASEMATCH=$(shopt -p nocasematch; true)
  - shopt -s nocasematch
  - OPTION_FLAGS_ARR=()
  - OPTION_FLAGS_ARR+=("-DBUILD_C_SHARED_LIB=ON" "-DBUILD_SHARED_LIBS=ON" "-DEXAMPLES_WARNINGS_AS_ERROR=ON")
  - if [[ "${DISABLE_INTERFACES}" != *"Java"* ]]; then OPTION_FLAGS_ARR+=("-DBUILD_JAVA_INTERFACE=ON") ; fi
  - if [[ "${DISABLE_INTERFACES}" != *"Python"* ]]; then OPTION_FLAGS_ARR+=("-DBUILD_PYTHON_INTERFACE=ON" "-DPYTHON_LIBRARY=${PYTHON_LIB_PATH}" "-DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE_PATH}") ; fi
  - OPTION_FLAGS_ARR+=("-DZMQ_USE_STATIC_LIBRARY=ON -DUSE_BOOST_STATIC_LIBS=ON")

  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then OPTION_FLAGS_ARR+=("-DDISABLE_SYSTEM_CALL_TESTS=ON") ; fi

  - if [[ "$USE_SWIG" == 'false' ]] ; then OPTION_FLAGS_ARR+=("-DENABLE_SWIG=OFF") ; fi
  - if [[ "$ENABLE_CPACK" ]] ; then OPTION_FLAGS_ARR+=("-DENABLE_PACKAGE_BUILD=ON") ; fi
  - if [[ "$INSTALL_SYSTEM_LIBRARIES" ]] ; then OPTION_FLAGS_ARR+=("-DINSTALL_SYSTEM_LIBRARIES=ON") ; fi
  - if [[ "$BUILD_TYPE" ]]; then OPTION_FLAGS_ARR+=("-DCMAKE_BUILD_TYPE=${BUILD_TYPE}") ; fi
  - if [[ "$BUILD_TYPE" == "Coverage" ]]; then OPTION_FLAGS_ARR+=("-DTEST_CODE_COVERAGE=ON") ; fi
  - if [[ "$CXX_STANDARD" == 17 ]] ; then OPTION_FLAGS+=("-DENABLE_CXX_17=ON") ; fi
  - if [[ "$USE_MPI" ]]; then OPTION_FLAGS_ARR+=("-DENABLE_MPI=ON") ; fi
  - if [[ "$USE_MPI" ]]; then CC=${CI_DEPENDENCY_DIR}/mpi/bin/mpicc ; CXX=${CI_DEPENDENCY_DIR}/mpi/bin/mpic++ ; fi
  - export HELICS_OPTION_FLAGS=${OPTION_FLAGS_ARR[@]}

  - TEST_FLAGS_ARR=("$TEST_TYPE")
  - if [[ "$RUN_VALGRIND" ]]; then TEST_FLAGS_ARR+=("--valgrind" "--disable-unit-tests") ; fi
  - if [[ "$RUN_CACHEGRIND" ]]; then TEST_FLAGS_ARR+=("--cachegrind") ; fi
  - if [[ "$RUN_ASAN" ]]; then TEST_FLAGS_ARR+=("--asan") ; fi
  - if [[ "$RUN_MSAN" ]]; then TEST_FLAGS_ARR+=("--msan") ; fi
  - if [[ "$RUN_TSAN" ]]; then TEST_FLAGS_ARR+=("--tsan") ; fi
  - if [[ "$CI_TEST_CONFIG" ]]; then TEST_FLAGS_ARR+=("$CI_TEST_CONFIG") ; fi
  - if [[ "$RUN_UBSAN" ]]; then TEST_FLAGS_ARR+=("--ubsan") ; fi
  - if [[ "$NO_CTEST" ]]; then TEST_FLAGS_ARR+=("--no-ctest") ; fi
  - if [[ "$CTEST_VERBOSE" ]]; then TEST_FLAGS_ARR+=("--ctest-verbose") ; fi
  - if [[ "$DISABLE_CI_TESTS" ]]; then TEST_FLAGS_ARR+=("--disable-unit-tests") ; fi
  - export CI_TEST_FLAGS=${TEST_FLAGS_ARR[@]}
  - $SHELLNOCASEMATCH
  
script:
  - mkdir -p build && cd build
  - HELICS_DEPENDENCY_FLAGS+="-DBOOST_INSTALL_PATH=${CI_DEPENDENCY_DIR}/boost"
  - cmake .. ${JOB_OPTION_FLAGS} ${HELICS_DEPENDENCY_FLAGS} ${HELICS_OPTION_FLAGS} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
  - make ${MAKEFLAGS}

  # Setup counters for coverage
  - if [[ "$BUILD_TYPE" == "Coverage" ]]; then pushd .. && scripts/lcov-helper.sh setup-counters && popd ; fi

  - if [[ "TRAVIS_OS_NAME" == "osx" ]] ; then python ../scripts/fix_install_names.py ; fi
  - if [[ "TRAVIS_OS_NAME" == "osx" ]] ; then make ${MAKEFLAGS} install ; fi

  # Run CI tests
  - export CTEST_OPTIONS="--output-on-failure"
  - travis_wait ../scripts/run-ci-tests.sh ${CI_TEST_FLAGS}

  # Gather coverage results
  - if [[ "$BUILD_TYPE" == "Coverage" ]]; then pushd .. && scripts/lcov-helper.sh gather-coverage-info --gcov ${GCOV_TOOL} --codecov && popd ; fi

  # Upload artifact to Bintray
  - if [[ "$UPLOAD_BINTRAY_ARTIFACT" ]]; then cpack -G STGZ -B $(pwd)/cpack-output && curl -T $(ls cpack-output/Helics*.sh) -u${BT_USER}:${BT_APIKEY} "https://api.bintray.com/content/helics/develop/snapshot/${TRAVIS_BRANCH}/${TRAVIS_BRANCH}/helics-install-$(uname -s).sh?publish=1&override=1" ; fi 
notifications:
    email: false

