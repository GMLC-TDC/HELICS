language: cpp
dist: trusty

cache:
  ccache: true
  directories:
    - dependencies
    - build/libs
    - $HOME/AppData/Local/Temp/chocolatey
    - /c/tools/msys64

before_cache:
  - ${TRAVIS_BUILD_DIR}/scripts/cleanup-cmake.sh
  - |
    case $TRAVIS_OS_NAME in
      windows)
        $SHELL_CMD pacman --sync --clean --noconfirm
        ;;
    esac

env:
  global:
    - MAKEFLAGS="-j 4"
    - CMAKE_GENERATOR="Unix Makefiles"

# Create aliases for some of shared build configuration
_basic_env:
- &daily_linux
  if: type = cron
  os: linux
  compiler: gcc
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-6
        - valgrind
        - lcov
        - libzmq3-dev
- &daily_osx
  if: type = cron
  os: osx
  compiler: clang
- &linux_base
  os: linux
  compiler: gcc
- &osx_base
  os: osx
  compiler: clang

# Install macOS dependencies using Homebrew
addons:
  homebrew:
    brewfile: .ci/Brewfile.travis
    update: true

jobs:
  # On weekdays, the backlog for waiting OS X builds is huge
  fast_finish: true
  allow_failures:
    - os: osx
    - name: "Clang 5 Thread Sanitizer"
    - script: scripts/trigger-dependent-ci-builds.sh

  include:
    # XCode 10.2, OS X 10.14
    - <<: *osx_base
      name: "XCode 10.2, OS X 10.14"
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=102"
        - HOMEBREW_NO_AUTO_UPDATE=1
        - CI_TEST_EXCLUDE="application-api-ci-tests|system-ci-tests"
      osx_image: xcode10.2

    # XCode 9.4, OS X 10.13
    - <<: *osx_base
      name: "XCode 9.4, macOS 10.13"
      if: (branch = develop AND type IN (cron)) OR (branch = master AND type IN (push, pull_request))
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=94"
        - HOMEBREW_NO_AUTO_UPDATE=1
        - USE_SWIG=false
      osx_image: xcode9.4
      addons:
        homebrew:
          brewfile: .ci/Brewfile-minimal.travis
          update: true

    - <<: *linux_base
      name: "GCC 6"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - libzmq3-dev
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_SWIG=true
        - USE_CMAKE_VERSION=3.7.2
        - BUILD_BENCHMARKS=true
        - USE_MPI=mpich

    # Clang 5 build
    - <<: *linux_base
      name: "Clang 5"
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - libstdc++-6-dev
            - clang-5.0
            - libzmq3-dev
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-5.0' && CXX='clang++-5.0'"
        - CCACHE_CPP2=yes
        - USE_SWIG=true
        - BUILD_BENCHMARKS=true
        - USE_CMAKE_VERSION=3.14.5
        - CXX_STANDARD=17

    - <<: *linux_base
      name: "GCC 4.9 (No SWIG, Packaging)"
      if: (branch = develop AND type IN (pull_request, cron)) OR (branch != develop)
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
            - libzmq3-dev
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-4.9 && CXX=g++-4.9"
        - USE_SWIG=false
        - CI_BOOST_VERSION=1.61.0
        - ENABLE_CPACK=true
        - INSTALL_SYSTEM_LIBRARIES=true
        - TEST_TYPE=Packaging
      after_script: ${TRAVIS_BUILD_DIR}/scripts/upload-ci-artifact.sh

    - <<: *linux_base
      name: "Clang 3.6"
      if: (branch = develop AND type IN (pull_request, cron)) OR (branch = master AND type IN (push, pull_request))
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
          packages:
            - clang-3.6
            - libzmq3-dev
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-3.6' && CXX='clang++-3.6'"
        - CCACHE_CPP2=yes
        - USE_SWIG=true
        - CI_BOOST_VERSION=1.58.0
        - SKIP_TEST_RUN=true
        - JOB_OPTION_FLAGS="-DHELICS_DISABLE_BOOST=ON"

    - os: windows
      name: "MinGW"
      if: (branch = develop AND type IN (cron)) OR (branch = master AND type IN (push, pull_request)) OR (branch =~ /(mingw)/) OR (commit_message =~ /(mingw)/)
      env:
        - DISABLE_INTERFACES="Python,Java"
        - CI_TEST_MATCH="core-ci-tests"
        - ZMQ_SUBPROJECT=true
        - ZMQ_FORCE_SUBPROJECT=true
        - DISABLE_EXAMPLES=true
        - JOB_OPTION_FLAGS=' -DCMAKE_SH=CMAKE_SH-NOTFOUND'
        - CMAKE_GENERATOR="MinGW Makefiles"
        - HELICS_DEPENDENCY_FLAGS="-DBOOST_INSTALL_PATH=/c/local/boost_1_58_0 -DCMAKE_C_COMPILER=/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/g++.exe"
      install:
        - echo $PATH
        - export SHELL=cmd
        - source scripts/setup-helics-ci-options.sh
        - choco install boost-msvc-12
    
    - os: windows
      name: "MSYS"
      if: (branch = develop AND type IN (cron)) OR (branch = master AND type IN (push, pull_request)) OR (branch =~ /(msys)/) OR (commit_message =~ /(msys)/)
      env:
        - DISABLE_INTERFACES="Python,Java"
        - CI_TEST_MATCH="core-ci-tests"
        - DISABLE_EXAMPLES=true
        - CMAKE_GENERATOR="MSYS Makefiles"
        - SET_MSYS_PATH=true
      install:
        - source scripts/setup-helics-ci-options.sh
        # See https://docs.travis-ci.com/user/reference/windows/#how-do-i-use-msys2 for details on the following
        # Exporting PATH with /c/tools/msys64/mingw64/bin added did not work
        # As a workaround, we run scripts for builds + tests that setup the right PATH if SET_MSYS_PATH=true
        # The rm line below is to work with caching by removing the empty cache folder Travis creates
        - if [[ ! -f /c/tools/msys64/msys2_shell.cmd ]]; then rm -rf /c/tools/msys64 ; fi
        - choco uninstall -y mingw
        - choco upgrade --no-progress -y msys2
        - export SHELL_CMD='cmd //C RefreshEnv.cmd '
        - export SHELL_CMD+='& set MSYS=winsymlinks:nativestrict '
        - export SHELL_CMD+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
        - export SHELL_CMD+=" -msys2 -c \$\* --"
        - $SHELL_CMD pacman -Sy --noconfirm --needed base-devel mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-zeromq

    # -----------------------------------------------
    # Daily ZMQ subproject build with new CMake
    # -----------------------------------------------
    - <<: *daily_linux
      name: "GCC 6 (CMake 3.11.4, ZMQ Subproject)"
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_SWIG=true
        - SKIP_TEST_RUN=true
        - USE_CMAKE_VERSION=3.11.4
        - ZMQ_SUBPROJECT=true
        - ZMQ_FORCE_SUBPROJECT=true

    # ------------------------------------------------
    # Jobs for daily valgrind and code coverage tests
    # ------------------------------------------------
    # Valgrind build
    - <<: *daily_linux
      name: "GCC 6 Valgrind"
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_SWIG=true
        - RUN_VALGRIND=true
        - DISABLE_INTERFACES="Python,Java"
        - BUILD_TYPE=RelWithDebInfo
    # Code coverage build
    - <<: *daily_linux
      if: (type = cron) OR (branch =~ /(codecov)/) OR (commit_message =~ /(codecov)/)
      name: "GCC 6 Code Coverage"
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - USE_SWIG=true 
        - TEST_TYPE=Coverage
        - BUILD_TYPE=Coverage
        - DISABLE_INTERFACES="Python,Java"
        - GCOV_TOOL=gcov-6
        - USE_MPI=mpich
        - CTEST_VERBOSE=true
      
    - stage: trigger dependent repositories
      if: branch IN (master, develop)
      before_install: true
      install: true
      script: scripts/trigger-dependent-ci-builds.sh

branches:
  except:
    - gh-pages

before_install:
  - eval "${MATRIX_EVAL}"
  - $CXX --version

install:
  - source scripts/install-ci-dependencies.sh
  - source scripts/setup-helics-ci-options.sh
  - export CMAKE_COMPILER_LAUNCHER="-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
  
script:
  - mkdir -p build && cd build
  - $SHELL_CMD ../scripts/ci-build.sh

  # Setup counters for coverage
  - if [[ "$BUILD_TYPE" == "Coverage" ]]; then pushd .. && scripts/lcov-helper.sh setup-counters && popd ; fi

  - if [[ "TRAVIS_OS_NAME" == "osx" ]]; then python ../scripts/fix_install_names.py ; fi
  - if [[ "TRAVIS_OS_NAME" == "osx" ]]; then make ${MAKEFLAGS} install ; fi

  # Run CI tests
  - export CTEST_OPTIONS="--output-on-failure"
  - |
    if [[ "$SKIP_TEST_RUN" != "true" ]]; then
      echo "travis_wait ../scripts/run-ci-tests.sh ${CI_TEST_FLAGS}"
      travis_wait $SHELL_CMD ../scripts/run-ci-tests.sh ${CI_TEST_FLAGS}
    fi

  # Gather coverage results
  - if [[ "$BUILD_TYPE" == "Coverage" ]]; then pushd .. && scripts/lcov-helper.sh gather-coverage-info --gcov ${GCOV_TOOL} --codecov && popd ; fi

  # Create an installer using CPack (not supported on builds using custom SHELL_CMD)
  - if [[ "$ENABLE_CPACK" ]]; then cpack -G STGZ -B $(pwd)/cpack-output ; fi

notifications:
    email: false
