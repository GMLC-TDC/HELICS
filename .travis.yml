dist: trusty
language: cpp

cache:
  ccache: true
  directories:
    - dependencies

before_cache:
  - ${TRAVIS_BUILD_DIR}/scripts/cleanup-cmake.sh

env:
  global:
    - MAKEFLAGS="-j 2"

# Create aliases for some of shared build configuration
_basic_env:
- &daily_linux
  if: type = cron
  os: linux
  compiler: gcc
  addons:
    apt:
      sources:
        - ubuntu-toolchain-r-test
      packages:
        - g++-6
        - valgrind
- &daily_osx
  if: type = cron
  os: osx
  compiler: clang
- &linux_base
  if: type != cron
  os: linux
  compiler: gcc
- &osx_base
  if: branch IN (master, develop)
  os: osx
  compiler: clang

jobs:
  # On weekdays, the backlog for waiting OS X builds is huge
  fast_finish: true
  allow_failures:
    - os: osx

  include:
    # XCode 6.4, OS X 10.10
    - <<: *osx_base
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=64"
        - HOMEBREW_NO_AUTO_UPDATE=1
        - SHARED_LIB_EXT=dylib
        - CI_BOOST_VERSION=1.58.0
      osx_image: xcode6.4
    # XCode 7.3, OS X 10.11
    - <<: *osx_base
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=73"
        - HOMEBREW_NO_AUTO_UPDATE=1
        - SHARED_LIB_EXT=dylib
      osx_image: xcode7.3

    # Built without errors on my clone from one of the changes made
    # Possibly local dependencies, or removing Linux-only commands fixed it
    # XCode 8.3, OS X 10.12
    #- env: COMPILER=clang++ BUILD_TYPE=Debug
    #  osx_image: xcode8.3

    - <<: *linux_base
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - SHARED_LIB_EXT=so
        - USE_SWIG=true
        - USE_MPI=mpich

    - <<: *linux_base
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-4.9 && CXX=g++-4.9"
        - SHARED_LIB_EXT=so
        - USE_SWIG=false
        - CI_BOOST_VERSION=1.61.0

    - <<: *linux_base
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
          packages:
            - clang-3.6
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-3.6' && CXX='clang++-3.6'"
        - CCACHE_CPP2=yes
        - SHARED_LIB_EXT=so
        - USE_SWIG=true

   # ------------------------------------------------
   # Jobs for daily valgrind and code coverage tests
   # ------------------------------------------------
    - <<: *daily_linux
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - SHARED_LIB_EXT=so
        - USE_SWIG=true
        - RUN_VALGRIND=true
    - <<: *daily_linux
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC=gcc-6 && CXX=g++-6"
        - SHARED_LIB_EXT=so
        - USE_SWIG=true
        - RUN_COVERAGE=true
    - <<: *daily_linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env:
        - MATRIX_EVAL="COMPILER=gcc && CC='gcc-5' && CXX='g++-5'"
        - SHARED_LIB_EXT=so
    - <<: *daily_linux
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
          packages:
            - libstdc++-6-dev
            - clang-5.0
      env:
        - MATRIX_EVAL="COMPILER=clang && CC='clang-5.0' && CXX='clang++-5.0'"
        - CCACHE_CPP2=yes
        - SHARED_LIB_EXT=so
        - USE_SWIG=true
        - CXX_STANDARD=17
    # XCode 8gm, OS X 10.11
    - <<: *daily_osx
      env:
        - MATRIX_EVAL="COMPILER=clang && BUILD_TYPE=Release && TRAVIS_XCODE_VERSION=8gm"
        - HOMEBREW_NO_AUTO_UPDATE=1
        - SHARED_LIB_EXT=dylib
      osx_image: xcode8

branches:
  except:
    - gh-pages

before_install:
  - eval "${MATRIX_EVAL}"
  - $CXX --version

install:
  - source scripts/install-ci-dependencies.sh
  - export HELICS_DEPENDENCY_FLAGS=""
  - export HELICS_OPTION_FLAGS="${OPTION_FLAGS}"

script:
  - mkdir build && cd build
  - HELICS_DEPENDENCY_FLAGS+="-DZeroMQ_INSTALL_PATH=${CI_DEPENDENCY_DIR}/zmq -DBOOST_INSTALL_PATH=${CI_DEPENDENCY_DIR}/boost"
  - HELICS_OPTION_FLAGS+="-DBUILD_C_SHARED_LIB=ON -DBUILD_CXX_SHARED_LIB=ON -DBUILD_PYTHON_INTERFACE=ON -DBUILD_JAVA_INTERFACE=ON -DEXAMPLES_WARNINGS_AS_ERROR=ON -DPYTHON_LIBRARY=$(python3-config --prefix)/lib/libpython3.6m.${SHARED_LIB_EXT} -DPYTHON_INCLUDE_DIR=$(python3-config --prefix)/include/python3.6m/"
  - if [[ "$USE_SWIG" == 'false' ]] ; then HELICS_OPTION_FLAGS+=" -DDISABLE_SWIG=ON" ; fi
  - if [[ "$USE_MPI" ]]; then HELICS_OPTION_FLAGS+=" -DMPI_ENABLE=ON" ; fi
  - if [[ "$CXX_STANDARD" == 17 ]] ; then HELICS_OPTION_FLAGS+=" -DENABLE_CXX_17=ON" ; fi
    # - echo "$HELICS_OPTION_FLAGS"
    # - echo "$HELICS_DEPENDENCY_FLAGS"
  - if [[ "$USE_MPI" ]]; then CC=${CI_DEPENDENCY_DIR}/mpi/bin/mpicc ; CXX=${CI_DEPENDENCY_DIR}/mpi/bin/mpic++ ; fi
  - cmake .. ${HELICS_DEPENDENCY_FLAGS} ${HELICS_OPTION_FLAGS} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
  - make -j2
  # For controlling which tests get run:
  # ctest -I <start>,<end>,<stride>,<list of test numbers>
  # 1 = common_tests
  # 2 = core tests
  # 3 = key_tests
  # 4 = application api tests
  # 5 = extended_api tests
  # 6 = shared_library tests
  # 7 = helics-apps tests
  - ctest --verbose --timeout 220 -I 0,0,0,1
  # - ctest --verbose --timeout 120 -I 0,0,0,2
  - ctest --verbose --timeout 240 -I 0,0,0,6
  # - ctest --verbose --timeout 240 -I 0,0,0,7
  - ctest --verbose --timeout 240 -I 0,0,0,3
  - ctest --verbose -L Java
  - ctest -L Examples

  - export PYTHONPATH="$(pwd)/swig/python"
    # - echo "$LD_LIBRARY_PATH"
    # - echo "$DYLD_FALLBACK_LIBRARY_PATH"
  - python3 -m helics
  - python3 -m pytest -sv ../tests/python_helics

notifications:
    email: false

